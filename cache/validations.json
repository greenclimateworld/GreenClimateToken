{
  "version": "3.2",
  "log": [
    {
      "IVotes": {
        "src": "@openzeppelin\\contracts\\governance\\utils\\IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "14b7db2feb23efcab8b774c28408ca6cbfc43022b47fd26bc5da2885d847dc94",
          "withoutMetadata": "ec4e87fa3f7622c08c82f57970dd54c7ba8a40d8f4161066c11e31ed09979ad7",
          "linkedWithoutMetadata": "ec4e87fa3f7622c08c82f57970dd54c7ba8a40d8f4161066c11e31ed09979ad7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)760_storage)dyn_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)760_storage)dyn_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)760_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)760_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)760_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Wrapper": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Wrapper.sol:18",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "depositFor(address,uint256)",
          "withdrawTo(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Wrapper",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Wrapper.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlying",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Wrapper.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2266_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2266_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2266_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\utils\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "38cfb2aaa5593243ab62adefd766d8f8910e78ed5db41266988ebe24d801514f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:9",
        "version": {
          "withMetadata": "563497f6ce8c298fea64d75417581ebeb05038d9702a87a6303c618c455ab6e9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin\\contracts\\utils\\Counters.sol:14",
        "version": {
          "withMetadata": "6ce8ca4d533fa5e5a6398a73b141f05dd00663b2af1223cce3a1ecad81992fbc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "c8856191fd28b1f6b25499079f47b60659900e577bc366662bc139de2591343f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin\\contracts\\utils\\cryptography\\ECDSA.sol:14",
        "version": {
          "withMetadata": "00bf142ccf3a53b620e9b66f37bc45f4cd23a7b3f9e7465add15a9c8f4a032b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin\\contracts\\utils\\math\\Math.sol:9",
        "version": {
          "withMetadata": "03435a70fd682b0ce115f38fb2ccf7f5f454b7b3eec7a04cb719ed17cccb5f34",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeCast.sol:21",
        "version": {
          "withMetadata": "8c44128f146dd72a63c2f82fa930678363dfed959de388ca461a922a0e43e589",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "gWGC": {
        "src": "contracts\\gWGC.sol:9",
        "version": {
          "withMetadata": "be595daf1ad014e602e9ce937a95c211d8fa3761b3301ed81d639309c33abfb2",
          "withoutMetadata": "9788caef4eaed7068ab69e8a074bf08e1ecc820fd8cd3fcc69fda604b7fe0eca",
          "linkedWithoutMetadata": "9788caef4eaed7068ab69e8a074bf08e1ecc820fd8cd3fcc69fda604b7fe0eca"
        },
        "inherit": [
          "ERC20Wrapper",
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "gWGC",
            "src": "contracts\\gWGC.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\utils\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "38cfb2aaa5593243ab62adefd766d8f8910e78ed5db41266988ebe24d801514f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:9",
        "version": {
          "withMetadata": "563497f6ce8c298fea64d75417581ebeb05038d9702a87a6303c618c455ab6e9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "4fc8bd3a611818eed1829df69b17e65c2b87bd8b502eaaa31694e485f2ae86f9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGCWrapper": {
        "src": "contracts\\Wrapper.sol:15",
        "version": {
          "withMetadata": "c14efd9735b80227d5ddc2a06bfd71a195ee445723b707b94edf7506a4462990",
          "withoutMetadata": "d0f47579c86a0abb587f89cdff33377e1bdc74d95a6ab27d75aee60196b9c0ff",
          "linkedWithoutMetadata": "d0f47579c86a0abb587f89cdff33377e1bdc74d95a6ab27d75aee60196b9c0ff"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address,address)",
          "updateToken(address,address)",
          "exchange(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WGCWrapper",
            "src": "contracts\\Wrapper.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WGCWrapper",
              "label": "oldToken",
              "type": "t_contract(IERC20)182",
              "src": "contracts\\Wrapper.sol:18"
            },
            {
              "contract": "WGCWrapper",
              "label": "newToken",
              "type": "t_contract(IERC20)182",
              "src": "contracts\\Wrapper.sol:19"
            }
          ],
          "types": {
            "t_contract(IERC20)182": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\utils\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "38cfb2aaa5593243ab62adefd766d8f8910e78ed5db41266988ebe24d801514f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:9",
        "version": {
          "withMetadata": "563497f6ce8c298fea64d75417581ebeb05038d9702a87a6303c618c455ab6e9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "4fc8bd3a611818eed1829df69b17e65c2b87bd8b502eaaa31694e485f2ae86f9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGCWrapper": {
        "src": "contracts\\Wrapper.sol:15",
        "version": {
          "withMetadata": "c14efd9735b80227d5ddc2a06bfd71a195ee445723b707b94edf7506a4462990",
          "withoutMetadata": "d0f47579c86a0abb587f89cdff33377e1bdc74d95a6ab27d75aee60196b9c0ff",
          "linkedWithoutMetadata": "d0f47579c86a0abb587f89cdff33377e1bdc74d95a6ab27d75aee60196b9c0ff"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address,address)",
          "updateToken(address,address)",
          "exchange(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WGCWrapper",
            "src": "contracts\\Wrapper.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WGCWrapper",
              "label": "oldToken",
              "type": "t_contract(IERC20)182",
              "src": "contracts\\Wrapper.sol:18"
            },
            {
              "contract": "WGCWrapper",
              "label": "newToken",
              "type": "t_contract(IERC20)182",
              "src": "contracts\\Wrapper.sol:19"
            }
          ],
          "types": {
            "t_contract(IERC20)182": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IVotes": {
        "src": "@openzeppelin\\contracts\\governance\\utils\\IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "14b7db2feb23efcab8b774c28408ca6cbfc43022b47fd26bc5da2885d847dc94",
          "withoutMetadata": "ec4e87fa3f7622c08c82f57970dd54c7ba8a40d8f4161066c11e31ed09979ad7",
          "linkedWithoutMetadata": "ec4e87fa3f7622c08c82f57970dd54c7ba8a40d8f4161066c11e31ed09979ad7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)760_storage)dyn_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)760_storage)dyn_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)760_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)760_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)760_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Wrapper": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Wrapper.sol:18",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "depositFor(address,uint256)",
          "withdrawTo(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Wrapper",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Wrapper.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlying",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Wrapper.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2266_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2266_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2266_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\utils\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "38cfb2aaa5593243ab62adefd766d8f8910e78ed5db41266988ebe24d801514f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:9",
        "version": {
          "withMetadata": "563497f6ce8c298fea64d75417581ebeb05038d9702a87a6303c618c455ab6e9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin\\contracts\\utils\\Counters.sol:14",
        "version": {
          "withMetadata": "6ce8ca4d533fa5e5a6398a73b141f05dd00663b2af1223cce3a1ecad81992fbc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "c8856191fd28b1f6b25499079f47b60659900e577bc366662bc139de2591343f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin\\contracts\\utils\\cryptography\\ECDSA.sol:14",
        "version": {
          "withMetadata": "00bf142ccf3a53b620e9b66f37bc45f4cd23a7b3f9e7465add15a9c8f4a032b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin\\contracts\\utils\\math\\Math.sol:9",
        "version": {
          "withMetadata": "03435a70fd682b0ce115f38fb2ccf7f5f454b7b3eec7a04cb719ed17cccb5f34",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeCast.sol:21",
        "version": {
          "withMetadata": "8c44128f146dd72a63c2f82fa930678363dfed959de388ca461a922a0e43e589",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "gWGC": {
        "src": "contracts\\gWGC.sol:9",
        "version": {
          "withMetadata": "be595daf1ad014e602e9ce937a95c211d8fa3761b3301ed81d639309c33abfb2",
          "withoutMetadata": "9788caef4eaed7068ab69e8a074bf08e1ecc820fd8cd3fcc69fda604b7fe0eca",
          "linkedWithoutMetadata": "9788caef4eaed7068ab69e8a074bf08e1ecc820fd8cd3fcc69fda604b7fe0eca"
        },
        "inherit": [
          "ERC20Wrapper",
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "gWGC",
            "src": "contracts\\gWGC.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "4063b268132ad211102c0befeefb4ea8a33fbf6ccbc177dc4bf5d67a51b479c5",
          "withoutMetadata": "0cc77445e3e3f24a28573bb0c8bd2255736f9b5bed7e96bb3682a7ec99147cf5",
          "linkedWithoutMetadata": "0cc77445e3e3f24a28573bb0c8bd2255736f9b5bed7e96bb3682a7ec99147cf5"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\utils\\SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "6e9546b1a4f84bcb85ce5e0d78713de7d2e0416526d54b860a49c23147c7c13d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "670122db565abb621fd3003a869314f015a5405dbcbccc8cc118b6577185ab79",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "0203054938213da8bb127ebdc44f82299584e0c65cea2483af808fd8dd187f90",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISToken": {
        "src": "contracts\\WGCStaking.sol:11",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "distributeRewards(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITreasury": {
        "src": "contracts\\WGCStaking.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "distributeStakingReward()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGCStaking": {
        "src": "contracts\\WGCStaking.sol:19",
        "version": {
          "withMetadata": "9dfc698257f77a55a6566bc97bafe9fdd435e3bda5ad591d952e61aaf78d3895",
          "withoutMetadata": "ee28bc22c28ce19e09dee89816b3e98c098df4e0d408074720be570d44efdd4a",
          "linkedWithoutMetadata": "ee28bc22c28ce19e09dee89816b3e98c098df4e0d408074720be570d44efdd4a"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "updateConfiguration(address,address,address,uint256)",
          "initialize()",
          "stake(uint256)",
          "unstake(uint256)",
          "rebase()",
          "rewardBlocksLength()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGCStaking",
              "label": "wgc",
              "type": "t_contract(ERC20Upgradeable)810",
              "src": "contracts\\WGCStaking.sol:24"
            },
            {
              "contract": "WGCStaking",
              "label": "sWgc",
              "type": "t_contract(ISToken)1752",
              "src": "contracts\\WGCStaking.sol:25"
            },
            {
              "contract": "WGCStaking",
              "label": "treasury",
              "type": "t_contract(ITreasury)1756",
              "src": "contracts\\WGCStaking.sol:26"
            },
            {
              "contract": "WGCStaking",
              "label": "minimumLimitToStake",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:28"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardHistory",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\WGCStaking.sol:29"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardBlocks",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCStaking.sol:30"
            },
            {
              "contract": "WGCStaking",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:31"
            }
          ],
          "types": {
            "t_contract(ERC20Upgradeable)810": {
              "label": "contract ERC20Upgradeable"
            },
            "t_contract(ISToken)1752": {
              "label": "contract ISToken"
            },
            "t_contract(ITreasury)1756": {
              "label": "contract ITreasury"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:27",
        "inherit": [
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "TimersUpgradeable",
          "AddressUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "()",
          "supportsInterface(bytes4)",
          "name()",
          "version()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalThreshold()",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "relay(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorUpgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:40"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "_proposals",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:42"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:397"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)": {
              "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalCore)570_storage": {
              "label": "struct GovernorUpgradeable.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6952_storage"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6952_storage"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                }
              ]
            },
            "t_struct(BlockNumber)6952_storage": {
              "label": "struct TimersUpgradeable.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:14",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:230"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TimelockControllerUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:24",
        "version": {
          "withMetadata": "ac6c311e5e517f453b6f6e3c8041346f5e01e867dc335db08c1eac6fa3081227",
          "withoutMetadata": "f38eb9986b2fa0756366d0bf0fed715e0c79ae798e3dbd60c91607a0dce716df",
          "linkedWithoutMetadata": "f38eb9986b2fa0756366d0bf0fed715e0c79ae798e3dbd60c91607a0dce716df"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:30"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:31"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:368"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:23",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "TimersUpgradeable",
          "SafeCastUpgradeable"
        ],
        "methods": [
          "COUNTING_MODE()",
          "propose(address[],uint256[],bytes[],string)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "proposals(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "quorumVotes()",
          "hasVoted(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "_proposalDetails",
              "type": "t_mapping(t_uint256,t_struct(ProposalDetails)2537_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:51"
            },
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:300"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ProposalDetails)2537_storage)": {
              "label": "mapping(uint256 => struct GovernorCompatibilityBravoUpgradeable.ProposalDetails)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalDetails)2537_storage": {
              "label": "struct GovernorCompatibilityBravoUpgradeable.ProposalDetails",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)3335_storage)"
                },
                {
                  "label": "descriptionHash",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_address,t_struct(Receipt)3335_storage)": {
              "label": "mapping(address => struct IGovernorCompatibilityBravoUpgradeable.Receipt)"
            },
            "t_struct(Receipt)3335_storage": {
              "label": "struct IGovernorCompatibilityBravoUpgradeable.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint96"
                }
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint96": {
              "label": "uint96"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumVotes()",
          "proposals(uint256)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:126"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorSettingsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:14",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "votingDelay()",
          "votingPeriod()",
          "proposalThreshold()",
          "setVotingDelay(uint256)",
          "setVotingPeriod(uint256)",
          "setProposalThreshold(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:15"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingPeriod",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:16"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_proposalThreshold",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:17"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:129"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorTimelockControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:27",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "state(uint256)",
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "updateTimelock(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelock",
              "type": "t_contract(TimelockControllerUpgradeable)2468",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:28"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelockIds",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:29"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:174"
            }
          ],
          "types": {
            "t_contract(TimelockControllerUpgradeable)2468": {
              "label": "contract TimelockControllerUpgradeable"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesQuorumFractionUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:15",
        "inherit": [
          "GovernorVotesUpgradeable",
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumNumerator()",
          "quorumDenominator()",
          "quorum(uint256)",
          "updateQuorumNumerator(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "_quorumNumerator",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:15",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "getVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "token",
              "type": "t_contract(IVotesUpgradeable)4377",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_contract(IVotesUpgradeable)4377": {
              "label": "contract IVotesUpgradeable"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorTimelockUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorTimelockUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\utils\\IVotesUpgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "4063b268132ad211102c0befeefb4ea8a33fbf6ccbc177dc4bf5d67a51b479c5",
          "withoutMetadata": "0cc77445e3e3f24a28573bb0c8bd2255736f9b5bed7e96bb3682a7ec99147cf5",
          "linkedWithoutMetadata": "0cc77445e3e3f24a28573bb0c8bd2255736f9b5bed7e96bb3682a7ec99147cf5"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:28",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "IVotesUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)5174_storage)dyn_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:43"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)5174_storage)dyn_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:44"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:261"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)5174_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)5174_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)5174_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)6570_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:99"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)6570_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)6570_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\utils\\SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "6e9546b1a4f84bcb85ce5e0d78713de7d2e0416526d54b860a49c23147c7c13d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "670122db565abb621fd3003a869314f015a5405dbcbccc8cc118b6577185ab79",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "29f92062a8b6fafa7221077f8cb427df736ef4a5048d43ec31386252ad7b7796",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "4ebe5212f39ac3edd911a272dd6158fbb8f03a3871807c897d4fdcc581b09ac2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\TimersUpgradeable.sol:9",
        "version": {
          "withMetadata": "c59efe873baa56f75b264ae6b0d7305dd49dfc0926c49d9886104ebcd5b4f7a7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "14c7d3e755cd05c8feebe7535f798cdc2ff1773910a773783b20a19fa65bfbb3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:118"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "4c8f9c4e3e66d2c0c03575e51032d422357ed3200399b738102fdd6f77ef71a4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "bec269be4927d676bcbb806156a0a177b5ea632c0616a7e4a2ea4682688a5412",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "0203054938213da8bb127ebdc44f82299584e0c65cea2483af808fd8dd187f90",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BridgeBase": {
        "src": "contracts\\BridgeBase.sol:8",
        "version": {
          "withMetadata": "2e006219fdb1d1e9dcaa1309d69fd4aad25da267465d9d436cbc0a398fb53f11",
          "withoutMetadata": "dd95e08a2c842b79b81b32812d87301b4cb346d37388baa214bf0ef241d1b3d0",
          "linkedWithoutMetadata": "dd95e08a2c842b79b81b32812d87301b4cb346d37388baa214bf0ef241d1b3d0"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "setFee(uint8,address)",
          "initialize(address,address)",
          "deposit(uint8,address,uint256)",
          "withdraw(address,uint256,uint256)",
          "getBalance(address)",
          "getServerBalance()",
          "updateToken(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BridgeBase",
              "label": "admin",
              "type": "t_address",
              "src": "contracts\\BridgeBase.sol:10"
            },
            {
              "contract": "BridgeBase",
              "label": "feeWallet",
              "type": "t_address",
              "src": "contracts\\BridgeBase.sol:11"
            },
            {
              "contract": "BridgeBase",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)5142",
              "src": "contracts\\BridgeBase.sol:12"
            },
            {
              "contract": "BridgeBase",
              "label": "nonce",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\BridgeBase.sol:13"
            },
            {
              "contract": "BridgeBase",
              "label": "processedNonces",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "src": "contracts\\BridgeBase.sol:14"
            },
            {
              "contract": "BridgeBase",
              "label": "fee",
              "type": "t_uint8",
              "src": "contracts\\BridgeBase.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20Upgradeable)5142": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Exponentation": {
        "src": "contracts\\Exponentation.sol:3",
        "version": {
          "withMetadata": "40abda0769c86ff411bf5a0079896075f91a4efcbac4222a1ec588b56f8c671d",
          "withoutMetadata": "f774c4872253bd71ba0c5b9f82857fce13a4cb523c33f0782d3a5cb1b2b20df6",
          "linkedWithoutMetadata": "f774c4872253bd71ba0c5b9f82857fce13a4cb523c33f0782d3a5cb1b2b20df6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "BancorFormula()",
          "power(uint256,uint256,uint256,uint32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Exponentation",
              "label": "maxExpArray",
              "type": "t_array(t_uint256)128_storage",
              "src": "contracts\\Exponentation.sol:20"
            }
          ],
          "types": {
            "t_array(t_uint256)128_storage": {
              "label": "uint256[128]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governor": {
        "src": "contracts\\Governor.sol:13",
        "version": {
          "withMetadata": "768ebd6e2045fd02002cf14f379c8390da3f722c8dff7b4c9869fe6db4c0c1e7",
          "withoutMetadata": "91dc2d92ec31937ca62f64b70fa81298de9d9789ebdc0f781bb3777d5f011bc2",
          "linkedWithoutMetadata": "91dc2d92ec31937ca62f64b70fa81298de9d9789ebdc0f781bb3777d5f011bc2"
        },
        "inherit": [
          "GovernorTimelockControlUpgradeable",
          "GovernorVotesQuorumFractionUpgradeable",
          "GovernorVotesUpgradeable",
          "GovernorCompatibilityBravoUpgradeable",
          "GovernorSettingsUpgradeable",
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,address,address,uint256,uint256,uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "state(uint256)",
          "propose(address[],uint256[],bytes[],string)",
          "proposalThreshold()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockController": {
        "src": "contracts\\TimelockController.sol:23",
        "version": {
          "withMetadata": "0fb3cd0ceabd32c74ab2369b7d94eb3d08ff09399b17ec578b298961911266dc",
          "withoutMetadata": "027d1fb80ec12882f6f096c59cb2d940cf1fc905b4903de81cecfd33319008d4",
          "linkedWithoutMetadata": "027d1fb80ec12882f6f096c59cb2d940cf1fc905b4903de81cecfd33319008d4"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address[],address[])",
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockController",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "contracts\\TimelockController.sol:30"
            },
            {
              "contract": "TimelockController",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "contracts\\TimelockController.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts\\WGC.sol:327",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "INIT_CODE_PAIR_HASH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts\\WGC.sol:218",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts\\WGC.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts\\WGC.sol:171",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITreasury": {
        "src": "contracts\\WGCStaking.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "distributeStakingReward()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGC": {
        "src": "contracts\\WGC.sol:359",
        "version": {
          "withMetadata": "aa683601b1429fe1d14ba101c0dcd9f9d1a453b13a8db10efd387f8cb2ae846e",
          "withoutMetadata": "2f21fa3daa823aa520b7bbe2dc414ca8a7a41b113bfc0e68406e801b72c79000",
          "linkedWithoutMetadata": "2f21fa3daa823aa520b7bbe2dc414ca8a7a41b113bfc0e68406e801b72c79000"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256[18],string,string,uint8)",
          "decimals()",
          "enableTrading()",
          "updateMaxTransactionAmount(uint256)",
          "updateMaxWallet(uint256)",
          "updateMinimumTokensBeforeFeeTaken(uint256)",
          "updateProtectBlockCount(uint256)",
          "setAutomatedMarketMakerPair(address,bool)",
          "updateGasPriceLimit(uint256)",
          "disableTransferDelay()",
          "excludeFromMaxTransaction(address,bool)",
          "excludeFromFee(address)",
          "includeInFee(address)",
          "updateBuyFee(uint256,uint256,uint256)",
          "updateSellFee(uint256,uint256,uint256)",
          "updateTransferFee(uint256,uint256,uint256)",
          "setProtectBlockFee(uint256,uint256,uint256)",
          "updateTreasuryAddress(address)",
          "updatePlantingFundFeeAddress(address)",
          "updateLiquidityAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGC",
              "label": "treasuryContract",
              "type": "t_contract(ITreasury)12086",
              "src": "contracts\\WGC.sol:361"
            },
            {
              "contract": "WGC",
              "label": "plantingFundFeeAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:362"
            },
            {
              "contract": "WGC",
              "label": "liquidityAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:363"
            },
            {
              "contract": "WGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\WGC.sol:365"
            },
            {
              "contract": "WGC",
              "label": "_tradingActiveBlock",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:367"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockCount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:368"
            },
            {
              "contract": "WGC",
              "label": "_gasPriceLimit",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:369"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:370"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:371"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:372"
            },
            {
              "contract": "WGC",
              "label": "tradingActive",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:373"
            },
            {
              "contract": "WGC",
              "label": "isExcludedFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:375"
            },
            {
              "contract": "WGC",
              "label": "buyOrSellSwitch",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:381"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:384"
            },
            {
              "contract": "WGC",
              "label": "_previousStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:385"
            },
            {
              "contract": "WGC",
              "label": "_liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:387"
            },
            {
              "contract": "WGC",
              "label": "_previousLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:388"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:390"
            },
            {
              "contract": "WGC",
              "label": "_previousPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:391"
            },
            {
              "contract": "WGC",
              "label": "buyStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:393"
            },
            {
              "contract": "WGC",
              "label": "buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:394"
            },
            {
              "contract": "WGC",
              "label": "buyPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:395"
            },
            {
              "contract": "WGC",
              "label": "sellStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:397"
            },
            {
              "contract": "WGC",
              "label": "sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:398"
            },
            {
              "contract": "WGC",
              "label": "sellPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:399"
            },
            {
              "contract": "WGC",
              "label": "transferStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:401"
            },
            {
              "contract": "WGC",
              "label": "transferLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:402"
            },
            {
              "contract": "WGC",
              "label": "transferPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:403"
            },
            {
              "contract": "WGC",
              "label": "isExcludedMaxTransactionAmount",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:405"
            },
            {
              "contract": "WGC",
              "label": "_holderLastTransferTimestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\WGC.sol:408"
            },
            {
              "contract": "WGC",
              "label": "_transferDelayEnabled",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:409"
            },
            {
              "contract": "WGC",
              "label": "_liquidityTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:411"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFeeTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:412"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFeeTokens",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:413"
            },
            {
              "contract": "WGC",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:417"
            },
            {
              "contract": "WGC",
              "label": "minimumFeeTokensToTake",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:419"
            },
            {
              "contract": "WGC",
              "label": "maxTransactionAmount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:420"
            },
            {
              "contract": "WGC",
              "label": "maxWallet",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:421"
            },
            {
              "contract": "WGC",
              "label": "pancakeRouter",
              "type": "t_contract(IPancakeRouter02)12477",
              "src": "contracts\\WGC.sol:423"
            },
            {
              "contract": "WGC",
              "label": "pancakePair",
              "type": "t_address",
              "src": "contracts\\WGC.sol:424"
            },
            {
              "contract": "WGC",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:426"
            }
          ],
          "types": {
            "t_contract(ITreasury)12086": {
              "label": "contract ITreasury"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_contract(IPancakeRouter02)12477": {
              "label": "contract IPancakeRouter02"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ISToken": {
        "src": "contracts\\WGCStaking.sol:11",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "distributeRewards(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGCStaking": {
        "src": "contracts\\WGCStaking.sol:19",
        "version": {
          "withMetadata": "9dfc698257f77a55a6566bc97bafe9fdd435e3bda5ad591d952e61aaf78d3895",
          "withoutMetadata": "ee28bc22c28ce19e09dee89816b3e98c098df4e0d408074720be570d44efdd4a",
          "linkedWithoutMetadata": "ee28bc22c28ce19e09dee89816b3e98c098df4e0d408074720be570d44efdd4a"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "updateConfiguration(address,address,address,uint256)",
          "initialize()",
          "stake(uint256)",
          "unstake(uint256)",
          "rebase()",
          "rewardBlocksLength()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGCStaking",
              "label": "wgc",
              "type": "t_contract(ERC20Upgradeable)5064",
              "src": "contracts\\WGCStaking.sol:24"
            },
            {
              "contract": "WGCStaking",
              "label": "sWgc",
              "type": "t_contract(ISToken)14505",
              "src": "contracts\\WGCStaking.sol:25"
            },
            {
              "contract": "WGCStaking",
              "label": "treasury",
              "type": "t_contract(ITreasury)14509",
              "src": "contracts\\WGCStaking.sol:26"
            },
            {
              "contract": "WGCStaking",
              "label": "minimumLimitToStake",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:28"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardHistory",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\WGCStaking.sol:29"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardBlocks",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCStaking.sol:30"
            },
            {
              "contract": "WGCStaking",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:31"
            }
          ],
          "types": {
            "t_contract(ERC20Upgradeable)5064": {
              "label": "contract ERC20Upgradeable"
            },
            "t_contract(ISToken)14505": {
              "label": "contract ISToken"
            },
            "t_contract(ITreasury)14509": {
              "label": "contract ITreasury"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WGCTreasury": {
        "src": "contracts\\WGCTreasury.sol:12",
        "version": {
          "withMetadata": "382c072afbd638f00956d0b482d4cada701c86516bc9ae8ee81c4e6554d43458",
          "withoutMetadata": "100b6c94092cfbd3a55623889a3b7219b91fdffdec6b11a90eab9b2bc089ee41",
          "linkedWithoutMetadata": "100b6c94092cfbd3a55623889a3b7219b91fdffdec6b11a90eab9b2bc089ee41"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "depositReward(uint256)",
          "setTokenAddress(address)",
          "setExponentContractAddress(address)",
          "setStakingRewardPercent(uint256,uint256)",
          "distributeStakingReward()",
          "stakingRewardBlocksSetLength()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGCTreasury",
              "label": "exponentation",
              "type": "t_contract(Exponentation)10951",
              "src": "contracts\\WGCTreasury.sol:18"
            },
            {
              "contract": "WGCTreasury",
              "label": "wgc",
              "type": "t_contract(IERC20Upgradeable)5142",
              "src": "contracts\\WGCTreasury.sol:19"
            },
            {
              "contract": "WGCTreasury",
              "label": "rewardHistory",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\WGCTreasury.sol:21"
            },
            {
              "contract": "WGCTreasury",
              "label": "rewardBlocks",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCTreasury.sol:22"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardLastBlock",
              "type": "t_uint256",
              "src": "contracts\\WGCTreasury.sol:24"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardAmountDistributed",
              "type": "t_uint256",
              "src": "contracts\\WGCTreasury.sol:25"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardPercentPerBlock",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\WGCTreasury.sol:26"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardBlocksSet",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCTreasury.sol:27"
            }
          ],
          "types": {
            "t_contract(Exponentation)10951": {
              "label": "contract Exponentation"
            },
            "t_contract(IERC20Upgradeable)5142": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "sWGC": {
        "src": "contracts\\sWGC.sol:10",
        "version": {
          "withMetadata": "203f3973c257dd19971b841c5f07f6cd0f0d92d93eb894ba57981aaea25a4c7a",
          "withoutMetadata": "0d675a206df2148ee4462921f4a1bf92f4d745aa27672c60e9c0a0a39da2d571",
          "linkedWithoutMetadata": "0d675a206df2148ee4462921f4a1bf92f4d745aa27672c60e9c0a0a39da2d571"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IERC20Upgradeable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(string,string,address,uint256,uint8)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "isExcludedFromReward(address)",
          "totalRewards()",
          "tokenFromReflection(uint256)",
          "excludeFromReward(address)",
          "includeInReward(address)",
          "setStakingAddress(address)",
          "transferForeignToken(address,address)",
          "distributeRewards(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "sWGC",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:18"
            },
            {
              "contract": "sWGC",
              "label": "_tOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:19"
            },
            {
              "contract": "sWGC",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\sWGC.sol:20"
            },
            {
              "contract": "sWGC",
              "label": "_isExcluded",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\sWGC.sol:22"
            },
            {
              "contract": "sWGC",
              "label": "_excluded",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\sWGC.sol:23"
            },
            {
              "contract": "sWGC",
              "label": "stakingContract",
              "type": "t_address",
              "src": "contracts\\sWGC.sol:24"
            },
            {
              "contract": "sWGC",
              "label": "_tTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:27"
            },
            {
              "contract": "sWGC",
              "label": "_rTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:28"
            },
            {
              "contract": "sWGC",
              "label": "_tRewardTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:29"
            },
            {
              "contract": "sWGC",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:30"
            },
            {
              "contract": "sWGC",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:31"
            },
            {
              "contract": "sWGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\sWGC.sol:32"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:27",
        "inherit": [
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "TimersUpgradeable",
          "AddressUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "()",
          "supportsInterface(bytes4)",
          "name()",
          "version()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalThreshold()",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "relay(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorUpgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:40"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "_proposals",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)446_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:42"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:397"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)446_storage)": {
              "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalCore)446_storage": {
              "label": "struct GovernorUpgradeable.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6604_storage"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6604_storage"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                }
              ]
            },
            "t_struct(BlockNumber)6604_storage": {
              "label": "struct TimersUpgradeable.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:14",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:230"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TimelockControllerUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:24",
        "version": {
          "withMetadata": "ac6c311e5e517f453b6f6e3c8041346f5e01e867dc335db08c1eac6fa3081227",
          "withoutMetadata": "f38eb9986b2fa0756366d0bf0fed715e0c79ae798e3dbd60c91607a0dce716df",
          "linkedWithoutMetadata": "f38eb9986b2fa0756366d0bf0fed715e0c79ae798e3dbd60c91607a0dce716df"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:30"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:31"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:368"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:23",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "TimersUpgradeable",
          "SafeCastUpgradeable"
        ],
        "methods": [
          "COUNTING_MODE()",
          "propose(address[],uint256[],bytes[],string)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "proposals(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "quorumVotes()",
          "hasVoted(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "_proposalDetails",
              "type": "t_mapping(t_uint256,t_struct(ProposalDetails)2413_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:51"
            },
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:300"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ProposalDetails)2413_storage)": {
              "label": "mapping(uint256 => struct GovernorCompatibilityBravoUpgradeable.ProposalDetails)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalDetails)2413_storage": {
              "label": "struct GovernorCompatibilityBravoUpgradeable.ProposalDetails",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)3211_storage)"
                },
                {
                  "label": "descriptionHash",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_address,t_struct(Receipt)3211_storage)": {
              "label": "mapping(address => struct IGovernorCompatibilityBravoUpgradeable.Receipt)"
            },
            "t_struct(Receipt)3211_storage": {
              "label": "struct IGovernorCompatibilityBravoUpgradeable.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint96"
                }
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint96": {
              "label": "uint96"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumVotes()",
          "proposals(uint256)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:126"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorSettingsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:14",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "votingDelay()",
          "votingPeriod()",
          "proposalThreshold()",
          "setVotingDelay(uint256)",
          "setVotingPeriod(uint256)",
          "setProposalThreshold(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:15"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingPeriod",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:16"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_proposalThreshold",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:17"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:129"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorTimelockControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:27",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "state(uint256)",
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "updateTimelock(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelock",
              "type": "t_contract(TimelockControllerUpgradeable)2344",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:28"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelockIds",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:29"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:174"
            }
          ],
          "types": {
            "t_contract(TimelockControllerUpgradeable)2344": {
              "label": "contract TimelockControllerUpgradeable"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesQuorumFractionUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:15",
        "inherit": [
          "GovernorVotesUpgradeable",
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumNumerator()",
          "quorumDenominator()",
          "quorum(uint256)",
          "updateQuorumNumerator(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "_quorumNumerator",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:15",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "getVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "token",
              "type": "t_contract(IVotesUpgradeable)4253",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_contract(IVotesUpgradeable)4253": {
              "label": "contract IVotesUpgradeable"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorTimelockUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorTimelockUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\utils\\IVotesUpgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "4063b268132ad211102c0befeefb4ea8a33fbf6ccbc177dc4bf5d67a51b479c5",
          "withoutMetadata": "0cc77445e3e3f24a28573bb0c8bd2255736f9b5bed7e96bb3682a7ec99147cf5",
          "linkedWithoutMetadata": "0cc77445e3e3f24a28573bb0c8bd2255736f9b5bed7e96bb3682a7ec99147cf5"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:28",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "IVotesUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)5050_storage)dyn_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:43"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)5050_storage)dyn_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:44"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:261"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)5050_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)5050_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)5050_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)6222_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:99"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)6222_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)6222_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "670122db565abb621fd3003a869314f015a5405dbcbccc8cc118b6577185ab79",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "29f92062a8b6fafa7221077f8cb427df736ef4a5048d43ec31386252ad7b7796",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "4ebe5212f39ac3edd911a272dd6158fbb8f03a3871807c897d4fdcc581b09ac2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\TimersUpgradeable.sol:9",
        "version": {
          "withMetadata": "c59efe873baa56f75b264ae6b0d7305dd49dfc0926c49d9886104ebcd5b4f7a7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "14c7d3e755cd05c8feebe7535f798cdc2ff1773910a773783b20a19fa65bfbb3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:118"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "4c8f9c4e3e66d2c0c03575e51032d422357ed3200399b738102fdd6f77ef71a4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "bec269be4927d676bcbb806156a0a177b5ea632c0616a7e4a2ea4682688a5412",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governor": {
        "src": "contracts\\Governor.sol:13",
        "version": {
          "withMetadata": "768ebd6e2045fd02002cf14f379c8390da3f722c8dff7b4c9869fe6db4c0c1e7",
          "withoutMetadata": "91dc2d92ec31937ca62f64b70fa81298de9d9789ebdc0f781bb3777d5f011bc2",
          "linkedWithoutMetadata": "91dc2d92ec31937ca62f64b70fa81298de9d9789ebdc0f781bb3777d5f011bc2"
        },
        "inherit": [
          "GovernorTimelockControlUpgradeable",
          "GovernorVotesQuorumFractionUpgradeable",
          "GovernorVotesUpgradeable",
          "GovernorCompatibilityBravoUpgradeable",
          "GovernorSettingsUpgradeable",
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,address,address,uint256,uint256,uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "state(uint256)",
          "propose(address[],uint256[],bytes[],string)",
          "proposalThreshold()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "670122db565abb621fd3003a869314f015a5405dbcbccc8cc118b6577185ab79",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "4ebe5212f39ac3edd911a272dd6158fbb8f03a3871807c897d4fdcc581b09ac2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockController": {
        "src": "contracts\\TimelockController.sol:23",
        "version": {
          "withMetadata": "0fb3cd0ceabd32c74ab2369b7d94eb3d08ff09399b17ec578b298961911266dc",
          "withoutMetadata": "027d1fb80ec12882f6f096c59cb2d940cf1fc905b4903de81cecfd33319008d4",
          "linkedWithoutMetadata": "027d1fb80ec12882f6f096c59cb2d940cf1fc905b4903de81cecfd33319008d4"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address[],address[])",
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockController",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "contracts\\TimelockController.sol:30"
            },
            {
              "contract": "TimelockController",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "contracts\\TimelockController.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "4063b268132ad211102c0befeefb4ea8a33fbf6ccbc177dc4bf5d67a51b479c5",
          "withoutMetadata": "0cc77445e3e3f24a28573bb0c8bd2255736f9b5bed7e96bb3682a7ec99147cf5",
          "linkedWithoutMetadata": "0cc77445e3e3f24a28573bb0c8bd2255736f9b5bed7e96bb3682a7ec99147cf5"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\utils\\SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "6e9546b1a4f84bcb85ce5e0d78713de7d2e0416526d54b860a49c23147c7c13d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "670122db565abb621fd3003a869314f015a5405dbcbccc8cc118b6577185ab79",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "4ebe5212f39ac3edd911a272dd6158fbb8f03a3871807c897d4fdcc581b09ac2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "0203054938213da8bb127ebdc44f82299584e0c65cea2483af808fd8dd187f90",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Exponentation": {
        "src": "contracts\\Exponentation.sol:3",
        "version": {
          "withMetadata": "40abda0769c86ff411bf5a0079896075f91a4efcbac4222a1ec588b56f8c671d",
          "withoutMetadata": "f774c4872253bd71ba0c5b9f82857fce13a4cb523c33f0782d3a5cb1b2b20df6",
          "linkedWithoutMetadata": "f774c4872253bd71ba0c5b9f82857fce13a4cb523c33f0782d3a5cb1b2b20df6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "BancorFormula()",
          "power(uint256,uint256,uint256,uint32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Exponentation",
              "label": "maxExpArray",
              "type": "t_array(t_uint256)128_storage",
              "src": "contracts\\Exponentation.sol:20"
            }
          ],
          "types": {
            "t_array(t_uint256)128_storage": {
              "label": "uint256[128]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WGCTreasury": {
        "src": "contracts\\WGCTreasury.sol:12",
        "version": {
          "withMetadata": "382c072afbd638f00956d0b482d4cada701c86516bc9ae8ee81c4e6554d43458",
          "withoutMetadata": "100b6c94092cfbd3a55623889a3b7219b91fdffdec6b11a90eab9b2bc089ee41",
          "linkedWithoutMetadata": "100b6c94092cfbd3a55623889a3b7219b91fdffdec6b11a90eab9b2bc089ee41"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "depositReward(uint256)",
          "setTokenAddress(address)",
          "setExponentContractAddress(address)",
          "setStakingRewardPercent(uint256,uint256)",
          "distributeStakingReward()",
          "stakingRewardBlocksSetLength()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGCTreasury",
              "label": "exponentation",
              "type": "t_contract(Exponentation)4433",
              "src": "contracts\\WGCTreasury.sol:18"
            },
            {
              "contract": "WGCTreasury",
              "label": "wgc",
              "type": "t_contract(IERC20Upgradeable)1166",
              "src": "contracts\\WGCTreasury.sol:19"
            },
            {
              "contract": "WGCTreasury",
              "label": "rewardHistory",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\WGCTreasury.sol:21"
            },
            {
              "contract": "WGCTreasury",
              "label": "rewardBlocks",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCTreasury.sol:22"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardLastBlock",
              "type": "t_uint256",
              "src": "contracts\\WGCTreasury.sol:24"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardAmountDistributed",
              "type": "t_uint256",
              "src": "contracts\\WGCTreasury.sol:25"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardPercentPerBlock",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\WGCTreasury.sol:26"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardBlocksSet",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCTreasury.sol:27"
            }
          ],
          "types": {
            "t_contract(Exponentation)4433": {
              "label": "contract Exponentation"
            },
            "t_contract(IERC20Upgradeable)1166": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:27",
        "inherit": [
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "TimersUpgradeable",
          "AddressUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "()",
          "supportsInterface(bytes4)",
          "name()",
          "version()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalThreshold()",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "relay(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorUpgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:40"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "_proposals",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:42"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:397"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)": {
              "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalCore)570_storage": {
              "label": "struct GovernorUpgradeable.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6952_storage"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6952_storage"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                }
              ]
            },
            "t_struct(BlockNumber)6952_storage": {
              "label": "struct TimersUpgradeable.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:14",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:230"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TimelockControllerUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:24",
        "version": {
          "withMetadata": "ac6c311e5e517f453b6f6e3c8041346f5e01e867dc335db08c1eac6fa3081227",
          "withoutMetadata": "f38eb9986b2fa0756366d0bf0fed715e0c79ae798e3dbd60c91607a0dce716df",
          "linkedWithoutMetadata": "f38eb9986b2fa0756366d0bf0fed715e0c79ae798e3dbd60c91607a0dce716df"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:30"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:31"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:368"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:23",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "TimersUpgradeable",
          "SafeCastUpgradeable"
        ],
        "methods": [
          "COUNTING_MODE()",
          "propose(address[],uint256[],bytes[],string)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "proposals(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "quorumVotes()",
          "hasVoted(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "_proposalDetails",
              "type": "t_mapping(t_uint256,t_struct(ProposalDetails)2537_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:51"
            },
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:300"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ProposalDetails)2537_storage)": {
              "label": "mapping(uint256 => struct GovernorCompatibilityBravoUpgradeable.ProposalDetails)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalDetails)2537_storage": {
              "label": "struct GovernorCompatibilityBravoUpgradeable.ProposalDetails",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)3335_storage)"
                },
                {
                  "label": "descriptionHash",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_address,t_struct(Receipt)3335_storage)": {
              "label": "mapping(address => struct IGovernorCompatibilityBravoUpgradeable.Receipt)"
            },
            "t_struct(Receipt)3335_storage": {
              "label": "struct IGovernorCompatibilityBravoUpgradeable.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint96"
                }
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint96": {
              "label": "uint96"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumVotes()",
          "proposals(uint256)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:126"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorSettingsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:14",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "votingDelay()",
          "votingPeriod()",
          "proposalThreshold()",
          "setVotingDelay(uint256)",
          "setVotingPeriod(uint256)",
          "setProposalThreshold(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:15"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingPeriod",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:16"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_proposalThreshold",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:17"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:129"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorTimelockControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:27",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "state(uint256)",
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "updateTimelock(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelock",
              "type": "t_contract(TimelockControllerUpgradeable)2468",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:28"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelockIds",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:29"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:174"
            }
          ],
          "types": {
            "t_contract(TimelockControllerUpgradeable)2468": {
              "label": "contract TimelockControllerUpgradeable"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesQuorumFractionUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:15",
        "inherit": [
          "GovernorVotesUpgradeable",
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumNumerator()",
          "quorumDenominator()",
          "quorum(uint256)",
          "updateQuorumNumerator(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "_quorumNumerator",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:15",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "getVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "token",
              "type": "t_contract(IVotesUpgradeable)4377",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_contract(IVotesUpgradeable)4377": {
              "label": "contract IVotesUpgradeable"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorTimelockUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorTimelockUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\utils\\IVotesUpgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "4063b268132ad211102c0befeefb4ea8a33fbf6ccbc177dc4bf5d67a51b479c5",
          "withoutMetadata": "0cc77445e3e3f24a28573bb0c8bd2255736f9b5bed7e96bb3682a7ec99147cf5",
          "linkedWithoutMetadata": "0cc77445e3e3f24a28573bb0c8bd2255736f9b5bed7e96bb3682a7ec99147cf5"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:28",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "IVotesUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)5174_storage)dyn_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:43"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)5174_storage)dyn_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:44"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:261"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)5174_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)5174_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)5174_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)6570_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:99"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)6570_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)6570_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\utils\\SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "6e9546b1a4f84bcb85ce5e0d78713de7d2e0416526d54b860a49c23147c7c13d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "670122db565abb621fd3003a869314f015a5405dbcbccc8cc118b6577185ab79",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "29f92062a8b6fafa7221077f8cb427df736ef4a5048d43ec31386252ad7b7796",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "4ebe5212f39ac3edd911a272dd6158fbb8f03a3871807c897d4fdcc581b09ac2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\TimersUpgradeable.sol:9",
        "version": {
          "withMetadata": "c59efe873baa56f75b264ae6b0d7305dd49dfc0926c49d9886104ebcd5b4f7a7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "14c7d3e755cd05c8feebe7535f798cdc2ff1773910a773783b20a19fa65bfbb3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:118"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "4c8f9c4e3e66d2c0c03575e51032d422357ed3200399b738102fdd6f77ef71a4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "bec269be4927d676bcbb806156a0a177b5ea632c0616a7e4a2ea4682688a5412",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "0203054938213da8bb127ebdc44f82299584e0c65cea2483af808fd8dd187f90",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BridgeBase": {
        "src": "contracts\\BridgeBase.sol:8",
        "version": {
          "withMetadata": "2e006219fdb1d1e9dcaa1309d69fd4aad25da267465d9d436cbc0a398fb53f11",
          "withoutMetadata": "dd95e08a2c842b79b81b32812d87301b4cb346d37388baa214bf0ef241d1b3d0",
          "linkedWithoutMetadata": "dd95e08a2c842b79b81b32812d87301b4cb346d37388baa214bf0ef241d1b3d0"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "setFee(uint8,address)",
          "initialize(address,address)",
          "deposit(uint8,address,uint256)",
          "withdraw(address,uint256,uint256)",
          "getBalance(address)",
          "getServerBalance()",
          "updateToken(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BridgeBase",
              "label": "admin",
              "type": "t_address",
              "src": "contracts\\BridgeBase.sol:10"
            },
            {
              "contract": "BridgeBase",
              "label": "feeWallet",
              "type": "t_address",
              "src": "contracts\\BridgeBase.sol:11"
            },
            {
              "contract": "BridgeBase",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)5142",
              "src": "contracts\\BridgeBase.sol:12"
            },
            {
              "contract": "BridgeBase",
              "label": "nonce",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\BridgeBase.sol:13"
            },
            {
              "contract": "BridgeBase",
              "label": "processedNonces",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "src": "contracts\\BridgeBase.sol:14"
            },
            {
              "contract": "BridgeBase",
              "label": "fee",
              "type": "t_uint8",
              "src": "contracts\\BridgeBase.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20Upgradeable)5142": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Exponentation": {
        "src": "contracts\\Exponentation.sol:3",
        "version": {
          "withMetadata": "40abda0769c86ff411bf5a0079896075f91a4efcbac4222a1ec588b56f8c671d",
          "withoutMetadata": "f774c4872253bd71ba0c5b9f82857fce13a4cb523c33f0782d3a5cb1b2b20df6",
          "linkedWithoutMetadata": "f774c4872253bd71ba0c5b9f82857fce13a4cb523c33f0782d3a5cb1b2b20df6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "BancorFormula()",
          "power(uint256,uint256,uint256,uint32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Exponentation",
              "label": "maxExpArray",
              "type": "t_array(t_uint256)128_storage",
              "src": "contracts\\Exponentation.sol:20"
            }
          ],
          "types": {
            "t_array(t_uint256)128_storage": {
              "label": "uint256[128]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governor": {
        "src": "contracts\\Governor.sol:13",
        "version": {
          "withMetadata": "768ebd6e2045fd02002cf14f379c8390da3f722c8dff7b4c9869fe6db4c0c1e7",
          "withoutMetadata": "91dc2d92ec31937ca62f64b70fa81298de9d9789ebdc0f781bb3777d5f011bc2",
          "linkedWithoutMetadata": "91dc2d92ec31937ca62f64b70fa81298de9d9789ebdc0f781bb3777d5f011bc2"
        },
        "inherit": [
          "GovernorTimelockControlUpgradeable",
          "GovernorVotesQuorumFractionUpgradeable",
          "GovernorVotesUpgradeable",
          "GovernorCompatibilityBravoUpgradeable",
          "GovernorSettingsUpgradeable",
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,address,address,uint256,uint256,uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "state(uint256)",
          "propose(address[],uint256[],bytes[],string)",
          "proposalThreshold()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockController": {
        "src": "contracts\\TimelockController.sol:23",
        "version": {
          "withMetadata": "0fb3cd0ceabd32c74ab2369b7d94eb3d08ff09399b17ec578b298961911266dc",
          "withoutMetadata": "027d1fb80ec12882f6f096c59cb2d940cf1fc905b4903de81cecfd33319008d4",
          "linkedWithoutMetadata": "027d1fb80ec12882f6f096c59cb2d940cf1fc905b4903de81cecfd33319008d4"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address[],address[])",
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockController",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "contracts\\TimelockController.sol:30"
            },
            {
              "contract": "TimelockController",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "contracts\\TimelockController.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts\\WGC.sol:327",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "INIT_CODE_PAIR_HASH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts\\WGC.sol:218",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts\\WGC.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts\\WGC.sol:171",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITreasury": {
        "src": "contracts\\WGCStaking.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "distributeStakingReward()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGC": {
        "src": "contracts\\WGC.sol:359",
        "version": {
          "withMetadata": "aa683601b1429fe1d14ba101c0dcd9f9d1a453b13a8db10efd387f8cb2ae846e",
          "withoutMetadata": "2f21fa3daa823aa520b7bbe2dc414ca8a7a41b113bfc0e68406e801b72c79000",
          "linkedWithoutMetadata": "2f21fa3daa823aa520b7bbe2dc414ca8a7a41b113bfc0e68406e801b72c79000"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256[18],string,string,uint8)",
          "decimals()",
          "enableTrading()",
          "updateMaxTransactionAmount(uint256)",
          "updateMaxWallet(uint256)",
          "updateMinimumTokensBeforeFeeTaken(uint256)",
          "updateProtectBlockCount(uint256)",
          "setAutomatedMarketMakerPair(address,bool)",
          "updateGasPriceLimit(uint256)",
          "disableTransferDelay()",
          "excludeFromMaxTransaction(address,bool)",
          "excludeFromFee(address)",
          "includeInFee(address)",
          "updateBuyFee(uint256,uint256,uint256)",
          "updateSellFee(uint256,uint256,uint256)",
          "updateTransferFee(uint256,uint256,uint256)",
          "setProtectBlockFee(uint256,uint256,uint256)",
          "updateTreasuryAddress(address)",
          "updatePlantingFundFeeAddress(address)",
          "updateLiquidityAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGC",
              "label": "treasuryContract",
              "type": "t_contract(ITreasury)12086",
              "src": "contracts\\WGC.sol:361"
            },
            {
              "contract": "WGC",
              "label": "plantingFundFeeAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:362"
            },
            {
              "contract": "WGC",
              "label": "liquidityAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:363"
            },
            {
              "contract": "WGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\WGC.sol:365"
            },
            {
              "contract": "WGC",
              "label": "_tradingActiveBlock",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:367"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockCount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:368"
            },
            {
              "contract": "WGC",
              "label": "_gasPriceLimit",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:369"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:370"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:371"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:372"
            },
            {
              "contract": "WGC",
              "label": "tradingActive",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:373"
            },
            {
              "contract": "WGC",
              "label": "isExcludedFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:375"
            },
            {
              "contract": "WGC",
              "label": "buyOrSellSwitch",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:381"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:384"
            },
            {
              "contract": "WGC",
              "label": "_previousStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:385"
            },
            {
              "contract": "WGC",
              "label": "_liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:387"
            },
            {
              "contract": "WGC",
              "label": "_previousLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:388"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:390"
            },
            {
              "contract": "WGC",
              "label": "_previousPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:391"
            },
            {
              "contract": "WGC",
              "label": "buyStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:393"
            },
            {
              "contract": "WGC",
              "label": "buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:394"
            },
            {
              "contract": "WGC",
              "label": "buyPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:395"
            },
            {
              "contract": "WGC",
              "label": "sellStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:397"
            },
            {
              "contract": "WGC",
              "label": "sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:398"
            },
            {
              "contract": "WGC",
              "label": "sellPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:399"
            },
            {
              "contract": "WGC",
              "label": "transferStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:401"
            },
            {
              "contract": "WGC",
              "label": "transferLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:402"
            },
            {
              "contract": "WGC",
              "label": "transferPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:403"
            },
            {
              "contract": "WGC",
              "label": "isExcludedMaxTransactionAmount",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:405"
            },
            {
              "contract": "WGC",
              "label": "_holderLastTransferTimestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\WGC.sol:408"
            },
            {
              "contract": "WGC",
              "label": "_transferDelayEnabled",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:409"
            },
            {
              "contract": "WGC",
              "label": "_liquidityTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:411"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFeeTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:412"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFeeTokens",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:413"
            },
            {
              "contract": "WGC",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:417"
            },
            {
              "contract": "WGC",
              "label": "minimumFeeTokensToTake",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:419"
            },
            {
              "contract": "WGC",
              "label": "maxTransactionAmount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:420"
            },
            {
              "contract": "WGC",
              "label": "maxWallet",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:421"
            },
            {
              "contract": "WGC",
              "label": "pancakeRouter",
              "type": "t_contract(IPancakeRouter02)12477",
              "src": "contracts\\WGC.sol:423"
            },
            {
              "contract": "WGC",
              "label": "pancakePair",
              "type": "t_address",
              "src": "contracts\\WGC.sol:424"
            },
            {
              "contract": "WGC",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:426"
            }
          ],
          "types": {
            "t_contract(ITreasury)12086": {
              "label": "contract ITreasury"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_contract(IPancakeRouter02)12477": {
              "label": "contract IPancakeRouter02"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ISToken": {
        "src": "contracts\\WGCStaking.sol:11",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "distributeRewards(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGCStaking": {
        "src": "contracts\\WGCStaking.sol:19",
        "version": {
          "withMetadata": "c920af2e51541c1306a9df5cc7ee889045e2532eda1fb104a5e57f9e7f91ac40",
          "withoutMetadata": "261205360450c77b10d0b6a16dd569ba5604986c206b6acff2a668983497d930",
          "linkedWithoutMetadata": "261205360450c77b10d0b6a16dd569ba5604986c206b6acff2a668983497d930"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "updateConfiguration(address,address,address,uint256)",
          "initialize()",
          "stake(uint256)",
          "unstake(uint256)",
          "rebase()",
          "rewardBlocksLength()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGCStaking",
              "label": "gems",
              "type": "t_contract(ERC20Upgradeable)5064",
              "src": "contracts\\WGCStaking.sol:24"
            },
            {
              "contract": "WGCStaking",
              "label": "sGEMS",
              "type": "t_contract(ISToken)14505",
              "src": "contracts\\WGCStaking.sol:25"
            },
            {
              "contract": "WGCStaking",
              "label": "treasury",
              "type": "t_contract(ITreasury)14509",
              "src": "contracts\\WGCStaking.sol:26"
            },
            {
              "contract": "WGCStaking",
              "label": "minimumLimitToStake",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:28"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardHistory",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\WGCStaking.sol:29"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardBlocks",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCStaking.sol:30"
            },
            {
              "contract": "WGCStaking",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:31"
            }
          ],
          "types": {
            "t_contract(ERC20Upgradeable)5064": {
              "label": "contract ERC20Upgradeable"
            },
            "t_contract(ISToken)14505": {
              "label": "contract ISToken"
            },
            "t_contract(ITreasury)14509": {
              "label": "contract ITreasury"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WGCTreasury": {
        "src": "contracts\\WGCTreasury.sol:12",
        "version": {
          "withMetadata": "382c072afbd638f00956d0b482d4cada701c86516bc9ae8ee81c4e6554d43458",
          "withoutMetadata": "100b6c94092cfbd3a55623889a3b7219b91fdffdec6b11a90eab9b2bc089ee41",
          "linkedWithoutMetadata": "100b6c94092cfbd3a55623889a3b7219b91fdffdec6b11a90eab9b2bc089ee41"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "depositReward(uint256)",
          "setTokenAddress(address)",
          "setExponentContractAddress(address)",
          "setStakingRewardPercent(uint256,uint256)",
          "distributeStakingReward()",
          "stakingRewardBlocksSetLength()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGCTreasury",
              "label": "exponentation",
              "type": "t_contract(Exponentation)10951",
              "src": "contracts\\WGCTreasury.sol:18"
            },
            {
              "contract": "WGCTreasury",
              "label": "wgc",
              "type": "t_contract(IERC20Upgradeable)5142",
              "src": "contracts\\WGCTreasury.sol:19"
            },
            {
              "contract": "WGCTreasury",
              "label": "rewardHistory",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\WGCTreasury.sol:21"
            },
            {
              "contract": "WGCTreasury",
              "label": "rewardBlocks",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCTreasury.sol:22"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardLastBlock",
              "type": "t_uint256",
              "src": "contracts\\WGCTreasury.sol:24"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardAmountDistributed",
              "type": "t_uint256",
              "src": "contracts\\WGCTreasury.sol:25"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardPercentPerBlock",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\WGCTreasury.sol:26"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardBlocksSet",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCTreasury.sol:27"
            }
          ],
          "types": {
            "t_contract(Exponentation)10951": {
              "label": "contract Exponentation"
            },
            "t_contract(IERC20Upgradeable)5142": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "sWGC": {
        "src": "contracts\\sWGC.sol:10",
        "version": {
          "withMetadata": "203f3973c257dd19971b841c5f07f6cd0f0d92d93eb894ba57981aaea25a4c7a",
          "withoutMetadata": "0d675a206df2148ee4462921f4a1bf92f4d745aa27672c60e9c0a0a39da2d571",
          "linkedWithoutMetadata": "0d675a206df2148ee4462921f4a1bf92f4d745aa27672c60e9c0a0a39da2d571"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IERC20Upgradeable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(string,string,address,uint256,uint8)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "isExcludedFromReward(address)",
          "totalRewards()",
          "tokenFromReflection(uint256)",
          "excludeFromReward(address)",
          "includeInReward(address)",
          "setStakingAddress(address)",
          "transferForeignToken(address,address)",
          "distributeRewards(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "sWGC",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:18"
            },
            {
              "contract": "sWGC",
              "label": "_tOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:19"
            },
            {
              "contract": "sWGC",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\sWGC.sol:20"
            },
            {
              "contract": "sWGC",
              "label": "_isExcluded",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\sWGC.sol:22"
            },
            {
              "contract": "sWGC",
              "label": "_excluded",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\sWGC.sol:23"
            },
            {
              "contract": "sWGC",
              "label": "stakingContract",
              "type": "t_address",
              "src": "contracts\\sWGC.sol:24"
            },
            {
              "contract": "sWGC",
              "label": "_tTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:27"
            },
            {
              "contract": "sWGC",
              "label": "_rTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:28"
            },
            {
              "contract": "sWGC",
              "label": "_tRewardTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:29"
            },
            {
              "contract": "sWGC",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:30"
            },
            {
              "contract": "sWGC",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:31"
            },
            {
              "contract": "sWGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\sWGC.sol:32"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:27",
        "inherit": [
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "TimersUpgradeable",
          "AddressUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "()",
          "supportsInterface(bytes4)",
          "name()",
          "version()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalThreshold()",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "relay(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorUpgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:40"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "_proposals",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:42"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:397"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)": {
              "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalCore)570_storage": {
              "label": "struct GovernorUpgradeable.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6952_storage"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6952_storage"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                }
              ]
            },
            "t_struct(BlockNumber)6952_storage": {
              "label": "struct TimersUpgradeable.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:14",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:230"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TimelockControllerUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:24",
        "version": {
          "withMetadata": "ac6c311e5e517f453b6f6e3c8041346f5e01e867dc335db08c1eac6fa3081227",
          "withoutMetadata": "f38eb9986b2fa0756366d0bf0fed715e0c79ae798e3dbd60c91607a0dce716df",
          "linkedWithoutMetadata": "f38eb9986b2fa0756366d0bf0fed715e0c79ae798e3dbd60c91607a0dce716df"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:30"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:31"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:368"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:23",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "TimersUpgradeable",
          "SafeCastUpgradeable"
        ],
        "methods": [
          "COUNTING_MODE()",
          "propose(address[],uint256[],bytes[],string)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "proposals(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "quorumVotes()",
          "hasVoted(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "_proposalDetails",
              "type": "t_mapping(t_uint256,t_struct(ProposalDetails)2537_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:51"
            },
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:300"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ProposalDetails)2537_storage)": {
              "label": "mapping(uint256 => struct GovernorCompatibilityBravoUpgradeable.ProposalDetails)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalDetails)2537_storage": {
              "label": "struct GovernorCompatibilityBravoUpgradeable.ProposalDetails",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)3335_storage)"
                },
                {
                  "label": "descriptionHash",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_address,t_struct(Receipt)3335_storage)": {
              "label": "mapping(address => struct IGovernorCompatibilityBravoUpgradeable.Receipt)"
            },
            "t_struct(Receipt)3335_storage": {
              "label": "struct IGovernorCompatibilityBravoUpgradeable.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint96"
                }
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint96": {
              "label": "uint96"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumVotes()",
          "proposals(uint256)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:126"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorSettingsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:14",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "votingDelay()",
          "votingPeriod()",
          "proposalThreshold()",
          "setVotingDelay(uint256)",
          "setVotingPeriod(uint256)",
          "setProposalThreshold(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:15"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingPeriod",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:16"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_proposalThreshold",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:17"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:129"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorTimelockControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:27",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "state(uint256)",
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "updateTimelock(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelock",
              "type": "t_contract(TimelockControllerUpgradeable)2468",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:28"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelockIds",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:29"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:174"
            }
          ],
          "types": {
            "t_contract(TimelockControllerUpgradeable)2468": {
              "label": "contract TimelockControllerUpgradeable"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesQuorumFractionUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:15",
        "inherit": [
          "GovernorVotesUpgradeable",
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumNumerator()",
          "quorumDenominator()",
          "quorum(uint256)",
          "updateQuorumNumerator(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "_quorumNumerator",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:15",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "getVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "token",
              "type": "t_contract(IVotesUpgradeable)4377",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_contract(IVotesUpgradeable)4377": {
              "label": "contract IVotesUpgradeable"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorTimelockUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorTimelockUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\utils\\IVotesUpgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "4063b268132ad211102c0befeefb4ea8a33fbf6ccbc177dc4bf5d67a51b479c5",
          "withoutMetadata": "0cc77445e3e3f24a28573bb0c8bd2255736f9b5bed7e96bb3682a7ec99147cf5",
          "linkedWithoutMetadata": "0cc77445e3e3f24a28573bb0c8bd2255736f9b5bed7e96bb3682a7ec99147cf5"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:28",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "IVotesUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)5174_storage)dyn_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:43"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)5174_storage)dyn_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:44"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:261"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)5174_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)5174_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)5174_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)6570_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:99"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)6570_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)6570_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\utils\\SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "6e9546b1a4f84bcb85ce5e0d78713de7d2e0416526d54b860a49c23147c7c13d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "670122db565abb621fd3003a869314f015a5405dbcbccc8cc118b6577185ab79",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "29f92062a8b6fafa7221077f8cb427df736ef4a5048d43ec31386252ad7b7796",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "4ebe5212f39ac3edd911a272dd6158fbb8f03a3871807c897d4fdcc581b09ac2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\TimersUpgradeable.sol:9",
        "version": {
          "withMetadata": "c59efe873baa56f75b264ae6b0d7305dd49dfc0926c49d9886104ebcd5b4f7a7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "14c7d3e755cd05c8feebe7535f798cdc2ff1773910a773783b20a19fa65bfbb3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:118"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "4c8f9c4e3e66d2c0c03575e51032d422357ed3200399b738102fdd6f77ef71a4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "bec269be4927d676bcbb806156a0a177b5ea632c0616a7e4a2ea4682688a5412",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "0203054938213da8bb127ebdc44f82299584e0c65cea2483af808fd8dd187f90",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BridgeBase": {
        "src": "contracts\\BridgeBase.sol:8",
        "version": {
          "withMetadata": "2e006219fdb1d1e9dcaa1309d69fd4aad25da267465d9d436cbc0a398fb53f11",
          "withoutMetadata": "dd95e08a2c842b79b81b32812d87301b4cb346d37388baa214bf0ef241d1b3d0",
          "linkedWithoutMetadata": "dd95e08a2c842b79b81b32812d87301b4cb346d37388baa214bf0ef241d1b3d0"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "setFee(uint8,address)",
          "initialize(address,address)",
          "deposit(uint8,address,uint256)",
          "withdraw(address,uint256,uint256)",
          "getBalance(address)",
          "getServerBalance()",
          "updateToken(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BridgeBase",
              "label": "admin",
              "type": "t_address",
              "src": "contracts\\BridgeBase.sol:10"
            },
            {
              "contract": "BridgeBase",
              "label": "feeWallet",
              "type": "t_address",
              "src": "contracts\\BridgeBase.sol:11"
            },
            {
              "contract": "BridgeBase",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)5142",
              "src": "contracts\\BridgeBase.sol:12"
            },
            {
              "contract": "BridgeBase",
              "label": "nonce",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\BridgeBase.sol:13"
            },
            {
              "contract": "BridgeBase",
              "label": "processedNonces",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "src": "contracts\\BridgeBase.sol:14"
            },
            {
              "contract": "BridgeBase",
              "label": "fee",
              "type": "t_uint8",
              "src": "contracts\\BridgeBase.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20Upgradeable)5142": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Exponentation": {
        "src": "contracts\\Exponentation.sol:3",
        "version": {
          "withMetadata": "40abda0769c86ff411bf5a0079896075f91a4efcbac4222a1ec588b56f8c671d",
          "withoutMetadata": "f774c4872253bd71ba0c5b9f82857fce13a4cb523c33f0782d3a5cb1b2b20df6",
          "linkedWithoutMetadata": "f774c4872253bd71ba0c5b9f82857fce13a4cb523c33f0782d3a5cb1b2b20df6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "BancorFormula()",
          "power(uint256,uint256,uint256,uint32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Exponentation",
              "label": "maxExpArray",
              "type": "t_array(t_uint256)128_storage",
              "src": "contracts\\Exponentation.sol:20"
            }
          ],
          "types": {
            "t_array(t_uint256)128_storage": {
              "label": "uint256[128]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governor": {
        "src": "contracts\\Governor.sol:13",
        "version": {
          "withMetadata": "768ebd6e2045fd02002cf14f379c8390da3f722c8dff7b4c9869fe6db4c0c1e7",
          "withoutMetadata": "91dc2d92ec31937ca62f64b70fa81298de9d9789ebdc0f781bb3777d5f011bc2",
          "linkedWithoutMetadata": "91dc2d92ec31937ca62f64b70fa81298de9d9789ebdc0f781bb3777d5f011bc2"
        },
        "inherit": [
          "GovernorTimelockControlUpgradeable",
          "GovernorVotesQuorumFractionUpgradeable",
          "GovernorVotesUpgradeable",
          "GovernorCompatibilityBravoUpgradeable",
          "GovernorSettingsUpgradeable",
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,address,address,uint256,uint256,uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "state(uint256)",
          "propose(address[],uint256[],bytes[],string)",
          "proposalThreshold()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockController": {
        "src": "contracts\\TimelockController.sol:23",
        "version": {
          "withMetadata": "0fb3cd0ceabd32c74ab2369b7d94eb3d08ff09399b17ec578b298961911266dc",
          "withoutMetadata": "027d1fb80ec12882f6f096c59cb2d940cf1fc905b4903de81cecfd33319008d4",
          "linkedWithoutMetadata": "027d1fb80ec12882f6f096c59cb2d940cf1fc905b4903de81cecfd33319008d4"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address[],address[])",
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockController",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "contracts\\TimelockController.sol:30"
            },
            {
              "contract": "TimelockController",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "contracts\\TimelockController.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts\\WGC.sol:327",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "INIT_CODE_PAIR_HASH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts\\WGC.sol:218",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts\\WGC.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts\\WGC.sol:171",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITreasury": {
        "src": "contracts\\WGCStaking.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "distributeStakingReward()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGC": {
        "src": "contracts\\WGC.sol:359",
        "version": {
          "withMetadata": "aa683601b1429fe1d14ba101c0dcd9f9d1a453b13a8db10efd387f8cb2ae846e",
          "withoutMetadata": "2f21fa3daa823aa520b7bbe2dc414ca8a7a41b113bfc0e68406e801b72c79000",
          "linkedWithoutMetadata": "2f21fa3daa823aa520b7bbe2dc414ca8a7a41b113bfc0e68406e801b72c79000"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256[18],string,string,uint8)",
          "decimals()",
          "enableTrading()",
          "updateMaxTransactionAmount(uint256)",
          "updateMaxWallet(uint256)",
          "updateMinimumTokensBeforeFeeTaken(uint256)",
          "updateProtectBlockCount(uint256)",
          "setAutomatedMarketMakerPair(address,bool)",
          "updateGasPriceLimit(uint256)",
          "disableTransferDelay()",
          "excludeFromMaxTransaction(address,bool)",
          "excludeFromFee(address)",
          "includeInFee(address)",
          "updateBuyFee(uint256,uint256,uint256)",
          "updateSellFee(uint256,uint256,uint256)",
          "updateTransferFee(uint256,uint256,uint256)",
          "setProtectBlockFee(uint256,uint256,uint256)",
          "updateTreasuryAddress(address)",
          "updatePlantingFundFeeAddress(address)",
          "updateLiquidityAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGC",
              "label": "treasuryContract",
              "type": "t_contract(ITreasury)12086",
              "src": "contracts\\WGC.sol:361"
            },
            {
              "contract": "WGC",
              "label": "plantingFundFeeAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:362"
            },
            {
              "contract": "WGC",
              "label": "liquidityAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:363"
            },
            {
              "contract": "WGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\WGC.sol:365"
            },
            {
              "contract": "WGC",
              "label": "_tradingActiveBlock",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:367"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockCount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:368"
            },
            {
              "contract": "WGC",
              "label": "_gasPriceLimit",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:369"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:370"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:371"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:372"
            },
            {
              "contract": "WGC",
              "label": "tradingActive",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:373"
            },
            {
              "contract": "WGC",
              "label": "isExcludedFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:375"
            },
            {
              "contract": "WGC",
              "label": "buyOrSellSwitch",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:381"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:384"
            },
            {
              "contract": "WGC",
              "label": "_previousStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:385"
            },
            {
              "contract": "WGC",
              "label": "_liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:387"
            },
            {
              "contract": "WGC",
              "label": "_previousLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:388"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:390"
            },
            {
              "contract": "WGC",
              "label": "_previousPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:391"
            },
            {
              "contract": "WGC",
              "label": "buyStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:393"
            },
            {
              "contract": "WGC",
              "label": "buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:394"
            },
            {
              "contract": "WGC",
              "label": "buyPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:395"
            },
            {
              "contract": "WGC",
              "label": "sellStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:397"
            },
            {
              "contract": "WGC",
              "label": "sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:398"
            },
            {
              "contract": "WGC",
              "label": "sellPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:399"
            },
            {
              "contract": "WGC",
              "label": "transferStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:401"
            },
            {
              "contract": "WGC",
              "label": "transferLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:402"
            },
            {
              "contract": "WGC",
              "label": "transferPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:403"
            },
            {
              "contract": "WGC",
              "label": "isExcludedMaxTransactionAmount",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:405"
            },
            {
              "contract": "WGC",
              "label": "_holderLastTransferTimestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\WGC.sol:408"
            },
            {
              "contract": "WGC",
              "label": "_transferDelayEnabled",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:409"
            },
            {
              "contract": "WGC",
              "label": "_liquidityTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:411"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFeeTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:412"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFeeTokens",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:413"
            },
            {
              "contract": "WGC",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:417"
            },
            {
              "contract": "WGC",
              "label": "minimumFeeTokensToTake",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:419"
            },
            {
              "contract": "WGC",
              "label": "maxTransactionAmount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:420"
            },
            {
              "contract": "WGC",
              "label": "maxWallet",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:421"
            },
            {
              "contract": "WGC",
              "label": "pancakeRouter",
              "type": "t_contract(IPancakeRouter02)12477",
              "src": "contracts\\WGC.sol:423"
            },
            {
              "contract": "WGC",
              "label": "pancakePair",
              "type": "t_address",
              "src": "contracts\\WGC.sol:424"
            },
            {
              "contract": "WGC",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:426"
            }
          ],
          "types": {
            "t_contract(ITreasury)12086": {
              "label": "contract ITreasury"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_contract(IPancakeRouter02)12477": {
              "label": "contract IPancakeRouter02"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ISToken": {
        "src": "contracts\\WGCStaking.sol:11",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "distributeRewards(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGCStaking": {
        "src": "contracts\\WGCStaking.sol:19",
        "version": {
          "withMetadata": "c920af2e51541c1306a9df5cc7ee889045e2532eda1fb104a5e57f9e7f91ac40",
          "withoutMetadata": "261205360450c77b10d0b6a16dd569ba5604986c206b6acff2a668983497d930",
          "linkedWithoutMetadata": "261205360450c77b10d0b6a16dd569ba5604986c206b6acff2a668983497d930"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "updateConfiguration(address,address,address,uint256)",
          "initialize()",
          "stake(uint256)",
          "unstake(uint256)",
          "rebase()",
          "rewardBlocksLength()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGCStaking",
              "label": "gems",
              "type": "t_contract(ERC20Upgradeable)5064",
              "src": "contracts\\WGCStaking.sol:24"
            },
            {
              "contract": "WGCStaking",
              "label": "sGEMS",
              "type": "t_contract(ISToken)14505",
              "src": "contracts\\WGCStaking.sol:25"
            },
            {
              "contract": "WGCStaking",
              "label": "treasury",
              "type": "t_contract(ITreasury)14509",
              "src": "contracts\\WGCStaking.sol:26"
            },
            {
              "contract": "WGCStaking",
              "label": "minimumLimitToStake",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:28"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardHistory",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\WGCStaking.sol:29"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardBlocks",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCStaking.sol:30"
            },
            {
              "contract": "WGCStaking",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:31"
            }
          ],
          "types": {
            "t_contract(ERC20Upgradeable)5064": {
              "label": "contract ERC20Upgradeable"
            },
            "t_contract(ISToken)14505": {
              "label": "contract ISToken"
            },
            "t_contract(ITreasury)14509": {
              "label": "contract ITreasury"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WGCTreasury": {
        "src": "contracts\\WGCTreasury.sol:12",
        "version": {
          "withMetadata": "d227390edbf5c0b80c79b3b46b70bb08408ef801564e5b5da6b19770bb78a482",
          "withoutMetadata": "100b6c94092cfbd3a55623889a3b7219b91fdffdec6b11a90eab9b2bc089ee41",
          "linkedWithoutMetadata": "100b6c94092cfbd3a55623889a3b7219b91fdffdec6b11a90eab9b2bc089ee41"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "depositReward(uint256)",
          "setTokenAddress(address)",
          "setExponentContractAddress(address)",
          "setStakingRewardPercent(uint256,uint256)",
          "distributeStakingReward()",
          "stakingRewardBlocksSetLength()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGCTreasury",
              "label": "exponentation",
              "type": "t_contract(Exponentation)10951",
              "src": "contracts\\WGCTreasury.sol:18"
            },
            {
              "contract": "WGCTreasury",
              "label": "wgc",
              "type": "t_contract(IERC20Upgradeable)5142",
              "src": "contracts\\WGCTreasury.sol:19"
            },
            {
              "contract": "WGCTreasury",
              "label": "rewardHistory",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\WGCTreasury.sol:21"
            },
            {
              "contract": "WGCTreasury",
              "label": "rewardBlocks",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCTreasury.sol:22"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardLastBlock",
              "type": "t_uint256",
              "src": "contracts\\WGCTreasury.sol:24"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardAmountDistributed",
              "type": "t_uint256",
              "src": "contracts\\WGCTreasury.sol:25"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardPercentPerBlock",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\WGCTreasury.sol:26"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardBlocksSet",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCTreasury.sol:27"
            }
          ],
          "types": {
            "t_contract(Exponentation)10951": {
              "label": "contract Exponentation"
            },
            "t_contract(IERC20Upgradeable)5142": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "sWGC": {
        "src": "contracts\\sWGC.sol:10",
        "version": {
          "withMetadata": "203f3973c257dd19971b841c5f07f6cd0f0d92d93eb894ba57981aaea25a4c7a",
          "withoutMetadata": "0d675a206df2148ee4462921f4a1bf92f4d745aa27672c60e9c0a0a39da2d571",
          "linkedWithoutMetadata": "0d675a206df2148ee4462921f4a1bf92f4d745aa27672c60e9c0a0a39da2d571"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IERC20Upgradeable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(string,string,address,uint256,uint8)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "isExcludedFromReward(address)",
          "totalRewards()",
          "tokenFromReflection(uint256)",
          "excludeFromReward(address)",
          "includeInReward(address)",
          "setStakingAddress(address)",
          "transferForeignToken(address,address)",
          "distributeRewards(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "sWGC",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:18"
            },
            {
              "contract": "sWGC",
              "label": "_tOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:19"
            },
            {
              "contract": "sWGC",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\sWGC.sol:20"
            },
            {
              "contract": "sWGC",
              "label": "_isExcluded",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\sWGC.sol:22"
            },
            {
              "contract": "sWGC",
              "label": "_excluded",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\sWGC.sol:23"
            },
            {
              "contract": "sWGC",
              "label": "stakingContract",
              "type": "t_address",
              "src": "contracts\\sWGC.sol:24"
            },
            {
              "contract": "sWGC",
              "label": "_tTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:27"
            },
            {
              "contract": "sWGC",
              "label": "_rTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:28"
            },
            {
              "contract": "sWGC",
              "label": "_tRewardTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:29"
            },
            {
              "contract": "sWGC",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:30"
            },
            {
              "contract": "sWGC",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:31"
            },
            {
              "contract": "sWGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\sWGC.sol:32"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IVotes": {
        "src": "@openzeppelin\\contracts\\governance\\utils\\IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "14b7db2feb23efcab8b774c28408ca6cbfc43022b47fd26bc5da2885d847dc94",
          "withoutMetadata": "ec4e87fa3f7622c08c82f57970dd54c7ba8a40d8f4161066c11e31ed09979ad7",
          "linkedWithoutMetadata": "ec4e87fa3f7622c08c82f57970dd54c7ba8a40d8f4161066c11e31ed09979ad7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)760_storage)dyn_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)760_storage)dyn_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)760_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)760_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)760_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Wrapper": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Wrapper.sol:18",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "depositFor(address,uint256)",
          "withdrawTo(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Wrapper",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Wrapper.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlying",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Wrapper.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2266_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2266_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2266_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\utils\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "38cfb2aaa5593243ab62adefd766d8f8910e78ed5db41266988ebe24d801514f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:9",
        "version": {
          "withMetadata": "563497f6ce8c298fea64d75417581ebeb05038d9702a87a6303c618c455ab6e9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin\\contracts\\utils\\Counters.sol:14",
        "version": {
          "withMetadata": "6ce8ca4d533fa5e5a6398a73b141f05dd00663b2af1223cce3a1ecad81992fbc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "c8856191fd28b1f6b25499079f47b60659900e577bc366662bc139de2591343f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin\\contracts\\utils\\cryptography\\ECDSA.sol:14",
        "version": {
          "withMetadata": "00bf142ccf3a53b620e9b66f37bc45f4cd23a7b3f9e7465add15a9c8f4a032b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin\\contracts\\utils\\math\\Math.sol:9",
        "version": {
          "withMetadata": "03435a70fd682b0ce115f38fb2ccf7f5f454b7b3eec7a04cb719ed17cccb5f34",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeCast.sol:21",
        "version": {
          "withMetadata": "8c44128f146dd72a63c2f82fa930678363dfed959de388ca461a922a0e43e589",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "gWGC": {
        "src": "contracts\\gWGC.sol:9",
        "version": {
          "withMetadata": "be595daf1ad014e602e9ce937a95c211d8fa3761b3301ed81d639309c33abfb2",
          "withoutMetadata": "9788caef4eaed7068ab69e8a074bf08e1ecc820fd8cd3fcc69fda604b7fe0eca",
          "linkedWithoutMetadata": "9788caef4eaed7068ab69e8a074bf08e1ecc820fd8cd3fcc69fda604b7fe0eca"
        },
        "inherit": [
          "ERC20Wrapper",
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "gWGC",
            "src": "contracts\\gWGC.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "670122db565abb621fd3003a869314f015a5405dbcbccc8cc118b6577185ab79",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "0203054938213da8bb127ebdc44f82299584e0c65cea2483af808fd8dd187f90",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "sWGC": {
        "src": "contracts\\sWGC.sol:10",
        "version": {
          "withMetadata": "203f3973c257dd19971b841c5f07f6cd0f0d92d93eb894ba57981aaea25a4c7a",
          "withoutMetadata": "0d675a206df2148ee4462921f4a1bf92f4d745aa27672c60e9c0a0a39da2d571",
          "linkedWithoutMetadata": "0d675a206df2148ee4462921f4a1bf92f4d745aa27672c60e9c0a0a39da2d571"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IERC20Upgradeable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(string,string,address,uint256,uint8)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "isExcludedFromReward(address)",
          "totalRewards()",
          "tokenFromReflection(uint256)",
          "excludeFromReward(address)",
          "includeInReward(address)",
          "setStakingAddress(address)",
          "transferForeignToken(address,address)",
          "distributeRewards(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "sWGC",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:18"
            },
            {
              "contract": "sWGC",
              "label": "_tOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:19"
            },
            {
              "contract": "sWGC",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\sWGC.sol:20"
            },
            {
              "contract": "sWGC",
              "label": "_isExcluded",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\sWGC.sol:22"
            },
            {
              "contract": "sWGC",
              "label": "_excluded",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\sWGC.sol:23"
            },
            {
              "contract": "sWGC",
              "label": "stakingContract",
              "type": "t_address",
              "src": "contracts\\sWGC.sol:24"
            },
            {
              "contract": "sWGC",
              "label": "_tTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:27"
            },
            {
              "contract": "sWGC",
              "label": "_rTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:28"
            },
            {
              "contract": "sWGC",
              "label": "_tRewardTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:29"
            },
            {
              "contract": "sWGC",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:30"
            },
            {
              "contract": "sWGC",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:31"
            },
            {
              "contract": "sWGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\sWGC.sol:32"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:27",
        "inherit": [
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "TimersUpgradeable",
          "AddressUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "()",
          "supportsInterface(bytes4)",
          "name()",
          "version()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalThreshold()",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "relay(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorUpgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:40"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "_proposals",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:42"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:397"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)": {
              "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalCore)570_storage": {
              "label": "struct GovernorUpgradeable.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6952_storage"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6952_storage"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                }
              ]
            },
            "t_struct(BlockNumber)6952_storage": {
              "label": "struct TimersUpgradeable.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:14",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:230"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TimelockControllerUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:24",
        "version": {
          "withMetadata": "ac6c311e5e517f453b6f6e3c8041346f5e01e867dc335db08c1eac6fa3081227",
          "withoutMetadata": "f38eb9986b2fa0756366d0bf0fed715e0c79ae798e3dbd60c91607a0dce716df",
          "linkedWithoutMetadata": "f38eb9986b2fa0756366d0bf0fed715e0c79ae798e3dbd60c91607a0dce716df"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:30"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:31"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:368"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:23",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "TimersUpgradeable",
          "SafeCastUpgradeable"
        ],
        "methods": [
          "COUNTING_MODE()",
          "propose(address[],uint256[],bytes[],string)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "proposals(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "quorumVotes()",
          "hasVoted(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "_proposalDetails",
              "type": "t_mapping(t_uint256,t_struct(ProposalDetails)2537_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:51"
            },
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:300"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ProposalDetails)2537_storage)": {
              "label": "mapping(uint256 => struct GovernorCompatibilityBravoUpgradeable.ProposalDetails)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalDetails)2537_storage": {
              "label": "struct GovernorCompatibilityBravoUpgradeable.ProposalDetails",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)3335_storage)"
                },
                {
                  "label": "descriptionHash",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_address,t_struct(Receipt)3335_storage)": {
              "label": "mapping(address => struct IGovernorCompatibilityBravoUpgradeable.Receipt)"
            },
            "t_struct(Receipt)3335_storage": {
              "label": "struct IGovernorCompatibilityBravoUpgradeable.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint96"
                }
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint96": {
              "label": "uint96"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumVotes()",
          "proposals(uint256)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:126"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorSettingsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:14",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "votingDelay()",
          "votingPeriod()",
          "proposalThreshold()",
          "setVotingDelay(uint256)",
          "setVotingPeriod(uint256)",
          "setProposalThreshold(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:15"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingPeriod",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:16"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_proposalThreshold",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:17"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:129"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorTimelockControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:27",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "state(uint256)",
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "updateTimelock(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelock",
              "type": "t_contract(TimelockControllerUpgradeable)2468",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:28"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelockIds",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:29"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:174"
            }
          ],
          "types": {
            "t_contract(TimelockControllerUpgradeable)2468": {
              "label": "contract TimelockControllerUpgradeable"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesQuorumFractionUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:15",
        "inherit": [
          "GovernorVotesUpgradeable",
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumNumerator()",
          "quorumDenominator()",
          "quorum(uint256)",
          "updateQuorumNumerator(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "_quorumNumerator",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:15",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "getVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "token",
              "type": "t_contract(IVotesUpgradeable)4377",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_contract(IVotesUpgradeable)4377": {
              "label": "contract IVotesUpgradeable"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorTimelockUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorTimelockUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\utils\\IVotesUpgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "4063b268132ad211102c0befeefb4ea8a33fbf6ccbc177dc4bf5d67a51b479c5",
          "withoutMetadata": "0cc77445e3e3f24a28573bb0c8bd2255736f9b5bed7e96bb3682a7ec99147cf5",
          "linkedWithoutMetadata": "0cc77445e3e3f24a28573bb0c8bd2255736f9b5bed7e96bb3682a7ec99147cf5"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:28",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "IVotesUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)5174_storage)dyn_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:43"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)5174_storage)dyn_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:44"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:261"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)5174_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)5174_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)5174_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)6570_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:99"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)6570_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)6570_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\utils\\SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "6e9546b1a4f84bcb85ce5e0d78713de7d2e0416526d54b860a49c23147c7c13d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "670122db565abb621fd3003a869314f015a5405dbcbccc8cc118b6577185ab79",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "29f92062a8b6fafa7221077f8cb427df736ef4a5048d43ec31386252ad7b7796",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "4ebe5212f39ac3edd911a272dd6158fbb8f03a3871807c897d4fdcc581b09ac2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\TimersUpgradeable.sol:9",
        "version": {
          "withMetadata": "c59efe873baa56f75b264ae6b0d7305dd49dfc0926c49d9886104ebcd5b4f7a7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "14c7d3e755cd05c8feebe7535f798cdc2ff1773910a773783b20a19fa65bfbb3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:118"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "4c8f9c4e3e66d2c0c03575e51032d422357ed3200399b738102fdd6f77ef71a4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "bec269be4927d676bcbb806156a0a177b5ea632c0616a7e4a2ea4682688a5412",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "0203054938213da8bb127ebdc44f82299584e0c65cea2483af808fd8dd187f90",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BridgeBase": {
        "src": "contracts\\BridgeBase.sol:8",
        "version": {
          "withMetadata": "2e006219fdb1d1e9dcaa1309d69fd4aad25da267465d9d436cbc0a398fb53f11",
          "withoutMetadata": "dd95e08a2c842b79b81b32812d87301b4cb346d37388baa214bf0ef241d1b3d0",
          "linkedWithoutMetadata": "dd95e08a2c842b79b81b32812d87301b4cb346d37388baa214bf0ef241d1b3d0"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "setFee(uint8,address)",
          "initialize(address,address)",
          "deposit(uint8,address,uint256)",
          "withdraw(address,uint256,uint256)",
          "getBalance(address)",
          "getServerBalance()",
          "updateToken(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BridgeBase",
              "label": "admin",
              "type": "t_address",
              "src": "contracts\\BridgeBase.sol:10"
            },
            {
              "contract": "BridgeBase",
              "label": "feeWallet",
              "type": "t_address",
              "src": "contracts\\BridgeBase.sol:11"
            },
            {
              "contract": "BridgeBase",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)5142",
              "src": "contracts\\BridgeBase.sol:12"
            },
            {
              "contract": "BridgeBase",
              "label": "nonce",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\BridgeBase.sol:13"
            },
            {
              "contract": "BridgeBase",
              "label": "processedNonces",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "src": "contracts\\BridgeBase.sol:14"
            },
            {
              "contract": "BridgeBase",
              "label": "fee",
              "type": "t_uint8",
              "src": "contracts\\BridgeBase.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20Upgradeable)5142": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Exponentation": {
        "src": "contracts\\Exponentation.sol:3",
        "version": {
          "withMetadata": "40abda0769c86ff411bf5a0079896075f91a4efcbac4222a1ec588b56f8c671d",
          "withoutMetadata": "f774c4872253bd71ba0c5b9f82857fce13a4cb523c33f0782d3a5cb1b2b20df6",
          "linkedWithoutMetadata": "f774c4872253bd71ba0c5b9f82857fce13a4cb523c33f0782d3a5cb1b2b20df6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "BancorFormula()",
          "power(uint256,uint256,uint256,uint32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Exponentation",
              "label": "maxExpArray",
              "type": "t_array(t_uint256)128_storage",
              "src": "contracts\\Exponentation.sol:20"
            }
          ],
          "types": {
            "t_array(t_uint256)128_storage": {
              "label": "uint256[128]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governor": {
        "src": "contracts\\Governor.sol:13",
        "version": {
          "withMetadata": "768ebd6e2045fd02002cf14f379c8390da3f722c8dff7b4c9869fe6db4c0c1e7",
          "withoutMetadata": "91dc2d92ec31937ca62f64b70fa81298de9d9789ebdc0f781bb3777d5f011bc2",
          "linkedWithoutMetadata": "91dc2d92ec31937ca62f64b70fa81298de9d9789ebdc0f781bb3777d5f011bc2"
        },
        "inherit": [
          "GovernorTimelockControlUpgradeable",
          "GovernorVotesQuorumFractionUpgradeable",
          "GovernorVotesUpgradeable",
          "GovernorCompatibilityBravoUpgradeable",
          "GovernorSettingsUpgradeable",
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,address,address,uint256,uint256,uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "state(uint256)",
          "propose(address[],uint256[],bytes[],string)",
          "proposalThreshold()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockController": {
        "src": "contracts\\TimelockController.sol:23",
        "version": {
          "withMetadata": "0fb3cd0ceabd32c74ab2369b7d94eb3d08ff09399b17ec578b298961911266dc",
          "withoutMetadata": "027d1fb80ec12882f6f096c59cb2d940cf1fc905b4903de81cecfd33319008d4",
          "linkedWithoutMetadata": "027d1fb80ec12882f6f096c59cb2d940cf1fc905b4903de81cecfd33319008d4"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address[],address[])",
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockController",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "contracts\\TimelockController.sol:30"
            },
            {
              "contract": "TimelockController",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "contracts\\TimelockController.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts\\WGC.sol:327",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "INIT_CODE_PAIR_HASH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts\\WGC.sol:218",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts\\WGC.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts\\WGC.sol:171",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITreasury": {
        "src": "contracts\\WGCStaking.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "distributeStakingReward()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGC": {
        "src": "contracts\\WGC.sol:359",
        "version": {
          "withMetadata": "aa683601b1429fe1d14ba101c0dcd9f9d1a453b13a8db10efd387f8cb2ae846e",
          "withoutMetadata": "2f21fa3daa823aa520b7bbe2dc414ca8a7a41b113bfc0e68406e801b72c79000",
          "linkedWithoutMetadata": "2f21fa3daa823aa520b7bbe2dc414ca8a7a41b113bfc0e68406e801b72c79000"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256[18],string,string,uint8)",
          "decimals()",
          "enableTrading()",
          "updateMaxTransactionAmount(uint256)",
          "updateMaxWallet(uint256)",
          "updateMinimumTokensBeforeFeeTaken(uint256)",
          "updateProtectBlockCount(uint256)",
          "setAutomatedMarketMakerPair(address,bool)",
          "updateGasPriceLimit(uint256)",
          "disableTransferDelay()",
          "excludeFromMaxTransaction(address,bool)",
          "excludeFromFee(address)",
          "includeInFee(address)",
          "updateBuyFee(uint256,uint256,uint256)",
          "updateSellFee(uint256,uint256,uint256)",
          "updateTransferFee(uint256,uint256,uint256)",
          "setProtectBlockFee(uint256,uint256,uint256)",
          "updateTreasuryAddress(address)",
          "updatePlantingFundFeeAddress(address)",
          "updateLiquidityAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGC",
              "label": "treasuryContract",
              "type": "t_contract(ITreasury)12086",
              "src": "contracts\\WGC.sol:361"
            },
            {
              "contract": "WGC",
              "label": "plantingFundFeeAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:362"
            },
            {
              "contract": "WGC",
              "label": "liquidityAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:363"
            },
            {
              "contract": "WGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\WGC.sol:365"
            },
            {
              "contract": "WGC",
              "label": "_tradingActiveBlock",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:367"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockCount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:368"
            },
            {
              "contract": "WGC",
              "label": "_gasPriceLimit",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:369"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:370"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:371"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:372"
            },
            {
              "contract": "WGC",
              "label": "tradingActive",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:373"
            },
            {
              "contract": "WGC",
              "label": "isExcludedFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:375"
            },
            {
              "contract": "WGC",
              "label": "buyOrSellSwitch",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:381"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:384"
            },
            {
              "contract": "WGC",
              "label": "_previousStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:385"
            },
            {
              "contract": "WGC",
              "label": "_liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:387"
            },
            {
              "contract": "WGC",
              "label": "_previousLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:388"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:390"
            },
            {
              "contract": "WGC",
              "label": "_previousPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:391"
            },
            {
              "contract": "WGC",
              "label": "buyStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:393"
            },
            {
              "contract": "WGC",
              "label": "buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:394"
            },
            {
              "contract": "WGC",
              "label": "buyPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:395"
            },
            {
              "contract": "WGC",
              "label": "sellStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:397"
            },
            {
              "contract": "WGC",
              "label": "sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:398"
            },
            {
              "contract": "WGC",
              "label": "sellPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:399"
            },
            {
              "contract": "WGC",
              "label": "transferStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:401"
            },
            {
              "contract": "WGC",
              "label": "transferLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:402"
            },
            {
              "contract": "WGC",
              "label": "transferPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:403"
            },
            {
              "contract": "WGC",
              "label": "isExcludedMaxTransactionAmount",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:405"
            },
            {
              "contract": "WGC",
              "label": "_holderLastTransferTimestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\WGC.sol:408"
            },
            {
              "contract": "WGC",
              "label": "_transferDelayEnabled",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:409"
            },
            {
              "contract": "WGC",
              "label": "_liquidityTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:411"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFeeTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:412"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFeeTokens",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:413"
            },
            {
              "contract": "WGC",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:417"
            },
            {
              "contract": "WGC",
              "label": "minimumFeeTokensToTake",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:419"
            },
            {
              "contract": "WGC",
              "label": "maxTransactionAmount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:420"
            },
            {
              "contract": "WGC",
              "label": "maxWallet",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:421"
            },
            {
              "contract": "WGC",
              "label": "pancakeRouter",
              "type": "t_contract(IPancakeRouter02)12477",
              "src": "contracts\\WGC.sol:423"
            },
            {
              "contract": "WGC",
              "label": "pancakePair",
              "type": "t_address",
              "src": "contracts\\WGC.sol:424"
            },
            {
              "contract": "WGC",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:426"
            }
          ],
          "types": {
            "t_contract(ITreasury)12086": {
              "label": "contract ITreasury"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_contract(IPancakeRouter02)12477": {
              "label": "contract IPancakeRouter02"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ISToken": {
        "src": "contracts\\WGCStaking.sol:11",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "distributeRewards(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGCStaking": {
        "src": "contracts\\WGCStaking.sol:19",
        "version": {
          "withMetadata": "c920af2e51541c1306a9df5cc7ee889045e2532eda1fb104a5e57f9e7f91ac40",
          "withoutMetadata": "261205360450c77b10d0b6a16dd569ba5604986c206b6acff2a668983497d930",
          "linkedWithoutMetadata": "261205360450c77b10d0b6a16dd569ba5604986c206b6acff2a668983497d930"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "updateConfiguration(address,address,address,uint256)",
          "initialize()",
          "stake(uint256)",
          "unstake(uint256)",
          "rebase()",
          "rewardBlocksLength()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGCStaking",
              "label": "gems",
              "type": "t_contract(ERC20Upgradeable)5064",
              "src": "contracts\\WGCStaking.sol:24"
            },
            {
              "contract": "WGCStaking",
              "label": "sGEMS",
              "type": "t_contract(ISToken)14505",
              "src": "contracts\\WGCStaking.sol:25"
            },
            {
              "contract": "WGCStaking",
              "label": "treasury",
              "type": "t_contract(ITreasury)14509",
              "src": "contracts\\WGCStaking.sol:26"
            },
            {
              "contract": "WGCStaking",
              "label": "minimumLimitToStake",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:28"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardHistory",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\WGCStaking.sol:29"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardBlocks",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCStaking.sol:30"
            },
            {
              "contract": "WGCStaking",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:31"
            }
          ],
          "types": {
            "t_contract(ERC20Upgradeable)5064": {
              "label": "contract ERC20Upgradeable"
            },
            "t_contract(ISToken)14505": {
              "label": "contract ISToken"
            },
            "t_contract(ITreasury)14509": {
              "label": "contract ITreasury"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WGCTreasury": {
        "src": "contracts\\WGCTreasury.sol:12",
        "version": {
          "withMetadata": "39ce59dcf2e6c5b30269a571aabddc06855a3a892573fe6a025991772fd724a5",
          "withoutMetadata": "06b0771e3455ef1ca9cfd3fb02a8bae5f2e3d17071062df7072202e4a1084074",
          "linkedWithoutMetadata": "06b0771e3455ef1ca9cfd3fb02a8bae5f2e3d17071062df7072202e4a1084074"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "depositReward(uint256)",
          "setTokenAddress(address)",
          "setStakingContractAddress(address)",
          "setExponentContractAddress(address)",
          "setStakingRewardPercent(uint256,uint256)",
          "distributeStakingReward()",
          "stakingRewardBlocksSetLength()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGCTreasury",
              "label": "exponentation",
              "type": "t_contract(Exponentation)10951",
              "src": "contracts\\WGCTreasury.sol:18"
            },
            {
              "contract": "WGCTreasury",
              "label": "wgc",
              "type": "t_contract(IERC20Upgradeable)5142",
              "src": "contracts\\WGCTreasury.sol:19"
            },
            {
              "contract": "WGCTreasury",
              "label": "stake",
              "type": "t_address",
              "src": "contracts\\WGCTreasury.sol:20"
            },
            {
              "contract": "WGCTreasury",
              "label": "rewardHistory",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\WGCTreasury.sol:22"
            },
            {
              "contract": "WGCTreasury",
              "label": "rewardBlocks",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCTreasury.sol:23"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardLastBlock",
              "type": "t_uint256",
              "src": "contracts\\WGCTreasury.sol:25"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardAmountDistributed",
              "type": "t_uint256",
              "src": "contracts\\WGCTreasury.sol:26"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardPercentPerBlock",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\WGCTreasury.sol:27"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardBlocksSet",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCTreasury.sol:28"
            }
          ],
          "types": {
            "t_contract(Exponentation)10951": {
              "label": "contract Exponentation"
            },
            "t_contract(IERC20Upgradeable)5142": {
              "label": "contract IERC20Upgradeable"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "sWGC": {
        "src": "contracts\\sWGC.sol:10",
        "version": {
          "withMetadata": "203f3973c257dd19971b841c5f07f6cd0f0d92d93eb894ba57981aaea25a4c7a",
          "withoutMetadata": "0d675a206df2148ee4462921f4a1bf92f4d745aa27672c60e9c0a0a39da2d571",
          "linkedWithoutMetadata": "0d675a206df2148ee4462921f4a1bf92f4d745aa27672c60e9c0a0a39da2d571"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IERC20Upgradeable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(string,string,address,uint256,uint8)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "isExcludedFromReward(address)",
          "totalRewards()",
          "tokenFromReflection(uint256)",
          "excludeFromReward(address)",
          "includeInReward(address)",
          "setStakingAddress(address)",
          "transferForeignToken(address,address)",
          "distributeRewards(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "sWGC",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:18"
            },
            {
              "contract": "sWGC",
              "label": "_tOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:19"
            },
            {
              "contract": "sWGC",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\sWGC.sol:20"
            },
            {
              "contract": "sWGC",
              "label": "_isExcluded",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\sWGC.sol:22"
            },
            {
              "contract": "sWGC",
              "label": "_excluded",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\sWGC.sol:23"
            },
            {
              "contract": "sWGC",
              "label": "stakingContract",
              "type": "t_address",
              "src": "contracts\\sWGC.sol:24"
            },
            {
              "contract": "sWGC",
              "label": "_tTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:27"
            },
            {
              "contract": "sWGC",
              "label": "_rTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:28"
            },
            {
              "contract": "sWGC",
              "label": "_tRewardTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:29"
            },
            {
              "contract": "sWGC",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:30"
            },
            {
              "contract": "sWGC",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:31"
            },
            {
              "contract": "sWGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\sWGC.sol:32"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "4063b268132ad211102c0befeefb4ea8a33fbf6ccbc177dc4bf5d67a51b479c5",
          "withoutMetadata": "0cc77445e3e3f24a28573bb0c8bd2255736f9b5bed7e96bb3682a7ec99147cf5",
          "linkedWithoutMetadata": "0cc77445e3e3f24a28573bb0c8bd2255736f9b5bed7e96bb3682a7ec99147cf5"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\utils\\SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "6e9546b1a4f84bcb85ce5e0d78713de7d2e0416526d54b860a49c23147c7c13d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "670122db565abb621fd3003a869314f015a5405dbcbccc8cc118b6577185ab79",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "0203054938213da8bb127ebdc44f82299584e0c65cea2483af808fd8dd187f90",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISToken": {
        "src": "contracts\\WGCStaking.sol:11",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "distributeRewards(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITreasury": {
        "src": "contracts\\WGCStaking.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "distributeStakingReward()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGCStaking": {
        "src": "contracts\\WGCStaking.sol:19",
        "version": {
          "withMetadata": "c920af2e51541c1306a9df5cc7ee889045e2532eda1fb104a5e57f9e7f91ac40",
          "withoutMetadata": "261205360450c77b10d0b6a16dd569ba5604986c206b6acff2a668983497d930",
          "linkedWithoutMetadata": "261205360450c77b10d0b6a16dd569ba5604986c206b6acff2a668983497d930"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "updateConfiguration(address,address,address,uint256)",
          "initialize()",
          "stake(uint256)",
          "unstake(uint256)",
          "rebase()",
          "rewardBlocksLength()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGCStaking",
              "label": "gems",
              "type": "t_contract(ERC20Upgradeable)810",
              "src": "contracts\\WGCStaking.sol:24"
            },
            {
              "contract": "WGCStaking",
              "label": "sGEMS",
              "type": "t_contract(ISToken)1752",
              "src": "contracts\\WGCStaking.sol:25"
            },
            {
              "contract": "WGCStaking",
              "label": "treasury",
              "type": "t_contract(ITreasury)1756",
              "src": "contracts\\WGCStaking.sol:26"
            },
            {
              "contract": "WGCStaking",
              "label": "minimumLimitToStake",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:28"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardHistory",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\WGCStaking.sol:29"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardBlocks",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCStaking.sol:30"
            },
            {
              "contract": "WGCStaking",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:31"
            }
          ],
          "types": {
            "t_contract(ERC20Upgradeable)810": {
              "label": "contract ERC20Upgradeable"
            },
            "t_contract(ISToken)1752": {
              "label": "contract ISToken"
            },
            "t_contract(ITreasury)1756": {
              "label": "contract ITreasury"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "4063b268132ad211102c0befeefb4ea8a33fbf6ccbc177dc4bf5d67a51b479c5",
          "withoutMetadata": "0cc77445e3e3f24a28573bb0c8bd2255736f9b5bed7e96bb3682a7ec99147cf5",
          "linkedWithoutMetadata": "0cc77445e3e3f24a28573bb0c8bd2255736f9b5bed7e96bb3682a7ec99147cf5"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "670122db565abb621fd3003a869314f015a5405dbcbccc8cc118b6577185ab79",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "0203054938213da8bb127ebdc44f82299584e0c65cea2483af808fd8dd187f90",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts\\WGC.sol:327",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "INIT_CODE_PAIR_HASH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts\\WGC.sol:218",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts\\WGC.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts\\WGC.sol:171",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITreasury": {
        "src": "contracts\\WGC.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "depositReward(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGC": {
        "src": "contracts\\WGC.sol:359",
        "version": {
          "withMetadata": "aa683601b1429fe1d14ba101c0dcd9f9d1a453b13a8db10efd387f8cb2ae846e",
          "withoutMetadata": "2f21fa3daa823aa520b7bbe2dc414ca8a7a41b113bfc0e68406e801b72c79000",
          "linkedWithoutMetadata": "2f21fa3daa823aa520b7bbe2dc414ca8a7a41b113bfc0e68406e801b72c79000"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256[18],string,string,uint8)",
          "decimals()",
          "enableTrading()",
          "updateMaxTransactionAmount(uint256)",
          "updateMaxWallet(uint256)",
          "updateMinimumTokensBeforeFeeTaken(uint256)",
          "updateProtectBlockCount(uint256)",
          "setAutomatedMarketMakerPair(address,bool)",
          "updateGasPriceLimit(uint256)",
          "disableTransferDelay()",
          "excludeFromMaxTransaction(address,bool)",
          "excludeFromFee(address)",
          "includeInFee(address)",
          "updateBuyFee(uint256,uint256,uint256)",
          "updateSellFee(uint256,uint256,uint256)",
          "updateTransferFee(uint256,uint256,uint256)",
          "setProtectBlockFee(uint256,uint256,uint256)",
          "updateTreasuryAddress(address)",
          "updatePlantingFundFeeAddress(address)",
          "updateLiquidityAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGC",
              "label": "treasuryContract",
              "type": "t_contract(ITreasury)1524",
              "src": "contracts\\WGC.sol:361"
            },
            {
              "contract": "WGC",
              "label": "plantingFundFeeAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:362"
            },
            {
              "contract": "WGC",
              "label": "liquidityAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:363"
            },
            {
              "contract": "WGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\WGC.sol:365"
            },
            {
              "contract": "WGC",
              "label": "_tradingActiveBlock",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:367"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockCount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:368"
            },
            {
              "contract": "WGC",
              "label": "_gasPriceLimit",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:369"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:370"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:371"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:372"
            },
            {
              "contract": "WGC",
              "label": "tradingActive",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:373"
            },
            {
              "contract": "WGC",
              "label": "isExcludedFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:375"
            },
            {
              "contract": "WGC",
              "label": "buyOrSellSwitch",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:381"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:384"
            },
            {
              "contract": "WGC",
              "label": "_previousStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:385"
            },
            {
              "contract": "WGC",
              "label": "_liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:387"
            },
            {
              "contract": "WGC",
              "label": "_previousLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:388"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:390"
            },
            {
              "contract": "WGC",
              "label": "_previousPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:391"
            },
            {
              "contract": "WGC",
              "label": "buyStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:393"
            },
            {
              "contract": "WGC",
              "label": "buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:394"
            },
            {
              "contract": "WGC",
              "label": "buyPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:395"
            },
            {
              "contract": "WGC",
              "label": "sellStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:397"
            },
            {
              "contract": "WGC",
              "label": "sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:398"
            },
            {
              "contract": "WGC",
              "label": "sellPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:399"
            },
            {
              "contract": "WGC",
              "label": "transferStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:401"
            },
            {
              "contract": "WGC",
              "label": "transferLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:402"
            },
            {
              "contract": "WGC",
              "label": "transferPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:403"
            },
            {
              "contract": "WGC",
              "label": "isExcludedMaxTransactionAmount",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:405"
            },
            {
              "contract": "WGC",
              "label": "_holderLastTransferTimestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\WGC.sol:408"
            },
            {
              "contract": "WGC",
              "label": "_transferDelayEnabled",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:409"
            },
            {
              "contract": "WGC",
              "label": "_liquidityTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:411"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFeeTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:412"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFeeTokens",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:413"
            },
            {
              "contract": "WGC",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:417"
            },
            {
              "contract": "WGC",
              "label": "minimumFeeTokensToTake",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:419"
            },
            {
              "contract": "WGC",
              "label": "maxTransactionAmount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:420"
            },
            {
              "contract": "WGC",
              "label": "maxWallet",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:421"
            },
            {
              "contract": "WGC",
              "label": "pancakeRouter",
              "type": "t_contract(IPancakeRouter02)1915",
              "src": "contracts\\WGC.sol:423"
            },
            {
              "contract": "WGC",
              "label": "pancakePair",
              "type": "t_address",
              "src": "contracts\\WGC.sol:424"
            },
            {
              "contract": "WGC",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:426"
            }
          ],
          "types": {
            "t_contract(ITreasury)1524": {
              "label": "contract ITreasury"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_contract(IPancakeRouter02)1915": {
              "label": "contract IPancakeRouter02"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "670122db565abb621fd3003a869314f015a5405dbcbccc8cc118b6577185ab79",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "0203054938213da8bb127ebdc44f82299584e0c65cea2483af808fd8dd187f90",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "sWGC": {
        "src": "contracts\\sWGC.sol:10",
        "version": {
          "withMetadata": "e367474e2e8028f4796e0c15907d9726938900c4c4cb49a51e7b70181568dcc3",
          "withoutMetadata": "eaa8dd4319adc11b7b1db976f17fe68c79b207c2151ace345af457c15ae4c792",
          "linkedWithoutMetadata": "eaa8dd4319adc11b7b1db976f17fe68c79b207c2151ace345af457c15ae4c792"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IERC20Upgradeable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(string,string,address,uint256,uint8)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "isExcludedFromReward(address)",
          "totalRewards()",
          "tokenFromReflection(uint256)",
          "excludeFromReward(address)",
          "includeInReward(address)",
          "setStakingAddress(address)",
          "transferForeignToken(address,address)",
          "distributeRewards(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "sWGC",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:18"
            },
            {
              "contract": "sWGC",
              "label": "_tOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:19"
            },
            {
              "contract": "sWGC",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\sWGC.sol:20"
            },
            {
              "contract": "sWGC",
              "label": "_isExcluded",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\sWGC.sol:22"
            },
            {
              "contract": "sWGC",
              "label": "_excluded",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\sWGC.sol:23"
            },
            {
              "contract": "sWGC",
              "label": "stakingContract",
              "type": "t_address",
              "src": "contracts\\sWGC.sol:24"
            },
            {
              "contract": "sWGC",
              "label": "_tTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:27"
            },
            {
              "contract": "sWGC",
              "label": "_rTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:28"
            },
            {
              "contract": "sWGC",
              "label": "_tRewardTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:29"
            },
            {
              "contract": "sWGC",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:30"
            },
            {
              "contract": "sWGC",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:31"
            },
            {
              "contract": "sWGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\sWGC.sol:32"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "4063b268132ad211102c0befeefb4ea8a33fbf6ccbc177dc4bf5d67a51b479c5",
          "withoutMetadata": "0cc77445e3e3f24a28573bb0c8bd2255736f9b5bed7e96bb3682a7ec99147cf5",
          "linkedWithoutMetadata": "0cc77445e3e3f24a28573bb0c8bd2255736f9b5bed7e96bb3682a7ec99147cf5"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\utils\\SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "6e9546b1a4f84bcb85ce5e0d78713de7d2e0416526d54b860a49c23147c7c13d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "670122db565abb621fd3003a869314f015a5405dbcbccc8cc118b6577185ab79",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "4ebe5212f39ac3edd911a272dd6158fbb8f03a3871807c897d4fdcc581b09ac2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "0203054938213da8bb127ebdc44f82299584e0c65cea2483af808fd8dd187f90",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Exponentation": {
        "src": "contracts\\Exponentation.sol:3",
        "version": {
          "withMetadata": "40abda0769c86ff411bf5a0079896075f91a4efcbac4222a1ec588b56f8c671d",
          "withoutMetadata": "f774c4872253bd71ba0c5b9f82857fce13a4cb523c33f0782d3a5cb1b2b20df6",
          "linkedWithoutMetadata": "f774c4872253bd71ba0c5b9f82857fce13a4cb523c33f0782d3a5cb1b2b20df6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "BancorFormula()",
          "power(uint256,uint256,uint256,uint32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Exponentation",
              "label": "maxExpArray",
              "type": "t_array(t_uint256)128_storage",
              "src": "contracts\\Exponentation.sol:20"
            }
          ],
          "types": {
            "t_array(t_uint256)128_storage": {
              "label": "uint256[128]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WGCTreasury": {
        "src": "contracts\\WGCTreasury.sol:12",
        "version": {
          "withMetadata": "39ce59dcf2e6c5b30269a571aabddc06855a3a892573fe6a025991772fd724a5",
          "withoutMetadata": "06b0771e3455ef1ca9cfd3fb02a8bae5f2e3d17071062df7072202e4a1084074",
          "linkedWithoutMetadata": "06b0771e3455ef1ca9cfd3fb02a8bae5f2e3d17071062df7072202e4a1084074"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "depositReward(uint256)",
          "setTokenAddress(address)",
          "setStakingContractAddress(address)",
          "setExponentContractAddress(address)",
          "setStakingRewardPercent(uint256,uint256)",
          "distributeStakingReward()",
          "stakingRewardBlocksSetLength()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGCTreasury",
              "label": "exponentation",
              "type": "t_contract(Exponentation)4433",
              "src": "contracts\\WGCTreasury.sol:18"
            },
            {
              "contract": "WGCTreasury",
              "label": "wgc",
              "type": "t_contract(IERC20Upgradeable)1166",
              "src": "contracts\\WGCTreasury.sol:19"
            },
            {
              "contract": "WGCTreasury",
              "label": "stake",
              "type": "t_address",
              "src": "contracts\\WGCTreasury.sol:20"
            },
            {
              "contract": "WGCTreasury",
              "label": "rewardHistory",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\WGCTreasury.sol:22"
            },
            {
              "contract": "WGCTreasury",
              "label": "rewardBlocks",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCTreasury.sol:23"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardLastBlock",
              "type": "t_uint256",
              "src": "contracts\\WGCTreasury.sol:25"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardAmountDistributed",
              "type": "t_uint256",
              "src": "contracts\\WGCTreasury.sol:26"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardPercentPerBlock",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\WGCTreasury.sol:27"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardBlocksSet",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCTreasury.sol:28"
            }
          ],
          "types": {
            "t_contract(Exponentation)4433": {
              "label": "contract Exponentation"
            },
            "t_contract(IERC20Upgradeable)1166": {
              "label": "contract IERC20Upgradeable"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin\\contracts\\governance\\utils\\IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "14b7db2feb23efcab8b774c28408ca6cbfc43022b47fd26bc5da2885d847dc94",
          "withoutMetadata": "ec4e87fa3f7622c08c82f57970dd54c7ba8a40d8f4161066c11e31ed09979ad7",
          "linkedWithoutMetadata": "ec4e87fa3f7622c08c82f57970dd54c7ba8a40d8f4161066c11e31ed09979ad7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)865_storage)dyn_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)865_storage)dyn_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)865_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)865_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)865_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Wrapper": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Wrapper.sol:18",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "depositFor(address,uint256)",
          "withdrawTo(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Wrapper",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Wrapper.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlying",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Wrapper.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2371_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2371_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2371_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\utils\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "38cfb2aaa5593243ab62adefd766d8f8910e78ed5db41266988ebe24d801514f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:9",
        "version": {
          "withMetadata": "563497f6ce8c298fea64d75417581ebeb05038d9702a87a6303c618c455ab6e9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin\\contracts\\utils\\Counters.sol:14",
        "version": {
          "withMetadata": "6ce8ca4d533fa5e5a6398a73b141f05dd00663b2af1223cce3a1ecad81992fbc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "c8856191fd28b1f6b25499079f47b60659900e577bc366662bc139de2591343f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin\\contracts\\utils\\cryptography\\ECDSA.sol:14",
        "version": {
          "withMetadata": "00bf142ccf3a53b620e9b66f37bc45f4cd23a7b3f9e7465add15a9c8f4a032b4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin\\contracts\\utils\\math\\Math.sol:9",
        "version": {
          "withMetadata": "03435a70fd682b0ce115f38fb2ccf7f5f454b7b3eec7a04cb719ed17cccb5f34",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeCast.sol:21",
        "version": {
          "withMetadata": "8c44128f146dd72a63c2f82fa930678363dfed959de388ca461a922a0e43e589",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "4fc8bd3a611818eed1829df69b17e65c2b87bd8b502eaaa31694e485f2ae86f9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGCWrapper": {
        "src": "contracts\\Wrapper.sol:15",
        "version": {
          "withMetadata": "c14efd9735b80227d5ddc2a06bfd71a195ee445723b707b94edf7506a4462990",
          "withoutMetadata": "d0f47579c86a0abb587f89cdff33377e1bdc74d95a6ab27d75aee60196b9c0ff",
          "linkedWithoutMetadata": "d0f47579c86a0abb587f89cdff33377e1bdc74d95a6ab27d75aee60196b9c0ff"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address,address)",
          "updateToken(address,address)",
          "exchange(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WGCWrapper",
            "src": "contracts\\Wrapper.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WGCWrapper",
              "label": "oldToken",
              "type": "t_contract(IERC20)848",
              "src": "contracts\\Wrapper.sol:18"
            },
            {
              "contract": "WGCWrapper",
              "label": "newToken",
              "type": "t_contract(IERC20)848",
              "src": "contracts\\Wrapper.sol:19"
            }
          ],
          "types": {
            "t_contract(IERC20)848": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "gWGC": {
        "src": "contracts\\gWGC.sol:9",
        "version": {
          "withMetadata": "be595daf1ad014e602e9ce937a95c211d8fa3761b3301ed81d639309c33abfb2",
          "withoutMetadata": "9788caef4eaed7068ab69e8a074bf08e1ecc820fd8cd3fcc69fda604b7fe0eca",
          "linkedWithoutMetadata": "9788caef4eaed7068ab69e8a074bf08e1ecc820fd8cd3fcc69fda604b7fe0eca"
        },
        "inherit": [
          "ERC20Wrapper",
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "gWGC",
            "src": "contracts\\gWGC.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:27",
        "inherit": [
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "TimersUpgradeable",
          "AddressUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "()",
          "supportsInterface(bytes4)",
          "name()",
          "version()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalThreshold()",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "relay(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorUpgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:40"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "_proposals",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:42"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:397"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)": {
              "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalCore)570_storage": {
              "label": "struct GovernorUpgradeable.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6952_storage"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6952_storage"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                }
              ]
            },
            "t_struct(BlockNumber)6952_storage": {
              "label": "struct TimersUpgradeable.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:14",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:230"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TimelockControllerUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:24",
        "version": {
          "withMetadata": "ac6c311e5e517f453b6f6e3c8041346f5e01e867dc335db08c1eac6fa3081227",
          "withoutMetadata": "f38eb9986b2fa0756366d0bf0fed715e0c79ae798e3dbd60c91607a0dce716df",
          "linkedWithoutMetadata": "f38eb9986b2fa0756366d0bf0fed715e0c79ae798e3dbd60c91607a0dce716df"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:30"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:31"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:368"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:23",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "TimersUpgradeable",
          "SafeCastUpgradeable"
        ],
        "methods": [
          "COUNTING_MODE()",
          "propose(address[],uint256[],bytes[],string)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "proposals(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "quorumVotes()",
          "hasVoted(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "_proposalDetails",
              "type": "t_mapping(t_uint256,t_struct(ProposalDetails)2537_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:51"
            },
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:300"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ProposalDetails)2537_storage)": {
              "label": "mapping(uint256 => struct GovernorCompatibilityBravoUpgradeable.ProposalDetails)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalDetails)2537_storage": {
              "label": "struct GovernorCompatibilityBravoUpgradeable.ProposalDetails",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)3335_storage)"
                },
                {
                  "label": "descriptionHash",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_address,t_struct(Receipt)3335_storage)": {
              "label": "mapping(address => struct IGovernorCompatibilityBravoUpgradeable.Receipt)"
            },
            "t_struct(Receipt)3335_storage": {
              "label": "struct IGovernorCompatibilityBravoUpgradeable.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint96"
                }
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint96": {
              "label": "uint96"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumVotes()",
          "proposals(uint256)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:126"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorSettingsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:14",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "votingDelay()",
          "votingPeriod()",
          "proposalThreshold()",
          "setVotingDelay(uint256)",
          "setVotingPeriod(uint256)",
          "setProposalThreshold(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:15"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingPeriod",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:16"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_proposalThreshold",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:17"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:129"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorTimelockControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:27",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "state(uint256)",
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "updateTimelock(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelock",
              "type": "t_contract(TimelockControllerUpgradeable)2468",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:28"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelockIds",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:29"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:174"
            }
          ],
          "types": {
            "t_contract(TimelockControllerUpgradeable)2468": {
              "label": "contract TimelockControllerUpgradeable"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesQuorumFractionUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:15",
        "inherit": [
          "GovernorVotesUpgradeable",
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumNumerator()",
          "quorumDenominator()",
          "quorum(uint256)",
          "updateQuorumNumerator(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "_quorumNumerator",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:15",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "getVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "token",
              "type": "t_contract(IVotesUpgradeable)4377",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_contract(IVotesUpgradeable)4377": {
              "label": "contract IVotesUpgradeable"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorTimelockUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorTimelockUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\utils\\IVotesUpgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "4063b268132ad211102c0befeefb4ea8a33fbf6ccbc177dc4bf5d67a51b479c5",
          "withoutMetadata": "0cc77445e3e3f24a28573bb0c8bd2255736f9b5bed7e96bb3682a7ec99147cf5",
          "linkedWithoutMetadata": "0cc77445e3e3f24a28573bb0c8bd2255736f9b5bed7e96bb3682a7ec99147cf5"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:28",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "IVotesUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)5174_storage)dyn_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:43"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)5174_storage)dyn_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:44"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:261"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)5174_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)5174_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)5174_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)6570_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:99"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)6570_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)6570_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\utils\\SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "6e9546b1a4f84bcb85ce5e0d78713de7d2e0416526d54b860a49c23147c7c13d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "670122db565abb621fd3003a869314f015a5405dbcbccc8cc118b6577185ab79",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "29f92062a8b6fafa7221077f8cb427df736ef4a5048d43ec31386252ad7b7796",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "4ebe5212f39ac3edd911a272dd6158fbb8f03a3871807c897d4fdcc581b09ac2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\TimersUpgradeable.sol:9",
        "version": {
          "withMetadata": "c59efe873baa56f75b264ae6b0d7305dd49dfc0926c49d9886104ebcd5b4f7a7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "14c7d3e755cd05c8feebe7535f798cdc2ff1773910a773783b20a19fa65bfbb3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:118"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "4c8f9c4e3e66d2c0c03575e51032d422357ed3200399b738102fdd6f77ef71a4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "bec269be4927d676bcbb806156a0a177b5ea632c0616a7e4a2ea4682688a5412",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "0203054938213da8bb127ebdc44f82299584e0c65cea2483af808fd8dd187f90",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BridgeBase": {
        "src": "contracts\\BridgeBase.sol:8",
        "version": {
          "withMetadata": "2e006219fdb1d1e9dcaa1309d69fd4aad25da267465d9d436cbc0a398fb53f11",
          "withoutMetadata": "dd95e08a2c842b79b81b32812d87301b4cb346d37388baa214bf0ef241d1b3d0",
          "linkedWithoutMetadata": "dd95e08a2c842b79b81b32812d87301b4cb346d37388baa214bf0ef241d1b3d0"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "setFee(uint8,address)",
          "initialize(address,address)",
          "deposit(uint8,address,uint256)",
          "withdraw(address,uint256,uint256)",
          "getBalance(address)",
          "getServerBalance()",
          "updateToken(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BridgeBase",
              "label": "admin",
              "type": "t_address",
              "src": "contracts\\BridgeBase.sol:10"
            },
            {
              "contract": "BridgeBase",
              "label": "feeWallet",
              "type": "t_address",
              "src": "contracts\\BridgeBase.sol:11"
            },
            {
              "contract": "BridgeBase",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)5142",
              "src": "contracts\\BridgeBase.sol:12"
            },
            {
              "contract": "BridgeBase",
              "label": "nonce",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\BridgeBase.sol:13"
            },
            {
              "contract": "BridgeBase",
              "label": "processedNonces",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "src": "contracts\\BridgeBase.sol:14"
            },
            {
              "contract": "BridgeBase",
              "label": "fee",
              "type": "t_uint8",
              "src": "contracts\\BridgeBase.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20Upgradeable)5142": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Exponentation": {
        "src": "contracts\\Exponentation.sol:3",
        "version": {
          "withMetadata": "40abda0769c86ff411bf5a0079896075f91a4efcbac4222a1ec588b56f8c671d",
          "withoutMetadata": "f774c4872253bd71ba0c5b9f82857fce13a4cb523c33f0782d3a5cb1b2b20df6",
          "linkedWithoutMetadata": "f774c4872253bd71ba0c5b9f82857fce13a4cb523c33f0782d3a5cb1b2b20df6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "BancorFormula()",
          "power(uint256,uint256,uint256,uint32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Exponentation",
              "label": "maxExpArray",
              "type": "t_array(t_uint256)128_storage",
              "src": "contracts\\Exponentation.sol:20"
            }
          ],
          "types": {
            "t_array(t_uint256)128_storage": {
              "label": "uint256[128]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governor": {
        "src": "contracts\\Governor.sol:13",
        "version": {
          "withMetadata": "768ebd6e2045fd02002cf14f379c8390da3f722c8dff7b4c9869fe6db4c0c1e7",
          "withoutMetadata": "91dc2d92ec31937ca62f64b70fa81298de9d9789ebdc0f781bb3777d5f011bc2",
          "linkedWithoutMetadata": "91dc2d92ec31937ca62f64b70fa81298de9d9789ebdc0f781bb3777d5f011bc2"
        },
        "inherit": [
          "GovernorTimelockControlUpgradeable",
          "GovernorVotesQuorumFractionUpgradeable",
          "GovernorVotesUpgradeable",
          "GovernorCompatibilityBravoUpgradeable",
          "GovernorSettingsUpgradeable",
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,address,address,uint256,uint256,uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "state(uint256)",
          "propose(address[],uint256[],bytes[],string)",
          "proposalThreshold()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockController": {
        "src": "contracts\\TimelockController.sol:23",
        "version": {
          "withMetadata": "0fb3cd0ceabd32c74ab2369b7d94eb3d08ff09399b17ec578b298961911266dc",
          "withoutMetadata": "027d1fb80ec12882f6f096c59cb2d940cf1fc905b4903de81cecfd33319008d4",
          "linkedWithoutMetadata": "027d1fb80ec12882f6f096c59cb2d940cf1fc905b4903de81cecfd33319008d4"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address[],address[])",
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockController",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "contracts\\TimelockController.sol:30"
            },
            {
              "contract": "TimelockController",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "contracts\\TimelockController.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts\\WGC.sol:327",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "INIT_CODE_PAIR_HASH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts\\WGC.sol:218",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts\\WGC.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts\\WGC.sol:171",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITreasury": {
        "src": "contracts\\WGCStaking.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "distributeStakingReward()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGC": {
        "src": "contracts\\WGC.sol:359",
        "version": {
          "withMetadata": "aa683601b1429fe1d14ba101c0dcd9f9d1a453b13a8db10efd387f8cb2ae846e",
          "withoutMetadata": "2f21fa3daa823aa520b7bbe2dc414ca8a7a41b113bfc0e68406e801b72c79000",
          "linkedWithoutMetadata": "2f21fa3daa823aa520b7bbe2dc414ca8a7a41b113bfc0e68406e801b72c79000"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256[18],string,string,uint8)",
          "decimals()",
          "enableTrading()",
          "updateMaxTransactionAmount(uint256)",
          "updateMaxWallet(uint256)",
          "updateMinimumTokensBeforeFeeTaken(uint256)",
          "updateProtectBlockCount(uint256)",
          "setAutomatedMarketMakerPair(address,bool)",
          "updateGasPriceLimit(uint256)",
          "disableTransferDelay()",
          "excludeFromMaxTransaction(address,bool)",
          "excludeFromFee(address)",
          "includeInFee(address)",
          "updateBuyFee(uint256,uint256,uint256)",
          "updateSellFee(uint256,uint256,uint256)",
          "updateTransferFee(uint256,uint256,uint256)",
          "setProtectBlockFee(uint256,uint256,uint256)",
          "updateTreasuryAddress(address)",
          "updatePlantingFundFeeAddress(address)",
          "updateLiquidityAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGC",
              "label": "treasuryContract",
              "type": "t_contract(ITreasury)12086",
              "src": "contracts\\WGC.sol:361"
            },
            {
              "contract": "WGC",
              "label": "plantingFundFeeAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:362"
            },
            {
              "contract": "WGC",
              "label": "liquidityAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:363"
            },
            {
              "contract": "WGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\WGC.sol:365"
            },
            {
              "contract": "WGC",
              "label": "_tradingActiveBlock",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:367"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockCount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:368"
            },
            {
              "contract": "WGC",
              "label": "_gasPriceLimit",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:369"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:370"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:371"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:372"
            },
            {
              "contract": "WGC",
              "label": "tradingActive",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:373"
            },
            {
              "contract": "WGC",
              "label": "isExcludedFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:375"
            },
            {
              "contract": "WGC",
              "label": "buyOrSellSwitch",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:381"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:384"
            },
            {
              "contract": "WGC",
              "label": "_previousStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:385"
            },
            {
              "contract": "WGC",
              "label": "_liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:387"
            },
            {
              "contract": "WGC",
              "label": "_previousLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:388"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:390"
            },
            {
              "contract": "WGC",
              "label": "_previousPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:391"
            },
            {
              "contract": "WGC",
              "label": "buyStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:393"
            },
            {
              "contract": "WGC",
              "label": "buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:394"
            },
            {
              "contract": "WGC",
              "label": "buyPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:395"
            },
            {
              "contract": "WGC",
              "label": "sellStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:397"
            },
            {
              "contract": "WGC",
              "label": "sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:398"
            },
            {
              "contract": "WGC",
              "label": "sellPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:399"
            },
            {
              "contract": "WGC",
              "label": "transferStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:401"
            },
            {
              "contract": "WGC",
              "label": "transferLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:402"
            },
            {
              "contract": "WGC",
              "label": "transferPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:403"
            },
            {
              "contract": "WGC",
              "label": "isExcludedMaxTransactionAmount",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:405"
            },
            {
              "contract": "WGC",
              "label": "_holderLastTransferTimestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\WGC.sol:408"
            },
            {
              "contract": "WGC",
              "label": "_transferDelayEnabled",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:409"
            },
            {
              "contract": "WGC",
              "label": "_liquidityTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:411"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFeeTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:412"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFeeTokens",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:413"
            },
            {
              "contract": "WGC",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:417"
            },
            {
              "contract": "WGC",
              "label": "minimumFeeTokensToTake",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:419"
            },
            {
              "contract": "WGC",
              "label": "maxTransactionAmount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:420"
            },
            {
              "contract": "WGC",
              "label": "maxWallet",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:421"
            },
            {
              "contract": "WGC",
              "label": "pancakeRouter",
              "type": "t_contract(IPancakeRouter02)12477",
              "src": "contracts\\WGC.sol:423"
            },
            {
              "contract": "WGC",
              "label": "pancakePair",
              "type": "t_address",
              "src": "contracts\\WGC.sol:424"
            },
            {
              "contract": "WGC",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:426"
            }
          ],
          "types": {
            "t_contract(ITreasury)12086": {
              "label": "contract ITreasury"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_contract(IPancakeRouter02)12477": {
              "label": "contract IPancakeRouter02"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ISToken": {
        "src": "contracts\\WGCStaking.sol:11",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "distributeRewards(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGCStaking": {
        "src": "contracts\\WGCStaking.sol:19",
        "version": {
          "withMetadata": "c920af2e51541c1306a9df5cc7ee889045e2532eda1fb104a5e57f9e7f91ac40",
          "withoutMetadata": "261205360450c77b10d0b6a16dd569ba5604986c206b6acff2a668983497d930",
          "linkedWithoutMetadata": "261205360450c77b10d0b6a16dd569ba5604986c206b6acff2a668983497d930"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "updateConfiguration(address,address,address,uint256)",
          "initialize()",
          "stake(uint256)",
          "unstake(uint256)",
          "rebase()",
          "rewardBlocksLength()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGCStaking",
              "label": "gems",
              "type": "t_contract(ERC20Upgradeable)5064",
              "src": "contracts\\WGCStaking.sol:24"
            },
            {
              "contract": "WGCStaking",
              "label": "sGEMS",
              "type": "t_contract(ISToken)14505",
              "src": "contracts\\WGCStaking.sol:25"
            },
            {
              "contract": "WGCStaking",
              "label": "treasury",
              "type": "t_contract(ITreasury)14509",
              "src": "contracts\\WGCStaking.sol:26"
            },
            {
              "contract": "WGCStaking",
              "label": "minimumLimitToStake",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:28"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardHistory",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\WGCStaking.sol:29"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardBlocks",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCStaking.sol:30"
            },
            {
              "contract": "WGCStaking",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:31"
            }
          ],
          "types": {
            "t_contract(ERC20Upgradeable)5064": {
              "label": "contract ERC20Upgradeable"
            },
            "t_contract(ISToken)14505": {
              "label": "contract ISToken"
            },
            "t_contract(ITreasury)14509": {
              "label": "contract ITreasury"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WGCTreasury": {
        "src": "contracts\\WGCTreasury.sol:12",
        "version": {
          "withMetadata": "39ce59dcf2e6c5b30269a571aabddc06855a3a892573fe6a025991772fd724a5",
          "withoutMetadata": "06b0771e3455ef1ca9cfd3fb02a8bae5f2e3d17071062df7072202e4a1084074",
          "linkedWithoutMetadata": "06b0771e3455ef1ca9cfd3fb02a8bae5f2e3d17071062df7072202e4a1084074"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "depositReward(uint256)",
          "setTokenAddress(address)",
          "setStakingContractAddress(address)",
          "setExponentContractAddress(address)",
          "setStakingRewardPercent(uint256,uint256)",
          "distributeStakingReward()",
          "stakingRewardBlocksSetLength()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGCTreasury",
              "label": "exponentation",
              "type": "t_contract(Exponentation)10951",
              "src": "contracts\\WGCTreasury.sol:18"
            },
            {
              "contract": "WGCTreasury",
              "label": "wgc",
              "type": "t_contract(IERC20Upgradeable)5142",
              "src": "contracts\\WGCTreasury.sol:19"
            },
            {
              "contract": "WGCTreasury",
              "label": "stake",
              "type": "t_address",
              "src": "contracts\\WGCTreasury.sol:20"
            },
            {
              "contract": "WGCTreasury",
              "label": "rewardHistory",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\WGCTreasury.sol:22"
            },
            {
              "contract": "WGCTreasury",
              "label": "rewardBlocks",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCTreasury.sol:23"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardLastBlock",
              "type": "t_uint256",
              "src": "contracts\\WGCTreasury.sol:25"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardAmountDistributed",
              "type": "t_uint256",
              "src": "contracts\\WGCTreasury.sol:26"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardPercentPerBlock",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\WGCTreasury.sol:27"
            },
            {
              "contract": "WGCTreasury",
              "label": "stakingRewardBlocksSet",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCTreasury.sol:28"
            }
          ],
          "types": {
            "t_contract(Exponentation)10951": {
              "label": "contract Exponentation"
            },
            "t_contract(IERC20Upgradeable)5142": {
              "label": "contract IERC20Upgradeable"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "sWGC": {
        "src": "contracts\\sWGC.sol:10",
        "version": {
          "withMetadata": "e367474e2e8028f4796e0c15907d9726938900c4c4cb49a51e7b70181568dcc3",
          "withoutMetadata": "eaa8dd4319adc11b7b1db976f17fe68c79b207c2151ace345af457c15ae4c792",
          "linkedWithoutMetadata": "eaa8dd4319adc11b7b1db976f17fe68c79b207c2151ace345af457c15ae4c792"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IERC20Upgradeable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(string,string,address,uint256,uint8)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "isExcludedFromReward(address)",
          "totalRewards()",
          "tokenFromReflection(uint256)",
          "excludeFromReward(address)",
          "includeInReward(address)",
          "setStakingAddress(address)",
          "transferForeignToken(address,address)",
          "distributeRewards(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "sWGC",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:18"
            },
            {
              "contract": "sWGC",
              "label": "_tOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:19"
            },
            {
              "contract": "sWGC",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\sWGC.sol:20"
            },
            {
              "contract": "sWGC",
              "label": "_isExcluded",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\sWGC.sol:22"
            },
            {
              "contract": "sWGC",
              "label": "_excluded",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\sWGC.sol:23"
            },
            {
              "contract": "sWGC",
              "label": "stakingContract",
              "type": "t_address",
              "src": "contracts\\sWGC.sol:24"
            },
            {
              "contract": "sWGC",
              "label": "_tTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:27"
            },
            {
              "contract": "sWGC",
              "label": "_rTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:28"
            },
            {
              "contract": "sWGC",
              "label": "_tRewardTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:29"
            },
            {
              "contract": "sWGC",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:30"
            },
            {
              "contract": "sWGC",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:31"
            },
            {
              "contract": "sWGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\sWGC.sol:32"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:27",
        "inherit": [
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "TimersUpgradeable",
          "AddressUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "()",
          "supportsInterface(bytes4)",
          "name()",
          "version()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalThreshold()",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "relay(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorUpgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:40"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "_proposals",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:42"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:397"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)": {
              "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalCore)570_storage": {
              "label": "struct GovernorUpgradeable.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6952_storage"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6952_storage"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                }
              ]
            },
            "t_struct(BlockNumber)6952_storage": {
              "label": "struct TimersUpgradeable.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:14",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:230"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TimelockControllerUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:24",
        "version": {
          "withMetadata": "ce8c131622012e73e374823374b69596d2832d83de4f1fbc92108719c0d283ae",
          "withoutMetadata": "bdf1693fae76c4449cb7512b9b2fd8ca5e76013306c6541b97e66b9e2ff96847",
          "linkedWithoutMetadata": "bdf1693fae76c4449cb7512b9b2fd8ca5e76013306c6541b97e66b9e2ff96847"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:30"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:31"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:368"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:23",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "TimersUpgradeable",
          "SafeCastUpgradeable"
        ],
        "methods": [
          "COUNTING_MODE()",
          "propose(address[],uint256[],bytes[],string)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "proposals(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "quorumVotes()",
          "hasVoted(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "_proposalDetails",
              "type": "t_mapping(t_uint256,t_struct(ProposalDetails)2537_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:51"
            },
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:300"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ProposalDetails)2537_storage)": {
              "label": "mapping(uint256 => struct GovernorCompatibilityBravoUpgradeable.ProposalDetails)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalDetails)2537_storage": {
              "label": "struct GovernorCompatibilityBravoUpgradeable.ProposalDetails",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)3335_storage)"
                },
                {
                  "label": "descriptionHash",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_address,t_struct(Receipt)3335_storage)": {
              "label": "mapping(address => struct IGovernorCompatibilityBravoUpgradeable.Receipt)"
            },
            "t_struct(Receipt)3335_storage": {
              "label": "struct IGovernorCompatibilityBravoUpgradeable.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint96"
                }
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint96": {
              "label": "uint96"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumVotes()",
          "proposals(uint256)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:126"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorSettingsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:14",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "votingDelay()",
          "votingPeriod()",
          "proposalThreshold()",
          "setVotingDelay(uint256)",
          "setVotingPeriod(uint256)",
          "setProposalThreshold(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:15"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingPeriod",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:16"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_proposalThreshold",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:17"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:129"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorTimelockControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:27",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "state(uint256)",
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "updateTimelock(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelock",
              "type": "t_contract(TimelockControllerUpgradeable)2468",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:28"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelockIds",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:29"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:174"
            }
          ],
          "types": {
            "t_contract(TimelockControllerUpgradeable)2468": {
              "label": "contract TimelockControllerUpgradeable"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesQuorumFractionUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:15",
        "inherit": [
          "GovernorVotesUpgradeable",
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumNumerator()",
          "quorumDenominator()",
          "quorum(uint256)",
          "updateQuorumNumerator(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "_quorumNumerator",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:15",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "getVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "token",
              "type": "t_contract(IVotesUpgradeable)4377",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_contract(IVotesUpgradeable)4377": {
              "label": "contract IVotesUpgradeable"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorTimelockUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorTimelockUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\utils\\IVotesUpgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "278ed7fbbb82dedf6e0dd9b11d3f22ad9b60de94b98c64e62eec394765482a3b",
          "withoutMetadata": "891ef54eedab4f41f38b7e7dd0b8c57e03f94dc088a18514fcdfcb794001fd24",
          "linkedWithoutMetadata": "891ef54eedab4f41f38b7e7dd0b8c57e03f94dc088a18514fcdfcb794001fd24"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:28",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "IVotesUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)5174_storage)dyn_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:43"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)5174_storage)dyn_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:44"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:261"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)5174_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)5174_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)5174_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)6570_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:99"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)6570_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)6570_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\utils\\SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "0bc4cf6b9846dfde60c011ca63c8317823a939e400653bce1e5d0dec0eeadb84",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "e00ffd2605f9ec3194ab1fce5c31c218eadc5ace3d6e8939bbbce3cc543ade2c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "ac334f6525fda0371d2ce509b85f0407c7a052084c5b0c0d6b08fa13b70faad0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "c19b52a47ff83cc6ca5e7b4dba240fbc2f4fef926ab0dd85736aa0508b96c826",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\TimersUpgradeable.sol:9",
        "version": {
          "withMetadata": "f830e1de478338b875b928edcf10717bf4100b4bc0756a2ef13f7ae66c9c53bf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "fc38278c3d146f9dd5bae76a8716dd2ec59977a51c8de262135c36e76d51c0de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:118"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "479f355f2b7c32124363a6744088dcf4b9e480536c0d4616fca852285c0116fc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "5282d528aa64f488817880b00b2afef43d7bf71feb12c48a2d27a5b4bf0db2f4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "72f554b1e9df3cfac85fe1e53e4e33ef51276ebe86666e4a1be4cdf481592010",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BridgeBase": {
        "src": "contracts\\BridgeBase.sol:8",
        "version": {
          "withMetadata": "cf69bb57230bd08080f74057022e460e3f9904972eb30d45697cf601fd578703",
          "withoutMetadata": "f67583a81d95b5a837fe127de6abe5d9f4f768ac75a446472ad8b4a965959231",
          "linkedWithoutMetadata": "f67583a81d95b5a837fe127de6abe5d9f4f768ac75a446472ad8b4a965959231"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "setFee(uint8,address)",
          "initialize(address,address)",
          "deposit(uint8,address,uint256)",
          "withdraw(address,uint256,uint256)",
          "getBalance(address)",
          "getServerBalance()",
          "updateToken(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BridgeBase",
              "label": "admin",
              "type": "t_address",
              "src": "contracts\\BridgeBase.sol:10"
            },
            {
              "contract": "BridgeBase",
              "label": "feeWallet",
              "type": "t_address",
              "src": "contracts\\BridgeBase.sol:11"
            },
            {
              "contract": "BridgeBase",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)5142",
              "src": "contracts\\BridgeBase.sol:12"
            },
            {
              "contract": "BridgeBase",
              "label": "nonce",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\BridgeBase.sol:13"
            },
            {
              "contract": "BridgeBase",
              "label": "processedNonces",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "src": "contracts\\BridgeBase.sol:14"
            },
            {
              "contract": "BridgeBase",
              "label": "fee",
              "type": "t_uint8",
              "src": "contracts\\BridgeBase.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20Upgradeable)5142": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governor": {
        "src": "contracts\\Governor.sol:13",
        "version": {
          "withMetadata": "27f033479b000bf1263e3acf08c53eaa87d9ff9737410d97217f3e8a1e92e80e",
          "withoutMetadata": "69b663f97c9bd97461ee2d1a0c95d07ab9eb268edc0dc851ae125e01915c4c33",
          "linkedWithoutMetadata": "69b663f97c9bd97461ee2d1a0c95d07ab9eb268edc0dc851ae125e01915c4c33"
        },
        "inherit": [
          "GovernorTimelockControlUpgradeable",
          "GovernorVotesQuorumFractionUpgradeable",
          "GovernorVotesUpgradeable",
          "GovernorCompatibilityBravoUpgradeable",
          "GovernorSettingsUpgradeable",
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,address,address,uint256,uint256,uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "state(uint256)",
          "propose(address[],uint256[],bytes[],string)",
          "proposalThreshold()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockController": {
        "src": "contracts\\TimelockController.sol:23",
        "version": {
          "withMetadata": "5a753eadf64fb7d3bbd49140d8bf4c49e7d9aa127f1acb82dab62ce4c39c42ca",
          "withoutMetadata": "f5941afb2bcb1fea691e478ce2f5dcd363ff6394b7f6d3d33d7dc7b36c0cc182",
          "linkedWithoutMetadata": "f5941afb2bcb1fea691e478ce2f5dcd363ff6394b7f6d3d33d7dc7b36c0cc182"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address[],address[])",
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockController",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "contracts\\TimelockController.sol:30"
            },
            {
              "contract": "TimelockController",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "contracts\\TimelockController.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts\\WGC.sol:327",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "INIT_CODE_PAIR_HASH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts\\WGC.sol:218",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts\\WGC.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts\\WGC.sol:171",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStake": {
        "src": "contracts\\WGC.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "depositReward(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGC": {
        "src": "contracts\\WGC.sol:359",
        "version": {
          "withMetadata": "2e990c5d4bc6b0293b229de7a5efaffe24973d2bdfa4f01fcc1820223e75d497",
          "withoutMetadata": "b2c351270bed2d6450684a7521a13a0e32a97542c02ca330ca8f4bbdb87e0923",
          "linkedWithoutMetadata": "b2c351270bed2d6450684a7521a13a0e32a97542c02ca330ca8f4bbdb87e0923"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256[18],string,string,uint8)",
          "decimals()",
          "enableTrading()",
          "updateMaxTransactionAmount(uint256)",
          "updateMaxWallet(uint256)",
          "updateMinimumTokensBeforeFeeTaken(uint256)",
          "updateProtectBlockCount(uint256)",
          "setAutomatedMarketMakerPair(address,bool)",
          "updateGasPriceLimit(uint256)",
          "disableTransferDelay()",
          "excludeFromMaxTransaction(address,bool)",
          "excludeFromFee(address)",
          "includeInFee(address)",
          "updateBuyFee(uint256,uint256,uint256)",
          "updateSellFee(uint256,uint256,uint256)",
          "updateTransferFee(uint256,uint256,uint256)",
          "setProtectBlockFee(uint256,uint256,uint256)",
          "updateStakingAddress(address)",
          "updatePlantingFundFeeAddress(address)",
          "updateLiquidityAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGC",
              "label": "stakingContract",
              "type": "t_contract(IStake)9924",
              "src": "contracts\\WGC.sol:361"
            },
            {
              "contract": "WGC",
              "label": "plantingFundFeeAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:362"
            },
            {
              "contract": "WGC",
              "label": "liquidityAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:363"
            },
            {
              "contract": "WGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\WGC.sol:365"
            },
            {
              "contract": "WGC",
              "label": "_tradingActiveBlock",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:367"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockCount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:368"
            },
            {
              "contract": "WGC",
              "label": "_gasPriceLimit",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:369"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:370"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:371"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:372"
            },
            {
              "contract": "WGC",
              "label": "tradingActive",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:373"
            },
            {
              "contract": "WGC",
              "label": "isExcludedFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:375"
            },
            {
              "contract": "WGC",
              "label": "buyOrSellSwitch",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:381"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:384"
            },
            {
              "contract": "WGC",
              "label": "_previousStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:385"
            },
            {
              "contract": "WGC",
              "label": "_liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:387"
            },
            {
              "contract": "WGC",
              "label": "_previousLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:388"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:390"
            },
            {
              "contract": "WGC",
              "label": "_previousPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:391"
            },
            {
              "contract": "WGC",
              "label": "buyStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:393"
            },
            {
              "contract": "WGC",
              "label": "buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:394"
            },
            {
              "contract": "WGC",
              "label": "buyPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:395"
            },
            {
              "contract": "WGC",
              "label": "sellStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:397"
            },
            {
              "contract": "WGC",
              "label": "sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:398"
            },
            {
              "contract": "WGC",
              "label": "sellPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:399"
            },
            {
              "contract": "WGC",
              "label": "transferStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:401"
            },
            {
              "contract": "WGC",
              "label": "transferLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:402"
            },
            {
              "contract": "WGC",
              "label": "transferPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:403"
            },
            {
              "contract": "WGC",
              "label": "isExcludedMaxTransactionAmount",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:405"
            },
            {
              "contract": "WGC",
              "label": "_holderLastTransferTimestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\WGC.sol:408"
            },
            {
              "contract": "WGC",
              "label": "_transferDelayEnabled",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:409"
            },
            {
              "contract": "WGC",
              "label": "_liquidityTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:411"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFeeTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:412"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFeeTokens",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:413"
            },
            {
              "contract": "WGC",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:417"
            },
            {
              "contract": "WGC",
              "label": "minimumFeeTokensToTake",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:419"
            },
            {
              "contract": "WGC",
              "label": "maxTransactionAmount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:420"
            },
            {
              "contract": "WGC",
              "label": "maxWallet",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:421"
            },
            {
              "contract": "WGC",
              "label": "pancakeRouter",
              "type": "t_contract(IPancakeRouter02)10315",
              "src": "contracts\\WGC.sol:423"
            },
            {
              "contract": "WGC",
              "label": "pancakePair",
              "type": "t_address",
              "src": "contracts\\WGC.sol:424"
            },
            {
              "contract": "WGC",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:426"
            }
          ],
          "types": {
            "t_contract(IStake)9924": {
              "label": "contract IStake"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_contract(IPancakeRouter02)10315": {
              "label": "contract IPancakeRouter02"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ISToken": {
        "src": "contracts\\WGCStaking.sol:11",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "distributeRewards(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGCStaking": {
        "src": "contracts\\WGCStaking.sol:15",
        "version": {
          "withMetadata": "2b5088b4547685994c63fde8632ae36ca4d7b44b655fe5fb7c05c209afe5d21f",
          "withoutMetadata": "d5da09982401765ee8b9aa1a7c73d4593526ee94dc8ae191c150dfe32e71c3b9",
          "linkedWithoutMetadata": "d5da09982401765ee8b9aa1a7c73d4593526ee94dc8ae191c150dfe32e71c3b9"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "updateConfiguration(address,address,uint256)",
          "initialize()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "depositReward(uint256)",
          "transferForeignToken(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGCStaking",
              "label": "token",
              "type": "t_contract(ERC20Upgradeable)5064",
              "src": "contracts\\WGCStaking.sol:21"
            },
            {
              "contract": "WGCStaking",
              "label": "sToken",
              "type": "t_contract(ISToken)12345",
              "src": "contracts\\WGCStaking.sol:22"
            },
            {
              "contract": "WGCStaking",
              "label": "minimumLimitToStake",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:23"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardHistory",
              "type": "t_mapping(t_uint256,t_struct(IAPY)12377_storage)",
              "src": "contracts\\WGCStaking.sol:28"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardTotalCount",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:29"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardBlocks",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCStaking.sol:30"
            }
          ],
          "types": {
            "t_contract(ERC20Upgradeable)5064": {
              "label": "contract ERC20Upgradeable"
            },
            "t_contract(ISToken)12345": {
              "label": "contract ISToken"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(IAPY)12377_storage)": {
              "label": "mapping(uint256 => struct WGCStaking.IAPY)"
            },
            "t_struct(IAPY)12377_storage": {
              "label": "struct WGCStaking.IAPY",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "growthRate",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "sWGC": {
        "src": "contracts\\sWGC.sol:10",
        "version": {
          "withMetadata": "6d25d308c1750841fea91b27fb41dc7782fc4759324216d7e3e1ca204f42bb7b",
          "withoutMetadata": "c34d1387b41ab1c5a76330dea906cb7b523c2f14305876f107643e646c68d4f2",
          "linkedWithoutMetadata": "c34d1387b41ab1c5a76330dea906cb7b523c2f14305876f107643e646c68d4f2"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IERC20Upgradeable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(string,string,address,uint256,uint8)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "isExcludedFromReward(address)",
          "totalRewards()",
          "tokenFromReflection(uint256)",
          "excludeFromReward(address)",
          "includeInReward(address)",
          "setStakingAddress(address)",
          "transferForeignToken(address,address)",
          "distributeRewards(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "sWGC",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:18"
            },
            {
              "contract": "sWGC",
              "label": "_tOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:19"
            },
            {
              "contract": "sWGC",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\sWGC.sol:20"
            },
            {
              "contract": "sWGC",
              "label": "_isExcluded",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\sWGC.sol:22"
            },
            {
              "contract": "sWGC",
              "label": "_excluded",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\sWGC.sol:23"
            },
            {
              "contract": "sWGC",
              "label": "stakingContract",
              "type": "t_address",
              "src": "contracts\\sWGC.sol:24"
            },
            {
              "contract": "sWGC",
              "label": "_tTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:27"
            },
            {
              "contract": "sWGC",
              "label": "_rTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:28"
            },
            {
              "contract": "sWGC",
              "label": "_tRewardTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:29"
            },
            {
              "contract": "sWGC",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:30"
            },
            {
              "contract": "sWGC",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:31"
            },
            {
              "contract": "sWGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\sWGC.sol:32"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:27",
        "inherit": [
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "TimersUpgradeable",
          "AddressUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "()",
          "supportsInterface(bytes4)",
          "name()",
          "version()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalThreshold()",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "relay(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorUpgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:40"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "_proposals",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:42"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:397"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)": {
              "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalCore)570_storage": {
              "label": "struct GovernorUpgradeable.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6952_storage"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6952_storage"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                }
              ]
            },
            "t_struct(BlockNumber)6952_storage": {
              "label": "struct TimersUpgradeable.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:14",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:230"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TimelockControllerUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:24",
        "version": {
          "withMetadata": "ce8c131622012e73e374823374b69596d2832d83de4f1fbc92108719c0d283ae",
          "withoutMetadata": "bdf1693fae76c4449cb7512b9b2fd8ca5e76013306c6541b97e66b9e2ff96847",
          "linkedWithoutMetadata": "bdf1693fae76c4449cb7512b9b2fd8ca5e76013306c6541b97e66b9e2ff96847"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:30"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:31"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:368"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:23",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "TimersUpgradeable",
          "SafeCastUpgradeable"
        ],
        "methods": [
          "COUNTING_MODE()",
          "propose(address[],uint256[],bytes[],string)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "proposals(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "quorumVotes()",
          "hasVoted(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "_proposalDetails",
              "type": "t_mapping(t_uint256,t_struct(ProposalDetails)2537_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:51"
            },
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:300"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ProposalDetails)2537_storage)": {
              "label": "mapping(uint256 => struct GovernorCompatibilityBravoUpgradeable.ProposalDetails)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalDetails)2537_storage": {
              "label": "struct GovernorCompatibilityBravoUpgradeable.ProposalDetails",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)3335_storage)"
                },
                {
                  "label": "descriptionHash",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_address,t_struct(Receipt)3335_storage)": {
              "label": "mapping(address => struct IGovernorCompatibilityBravoUpgradeable.Receipt)"
            },
            "t_struct(Receipt)3335_storage": {
              "label": "struct IGovernorCompatibilityBravoUpgradeable.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint96"
                }
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint96": {
              "label": "uint96"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumVotes()",
          "proposals(uint256)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:126"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorSettingsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:14",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "votingDelay()",
          "votingPeriod()",
          "proposalThreshold()",
          "setVotingDelay(uint256)",
          "setVotingPeriod(uint256)",
          "setProposalThreshold(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:15"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingPeriod",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:16"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_proposalThreshold",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:17"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:129"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorTimelockControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:27",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "state(uint256)",
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "updateTimelock(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelock",
              "type": "t_contract(TimelockControllerUpgradeable)2468",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:28"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelockIds",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:29"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:174"
            }
          ],
          "types": {
            "t_contract(TimelockControllerUpgradeable)2468": {
              "label": "contract TimelockControllerUpgradeable"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesQuorumFractionUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:15",
        "inherit": [
          "GovernorVotesUpgradeable",
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumNumerator()",
          "quorumDenominator()",
          "quorum(uint256)",
          "updateQuorumNumerator(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "_quorumNumerator",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:15",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "getVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "token",
              "type": "t_contract(IVotesUpgradeable)4377",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_contract(IVotesUpgradeable)4377": {
              "label": "contract IVotesUpgradeable"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorTimelockUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorTimelockUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\utils\\IVotesUpgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "278ed7fbbb82dedf6e0dd9b11d3f22ad9b60de94b98c64e62eec394765482a3b",
          "withoutMetadata": "891ef54eedab4f41f38b7e7dd0b8c57e03f94dc088a18514fcdfcb794001fd24",
          "linkedWithoutMetadata": "891ef54eedab4f41f38b7e7dd0b8c57e03f94dc088a18514fcdfcb794001fd24"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:28",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "IVotesUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)5174_storage)dyn_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:43"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)5174_storage)dyn_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:44"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:261"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)5174_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)5174_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)5174_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)6570_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:99"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)6570_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)6570_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\utils\\SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "0bc4cf6b9846dfde60c011ca63c8317823a939e400653bce1e5d0dec0eeadb84",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "e00ffd2605f9ec3194ab1fce5c31c218eadc5ace3d6e8939bbbce3cc543ade2c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "ac334f6525fda0371d2ce509b85f0407c7a052084c5b0c0d6b08fa13b70faad0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "c19b52a47ff83cc6ca5e7b4dba240fbc2f4fef926ab0dd85736aa0508b96c826",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\TimersUpgradeable.sol:9",
        "version": {
          "withMetadata": "f830e1de478338b875b928edcf10717bf4100b4bc0756a2ef13f7ae66c9c53bf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "fc38278c3d146f9dd5bae76a8716dd2ec59977a51c8de262135c36e76d51c0de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:118"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "479f355f2b7c32124363a6744088dcf4b9e480536c0d4616fca852285c0116fc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "5282d528aa64f488817880b00b2afef43d7bf71feb12c48a2d27a5b4bf0db2f4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "72f554b1e9df3cfac85fe1e53e4e33ef51276ebe86666e4a1be4cdf481592010",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BridgeBase": {
        "src": "contracts\\BridgeBase.sol:8",
        "version": {
          "withMetadata": "74b556388b2a0d5494f76b6c2977cee578559496f042a258b99cd56a4942172c",
          "withoutMetadata": "5e127e32be4fbf6e09a5b3ac5519331ee78c4047030472dcc6e420c37d847926",
          "linkedWithoutMetadata": "5e127e32be4fbf6e09a5b3ac5519331ee78c4047030472dcc6e420c37d847926"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "setFee(uint8,address)",
          "initialize(address,address)",
          "deposit(uint8,address,uint256)",
          "withdraw(address,uint256,uint256)",
          "getBalance(address)",
          "getServerBalance()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BridgeBase",
              "label": "admin",
              "type": "t_address",
              "src": "contracts\\BridgeBase.sol:10"
            },
            {
              "contract": "BridgeBase",
              "label": "feeWallet",
              "type": "t_address",
              "src": "contracts\\BridgeBase.sol:11"
            },
            {
              "contract": "BridgeBase",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)5142",
              "src": "contracts\\BridgeBase.sol:12"
            },
            {
              "contract": "BridgeBase",
              "label": "nonce",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\BridgeBase.sol:13"
            },
            {
              "contract": "BridgeBase",
              "label": "processedNonces",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "src": "contracts\\BridgeBase.sol:14"
            },
            {
              "contract": "BridgeBase",
              "label": "fee",
              "type": "t_uint8",
              "src": "contracts\\BridgeBase.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20Upgradeable)5142": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governor": {
        "src": "contracts\\Governor.sol:13",
        "version": {
          "withMetadata": "27f033479b000bf1263e3acf08c53eaa87d9ff9737410d97217f3e8a1e92e80e",
          "withoutMetadata": "69b663f97c9bd97461ee2d1a0c95d07ab9eb268edc0dc851ae125e01915c4c33",
          "linkedWithoutMetadata": "69b663f97c9bd97461ee2d1a0c95d07ab9eb268edc0dc851ae125e01915c4c33"
        },
        "inherit": [
          "GovernorTimelockControlUpgradeable",
          "GovernorVotesQuorumFractionUpgradeable",
          "GovernorVotesUpgradeable",
          "GovernorCompatibilityBravoUpgradeable",
          "GovernorSettingsUpgradeable",
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,address,address,uint256,uint256,uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "state(uint256)",
          "propose(address[],uint256[],bytes[],string)",
          "proposalThreshold()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockController": {
        "src": "contracts\\TimelockController.sol:23",
        "version": {
          "withMetadata": "5a753eadf64fb7d3bbd49140d8bf4c49e7d9aa127f1acb82dab62ce4c39c42ca",
          "withoutMetadata": "f5941afb2bcb1fea691e478ce2f5dcd363ff6394b7f6d3d33d7dc7b36c0cc182",
          "linkedWithoutMetadata": "f5941afb2bcb1fea691e478ce2f5dcd363ff6394b7f6d3d33d7dc7b36c0cc182"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address[],address[])",
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockController",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "contracts\\TimelockController.sol:30"
            },
            {
              "contract": "TimelockController",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "contracts\\TimelockController.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts\\WGC.sol:327",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "INIT_CODE_PAIR_HASH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts\\WGC.sol:218",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts\\WGC.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts\\WGC.sol:171",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStake": {
        "src": "contracts\\WGC.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "depositReward(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGC": {
        "src": "contracts\\WGC.sol:359",
        "version": {
          "withMetadata": "2e990c5d4bc6b0293b229de7a5efaffe24973d2bdfa4f01fcc1820223e75d497",
          "withoutMetadata": "b2c351270bed2d6450684a7521a13a0e32a97542c02ca330ca8f4bbdb87e0923",
          "linkedWithoutMetadata": "b2c351270bed2d6450684a7521a13a0e32a97542c02ca330ca8f4bbdb87e0923"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256[18],string,string,uint8)",
          "decimals()",
          "enableTrading()",
          "updateMaxTransactionAmount(uint256)",
          "updateMaxWallet(uint256)",
          "updateMinimumTokensBeforeFeeTaken(uint256)",
          "updateProtectBlockCount(uint256)",
          "setAutomatedMarketMakerPair(address,bool)",
          "updateGasPriceLimit(uint256)",
          "disableTransferDelay()",
          "excludeFromMaxTransaction(address,bool)",
          "excludeFromFee(address)",
          "includeInFee(address)",
          "updateBuyFee(uint256,uint256,uint256)",
          "updateSellFee(uint256,uint256,uint256)",
          "updateTransferFee(uint256,uint256,uint256)",
          "setProtectBlockFee(uint256,uint256,uint256)",
          "updateStakingAddress(address)",
          "updatePlantingFundFeeAddress(address)",
          "updateLiquidityAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGC",
              "label": "stakingContract",
              "type": "t_contract(IStake)9904",
              "src": "contracts\\WGC.sol:361"
            },
            {
              "contract": "WGC",
              "label": "plantingFundFeeAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:362"
            },
            {
              "contract": "WGC",
              "label": "liquidityAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:363"
            },
            {
              "contract": "WGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\WGC.sol:365"
            },
            {
              "contract": "WGC",
              "label": "_tradingActiveBlock",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:367"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockCount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:368"
            },
            {
              "contract": "WGC",
              "label": "_gasPriceLimit",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:369"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:370"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:371"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:372"
            },
            {
              "contract": "WGC",
              "label": "tradingActive",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:373"
            },
            {
              "contract": "WGC",
              "label": "isExcludedFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:375"
            },
            {
              "contract": "WGC",
              "label": "buyOrSellSwitch",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:381"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:384"
            },
            {
              "contract": "WGC",
              "label": "_previousStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:385"
            },
            {
              "contract": "WGC",
              "label": "_liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:387"
            },
            {
              "contract": "WGC",
              "label": "_previousLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:388"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:390"
            },
            {
              "contract": "WGC",
              "label": "_previousPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:391"
            },
            {
              "contract": "WGC",
              "label": "buyStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:393"
            },
            {
              "contract": "WGC",
              "label": "buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:394"
            },
            {
              "contract": "WGC",
              "label": "buyPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:395"
            },
            {
              "contract": "WGC",
              "label": "sellStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:397"
            },
            {
              "contract": "WGC",
              "label": "sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:398"
            },
            {
              "contract": "WGC",
              "label": "sellPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:399"
            },
            {
              "contract": "WGC",
              "label": "transferStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:401"
            },
            {
              "contract": "WGC",
              "label": "transferLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:402"
            },
            {
              "contract": "WGC",
              "label": "transferPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:403"
            },
            {
              "contract": "WGC",
              "label": "isExcludedMaxTransactionAmount",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:405"
            },
            {
              "contract": "WGC",
              "label": "_holderLastTransferTimestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\WGC.sol:408"
            },
            {
              "contract": "WGC",
              "label": "_transferDelayEnabled",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:409"
            },
            {
              "contract": "WGC",
              "label": "_liquidityTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:411"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFeeTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:412"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFeeTokens",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:413"
            },
            {
              "contract": "WGC",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:417"
            },
            {
              "contract": "WGC",
              "label": "minimumFeeTokensToTake",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:419"
            },
            {
              "contract": "WGC",
              "label": "maxTransactionAmount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:420"
            },
            {
              "contract": "WGC",
              "label": "maxWallet",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:421"
            },
            {
              "contract": "WGC",
              "label": "pancakeRouter",
              "type": "t_contract(IPancakeRouter02)10295",
              "src": "contracts\\WGC.sol:423"
            },
            {
              "contract": "WGC",
              "label": "pancakePair",
              "type": "t_address",
              "src": "contracts\\WGC.sol:424"
            },
            {
              "contract": "WGC",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:426"
            }
          ],
          "types": {
            "t_contract(IStake)9904": {
              "label": "contract IStake"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_contract(IPancakeRouter02)10295": {
              "label": "contract IPancakeRouter02"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ISToken": {
        "src": "contracts\\WGCStaking.sol:11",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "distributeRewards(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGCStaking": {
        "src": "contracts\\WGCStaking.sol:15",
        "version": {
          "withMetadata": "2b5088b4547685994c63fde8632ae36ca4d7b44b655fe5fb7c05c209afe5d21f",
          "withoutMetadata": "d5da09982401765ee8b9aa1a7c73d4593526ee94dc8ae191c150dfe32e71c3b9",
          "linkedWithoutMetadata": "d5da09982401765ee8b9aa1a7c73d4593526ee94dc8ae191c150dfe32e71c3b9"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "updateConfiguration(address,address,uint256)",
          "initialize()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "depositReward(uint256)",
          "transferForeignToken(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGCStaking",
              "label": "token",
              "type": "t_contract(ERC20Upgradeable)5064",
              "src": "contracts\\WGCStaking.sol:21"
            },
            {
              "contract": "WGCStaking",
              "label": "sToken",
              "type": "t_contract(ISToken)12325",
              "src": "contracts\\WGCStaking.sol:22"
            },
            {
              "contract": "WGCStaking",
              "label": "minimumLimitToStake",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:23"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardHistory",
              "type": "t_mapping(t_uint256,t_struct(IAPY)12357_storage)",
              "src": "contracts\\WGCStaking.sol:28"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardTotalCount",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:29"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardBlocks",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCStaking.sol:30"
            }
          ],
          "types": {
            "t_contract(ERC20Upgradeable)5064": {
              "label": "contract ERC20Upgradeable"
            },
            "t_contract(ISToken)12325": {
              "label": "contract ISToken"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(IAPY)12357_storage)": {
              "label": "mapping(uint256 => struct WGCStaking.IAPY)"
            },
            "t_struct(IAPY)12357_storage": {
              "label": "struct WGCStaking.IAPY",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "growthRate",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "sWGC": {
        "src": "contracts\\sWGC.sol:10",
        "version": {
          "withMetadata": "6d25d308c1750841fea91b27fb41dc7782fc4759324216d7e3e1ca204f42bb7b",
          "withoutMetadata": "c34d1387b41ab1c5a76330dea906cb7b523c2f14305876f107643e646c68d4f2",
          "linkedWithoutMetadata": "c34d1387b41ab1c5a76330dea906cb7b523c2f14305876f107643e646c68d4f2"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IERC20Upgradeable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(string,string,address,uint256,uint8)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "isExcludedFromReward(address)",
          "totalRewards()",
          "tokenFromReflection(uint256)",
          "excludeFromReward(address)",
          "includeInReward(address)",
          "setStakingAddress(address)",
          "transferForeignToken(address,address)",
          "distributeRewards(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "sWGC",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:18"
            },
            {
              "contract": "sWGC",
              "label": "_tOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:19"
            },
            {
              "contract": "sWGC",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\sWGC.sol:20"
            },
            {
              "contract": "sWGC",
              "label": "_isExcluded",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\sWGC.sol:22"
            },
            {
              "contract": "sWGC",
              "label": "_excluded",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\sWGC.sol:23"
            },
            {
              "contract": "sWGC",
              "label": "stakingContract",
              "type": "t_address",
              "src": "contracts\\sWGC.sol:24"
            },
            {
              "contract": "sWGC",
              "label": "_tTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:27"
            },
            {
              "contract": "sWGC",
              "label": "_rTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:28"
            },
            {
              "contract": "sWGC",
              "label": "_tRewardTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:29"
            },
            {
              "contract": "sWGC",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:30"
            },
            {
              "contract": "sWGC",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:31"
            },
            {
              "contract": "sWGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\sWGC.sol:32"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\utils\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "4b0f177c496688f7ed0b1d54e9133eb9f1cb142f12704a08443618d02e2e2718",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:9",
        "version": {
          "withMetadata": "5042bae5e89c14c68dd90ca2a237a1ee04ab9c918ab4500d03c6781b8456703c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "460d0b64289f1ca352bb6576a8bdb93297f0e4a0974237a5e91fad1f9b389288",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGCWrapper": {
        "src": "contracts\\Wrapper.sol:15",
        "version": {
          "withMetadata": "708e427765cb96ed3bc6c62fceb1c9e39143613ab31b83b9e37dde6f9a1164bb",
          "withoutMetadata": "d0f47579c86a0abb587f89cdff33377e1bdc74d95a6ab27d75aee60196b9c0ff",
          "linkedWithoutMetadata": "d0f47579c86a0abb587f89cdff33377e1bdc74d95a6ab27d75aee60196b9c0ff"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address,address)",
          "updateToken(address,address)",
          "exchange(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WGCWrapper",
            "src": "contracts\\Wrapper.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WGCWrapper",
              "label": "oldToken",
              "type": "t_contract(IERC20)182",
              "src": "contracts\\Wrapper.sol:18"
            },
            {
              "contract": "WGCWrapper",
              "label": "newToken",
              "type": "t_contract(IERC20)182",
              "src": "contracts\\Wrapper.sol:19"
            }
          ],
          "types": {
            "t_contract(IERC20)182": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin\\contracts\\governance\\utils\\IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "4cfafdd47a57ecc168f7eafcf736d8c530b998c3cd032674005dddbd13e8f8a8",
          "withoutMetadata": "2d7a6bc598ae369f57785185d428a062b5483b8e31c05f44bf06c297be3e5c46",
          "linkedWithoutMetadata": "2d7a6bc598ae369f57785185d428a062b5483b8e31c05f44bf06c297be3e5c46"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)865_storage)dyn_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)865_storage)dyn_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)865_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)865_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)865_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Wrapper": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Wrapper.sol:18",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "depositFor(address,uint256)",
          "withdrawTo(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Wrapper",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Wrapper.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlying",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Wrapper.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2371_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2371_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2371_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\utils\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "4b0f177c496688f7ed0b1d54e9133eb9f1cb142f12704a08443618d02e2e2718",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:9",
        "version": {
          "withMetadata": "5042bae5e89c14c68dd90ca2a237a1ee04ab9c918ab4500d03c6781b8456703c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin\\contracts\\utils\\Counters.sol:14",
        "version": {
          "withMetadata": "b8f3aff47715d662294e650fefe8996924e170c99312260f9c341bfa6269826e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "38f87e289c90b73ac248046a27b5fc57c9d8a40fe226abc8d62eebfa9960d6bd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin\\contracts\\utils\\cryptography\\ECDSA.sol:14",
        "version": {
          "withMetadata": "efbb2d4df377cc3e82856b875a477e5b7f066b8d35fdbf3aa19b4e0568ec053f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin\\contracts\\utils\\math\\Math.sol:9",
        "version": {
          "withMetadata": "7cd6496dd686fa2cfd5b0d6c85048ac25452fd72f33f623c93b02c01c613cb43",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeCast.sol:21",
        "version": {
          "withMetadata": "9de3a328ac5537e674315131ba4bfad29cf6ca53899789d235ad71d99029570d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "460d0b64289f1ca352bb6576a8bdb93297f0e4a0974237a5e91fad1f9b389288",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGCWrapper": {
        "src": "contracts\\Wrapper.sol:15",
        "version": {
          "withMetadata": "708e427765cb96ed3bc6c62fceb1c9e39143613ab31b83b9e37dde6f9a1164bb",
          "withoutMetadata": "d0f47579c86a0abb587f89cdff33377e1bdc74d95a6ab27d75aee60196b9c0ff",
          "linkedWithoutMetadata": "d0f47579c86a0abb587f89cdff33377e1bdc74d95a6ab27d75aee60196b9c0ff"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address,address)",
          "updateToken(address,address)",
          "exchange(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WGCWrapper",
            "src": "contracts\\Wrapper.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WGCWrapper",
              "label": "oldToken",
              "type": "t_contract(IERC20)848",
              "src": "contracts\\Wrapper.sol:18"
            },
            {
              "contract": "WGCWrapper",
              "label": "newToken",
              "type": "t_contract(IERC20)848",
              "src": "contracts\\Wrapper.sol:19"
            }
          ],
          "types": {
            "t_contract(IERC20)848": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "gWGC": {
        "src": "contracts\\gWGC.sol:9",
        "version": {
          "withMetadata": "6277756fb7e53b31292a8efcb2f56a4e9157aa8ea4aa3491c4c9623df06514a3",
          "withoutMetadata": "4d883e30ac882bf50343847792d577f09424e6f0a43a80de3f82af6b1a4be571",
          "linkedWithoutMetadata": "4d883e30ac882bf50343847792d577f09424e6f0a43a80de3f82af6b1a4be571"
        },
        "inherit": [
          "ERC20Wrapper",
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "gWGC",
            "src": "contracts\\gWGC.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotes": {
        "src": "@openzeppelin\\contracts\\governance\\utils\\IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "4cfafdd47a57ecc168f7eafcf736d8c530b998c3cd032674005dddbd13e8f8a8",
          "withoutMetadata": "2d7a6bc598ae369f57785185d428a062b5483b8e31c05f44bf06c297be3e5c46",
          "linkedWithoutMetadata": "2d7a6bc598ae369f57785185d428a062b5483b8e31c05f44bf06c297be3e5c46"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Votes": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Votes",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Votes.sol:36"
            },
            {
              "contract": "ERC20Votes",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)865_storage)dyn_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Votes.sol:37"
            },
            {
              "contract": "ERC20Votes",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)865_storage)dyn_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)865_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)865_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]"
            },
            "t_struct(Checkpoint)865_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Wrapper": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Wrapper.sol:18",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "depositFor(address,uint256)",
          "withdrawTo(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Wrapper",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Wrapper.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlying",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Wrapper.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)2371_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-ERC20Permit.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)2371_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)2371_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\utils\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "4b0f177c496688f7ed0b1d54e9133eb9f1cb142f12704a08443618d02e2e2718",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:9",
        "version": {
          "withMetadata": "5042bae5e89c14c68dd90ca2a237a1ee04ab9c918ab4500d03c6781b8456703c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin\\contracts\\utils\\Counters.sol:14",
        "version": {
          "withMetadata": "b8f3aff47715d662294e650fefe8996924e170c99312260f9c341bfa6269826e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "38f87e289c90b73ac248046a27b5fc57c9d8a40fe226abc8d62eebfa9960d6bd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin\\contracts\\utils\\cryptography\\ECDSA.sol:14",
        "version": {
          "withMetadata": "efbb2d4df377cc3e82856b875a477e5b7f066b8d35fdbf3aa19b4e0568ec053f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin\\contracts\\utils\\cryptography\\draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin\\contracts\\utils\\math\\Math.sol:9",
        "version": {
          "withMetadata": "7cd6496dd686fa2cfd5b0d6c85048ac25452fd72f33f623c93b02c01c613cb43",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeCast.sol:21",
        "version": {
          "withMetadata": "9de3a328ac5537e674315131ba4bfad29cf6ca53899789d235ad71d99029570d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "460d0b64289f1ca352bb6576a8bdb93297f0e4a0974237a5e91fad1f9b389288",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGCWrapper": {
        "src": "contracts\\Wrapper.sol:15",
        "version": {
          "withMetadata": "bc042029f591270c3d4c95e34a30655e9831d4a4438046aecb3ac8a1057be4e5",
          "withoutMetadata": "f197ba3c19ae96521f4d0c95552c0665dd5c7dd655e2a013a6642e8c58b9b473",
          "linkedWithoutMetadata": "f197ba3c19ae96521f4d0c95552c0665dd5c7dd655e2a013a6642e8c58b9b473"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address,address)",
          "updateToken(address,address)",
          "exchange(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WGCWrapper",
            "src": "contracts\\Wrapper.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WGCWrapper",
              "label": "oldToken",
              "type": "t_contract(IERC20)848",
              "src": "contracts\\Wrapper.sol:18"
            },
            {
              "contract": "WGCWrapper",
              "label": "newToken",
              "type": "t_contract(IERC20)848",
              "src": "contracts\\Wrapper.sol:19"
            }
          ],
          "types": {
            "t_contract(IERC20)848": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "gWGC": {
        "src": "contracts\\gWGC.sol:9",
        "version": {
          "withMetadata": "a009e4b858fb25f021aaba829e55a93b0e68a91e0ad21650587ac66ce3a0f132",
          "withoutMetadata": "e4ee3d35258fc86bb5182b739973a952717e6cd6cb75bb68b3217b63bb744462",
          "linkedWithoutMetadata": "e4ee3d35258fc86bb5182b739973a952717e6cd6cb75bb68b3217b63bb744462"
        },
        "inherit": [
          "ERC20Wrapper",
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "gWGC",
            "src": "contracts\\gWGC.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:27",
        "inherit": [
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "TimersUpgradeable",
          "AddressUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "()",
          "supportsInterface(bytes4)",
          "name()",
          "version()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalThreshold()",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "relay(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorUpgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:40"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "_proposals",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:42"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:397"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)": {
              "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalCore)570_storage": {
              "label": "struct GovernorUpgradeable.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6952_storage"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6952_storage"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                }
              ]
            },
            "t_struct(BlockNumber)6952_storage": {
              "label": "struct TimersUpgradeable.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:14",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:230"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TimelockControllerUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:24",
        "version": {
          "withMetadata": "ce8c131622012e73e374823374b69596d2832d83de4f1fbc92108719c0d283ae",
          "withoutMetadata": "bdf1693fae76c4449cb7512b9b2fd8ca5e76013306c6541b97e66b9e2ff96847",
          "linkedWithoutMetadata": "bdf1693fae76c4449cb7512b9b2fd8ca5e76013306c6541b97e66b9e2ff96847"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:30"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:31"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:368"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:23",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "TimersUpgradeable",
          "SafeCastUpgradeable"
        ],
        "methods": [
          "COUNTING_MODE()",
          "propose(address[],uint256[],bytes[],string)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "proposals(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "quorumVotes()",
          "hasVoted(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "_proposalDetails",
              "type": "t_mapping(t_uint256,t_struct(ProposalDetails)2537_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:51"
            },
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:300"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ProposalDetails)2537_storage)": {
              "label": "mapping(uint256 => struct GovernorCompatibilityBravoUpgradeable.ProposalDetails)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalDetails)2537_storage": {
              "label": "struct GovernorCompatibilityBravoUpgradeable.ProposalDetails",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)3335_storage)"
                },
                {
                  "label": "descriptionHash",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_address,t_struct(Receipt)3335_storage)": {
              "label": "mapping(address => struct IGovernorCompatibilityBravoUpgradeable.Receipt)"
            },
            "t_struct(Receipt)3335_storage": {
              "label": "struct IGovernorCompatibilityBravoUpgradeable.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint96"
                }
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint96": {
              "label": "uint96"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumVotes()",
          "proposals(uint256)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:126"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorSettingsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:14",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "votingDelay()",
          "votingPeriod()",
          "proposalThreshold()",
          "setVotingDelay(uint256)",
          "setVotingPeriod(uint256)",
          "setProposalThreshold(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:15"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingPeriod",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:16"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_proposalThreshold",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:17"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:129"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorTimelockControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:27",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "state(uint256)",
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "updateTimelock(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelock",
              "type": "t_contract(TimelockControllerUpgradeable)2468",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:28"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelockIds",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:29"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:174"
            }
          ],
          "types": {
            "t_contract(TimelockControllerUpgradeable)2468": {
              "label": "contract TimelockControllerUpgradeable"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesQuorumFractionUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:15",
        "inherit": [
          "GovernorVotesUpgradeable",
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumNumerator()",
          "quorumDenominator()",
          "quorum(uint256)",
          "updateQuorumNumerator(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "_quorumNumerator",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:15",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "getVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "token",
              "type": "t_contract(IVotesUpgradeable)4377",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_contract(IVotesUpgradeable)4377": {
              "label": "contract IVotesUpgradeable"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorTimelockUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorTimelockUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\utils\\IVotesUpgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "278ed7fbbb82dedf6e0dd9b11d3f22ad9b60de94b98c64e62eec394765482a3b",
          "withoutMetadata": "891ef54eedab4f41f38b7e7dd0b8c57e03f94dc088a18514fcdfcb794001fd24",
          "linkedWithoutMetadata": "891ef54eedab4f41f38b7e7dd0b8c57e03f94dc088a18514fcdfcb794001fd24"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:28",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "IVotesUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)5174_storage)dyn_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:43"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)5174_storage)dyn_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:44"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:261"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)5174_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)5174_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)5174_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)6570_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:99"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)6570_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)6570_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\utils\\SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "0bc4cf6b9846dfde60c011ca63c8317823a939e400653bce1e5d0dec0eeadb84",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "e00ffd2605f9ec3194ab1fce5c31c218eadc5ace3d6e8939bbbce3cc543ade2c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "ac334f6525fda0371d2ce509b85f0407c7a052084c5b0c0d6b08fa13b70faad0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "c19b52a47ff83cc6ca5e7b4dba240fbc2f4fef926ab0dd85736aa0508b96c826",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\TimersUpgradeable.sol:9",
        "version": {
          "withMetadata": "f830e1de478338b875b928edcf10717bf4100b4bc0756a2ef13f7ae66c9c53bf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "fc38278c3d146f9dd5bae76a8716dd2ec59977a51c8de262135c36e76d51c0de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:118"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "479f355f2b7c32124363a6744088dcf4b9e480536c0d4616fca852285c0116fc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "5282d528aa64f488817880b00b2afef43d7bf71feb12c48a2d27a5b4bf0db2f4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "72f554b1e9df3cfac85fe1e53e4e33ef51276ebe86666e4a1be4cdf481592010",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governor": {
        "src": "contracts\\Governor.sol:13",
        "version": {
          "withMetadata": "27f033479b000bf1263e3acf08c53eaa87d9ff9737410d97217f3e8a1e92e80e",
          "withoutMetadata": "69b663f97c9bd97461ee2d1a0c95d07ab9eb268edc0dc851ae125e01915c4c33",
          "linkedWithoutMetadata": "69b663f97c9bd97461ee2d1a0c95d07ab9eb268edc0dc851ae125e01915c4c33"
        },
        "inherit": [
          "GovernorTimelockControlUpgradeable",
          "GovernorVotesQuorumFractionUpgradeable",
          "GovernorVotesUpgradeable",
          "GovernorCompatibilityBravoUpgradeable",
          "GovernorSettingsUpgradeable",
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,address,address,uint256,uint256,uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "state(uint256)",
          "propose(address[],uint256[],bytes[],string)",
          "proposalThreshold()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockController": {
        "src": "contracts\\TimelockController.sol:23",
        "version": {
          "withMetadata": "5a753eadf64fb7d3bbd49140d8bf4c49e7d9aa127f1acb82dab62ce4c39c42ca",
          "withoutMetadata": "f5941afb2bcb1fea691e478ce2f5dcd363ff6394b7f6d3d33d7dc7b36c0cc182",
          "linkedWithoutMetadata": "f5941afb2bcb1fea691e478ce2f5dcd363ff6394b7f6d3d33d7dc7b36c0cc182"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address[],address[])",
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockController",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "contracts\\TimelockController.sol:30"
            },
            {
              "contract": "TimelockController",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "contracts\\TimelockController.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts\\WGC.sol:327",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "INIT_CODE_PAIR_HASH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts\\WGC.sol:218",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts\\WGC.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts\\WGC.sol:171",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStake": {
        "src": "contracts\\WGC.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "depositReward(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGC": {
        "src": "contracts\\WGC.sol:359",
        "version": {
          "withMetadata": "2e990c5d4bc6b0293b229de7a5efaffe24973d2bdfa4f01fcc1820223e75d497",
          "withoutMetadata": "b2c351270bed2d6450684a7521a13a0e32a97542c02ca330ca8f4bbdb87e0923",
          "linkedWithoutMetadata": "b2c351270bed2d6450684a7521a13a0e32a97542c02ca330ca8f4bbdb87e0923"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256[18],string,string,uint8)",
          "decimals()",
          "enableTrading()",
          "updateMaxTransactionAmount(uint256)",
          "updateMaxWallet(uint256)",
          "updateMinimumTokensBeforeFeeTaken(uint256)",
          "updateProtectBlockCount(uint256)",
          "setAutomatedMarketMakerPair(address,bool)",
          "updateGasPriceLimit(uint256)",
          "disableTransferDelay()",
          "excludeFromMaxTransaction(address,bool)",
          "excludeFromFee(address)",
          "includeInFee(address)",
          "updateBuyFee(uint256,uint256,uint256)",
          "updateSellFee(uint256,uint256,uint256)",
          "updateTransferFee(uint256,uint256,uint256)",
          "setProtectBlockFee(uint256,uint256,uint256)",
          "updateStakingAddress(address)",
          "updatePlantingFundFeeAddress(address)",
          "updateLiquidityAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGC",
              "label": "stakingContract",
              "type": "t_contract(IStake)9596",
              "src": "contracts\\WGC.sol:361"
            },
            {
              "contract": "WGC",
              "label": "plantingFundFeeAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:362"
            },
            {
              "contract": "WGC",
              "label": "liquidityAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:363"
            },
            {
              "contract": "WGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\WGC.sol:365"
            },
            {
              "contract": "WGC",
              "label": "_tradingActiveBlock",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:367"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockCount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:368"
            },
            {
              "contract": "WGC",
              "label": "_gasPriceLimit",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:369"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:370"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:371"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:372"
            },
            {
              "contract": "WGC",
              "label": "tradingActive",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:373"
            },
            {
              "contract": "WGC",
              "label": "isExcludedFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:375"
            },
            {
              "contract": "WGC",
              "label": "buyOrSellSwitch",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:381"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:384"
            },
            {
              "contract": "WGC",
              "label": "_previousStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:385"
            },
            {
              "contract": "WGC",
              "label": "_liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:387"
            },
            {
              "contract": "WGC",
              "label": "_previousLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:388"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:390"
            },
            {
              "contract": "WGC",
              "label": "_previousPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:391"
            },
            {
              "contract": "WGC",
              "label": "buyStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:393"
            },
            {
              "contract": "WGC",
              "label": "buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:394"
            },
            {
              "contract": "WGC",
              "label": "buyPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:395"
            },
            {
              "contract": "WGC",
              "label": "sellStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:397"
            },
            {
              "contract": "WGC",
              "label": "sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:398"
            },
            {
              "contract": "WGC",
              "label": "sellPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:399"
            },
            {
              "contract": "WGC",
              "label": "transferStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:401"
            },
            {
              "contract": "WGC",
              "label": "transferLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:402"
            },
            {
              "contract": "WGC",
              "label": "transferPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:403"
            },
            {
              "contract": "WGC",
              "label": "isExcludedMaxTransactionAmount",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:405"
            },
            {
              "contract": "WGC",
              "label": "_holderLastTransferTimestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\WGC.sol:408"
            },
            {
              "contract": "WGC",
              "label": "_transferDelayEnabled",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:409"
            },
            {
              "contract": "WGC",
              "label": "_liquidityTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:411"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFeeTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:412"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFeeTokens",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:413"
            },
            {
              "contract": "WGC",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:417"
            },
            {
              "contract": "WGC",
              "label": "minimumFeeTokensToTake",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:419"
            },
            {
              "contract": "WGC",
              "label": "maxTransactionAmount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:420"
            },
            {
              "contract": "WGC",
              "label": "maxWallet",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:421"
            },
            {
              "contract": "WGC",
              "label": "pancakeRouter",
              "type": "t_contract(IPancakeRouter02)9987",
              "src": "contracts\\WGC.sol:423"
            },
            {
              "contract": "WGC",
              "label": "pancakePair",
              "type": "t_address",
              "src": "contracts\\WGC.sol:424"
            },
            {
              "contract": "WGC",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:426"
            }
          ],
          "types": {
            "t_contract(IStake)9596": {
              "label": "contract IStake"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_contract(IPancakeRouter02)9987": {
              "label": "contract IPancakeRouter02"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ISToken": {
        "src": "contracts\\WGCStaking.sol:11",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "distributeRewards(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGCStaking": {
        "src": "contracts\\WGCStaking.sol:15",
        "version": {
          "withMetadata": "2b5088b4547685994c63fde8632ae36ca4d7b44b655fe5fb7c05c209afe5d21f",
          "withoutMetadata": "d5da09982401765ee8b9aa1a7c73d4593526ee94dc8ae191c150dfe32e71c3b9",
          "linkedWithoutMetadata": "d5da09982401765ee8b9aa1a7c73d4593526ee94dc8ae191c150dfe32e71c3b9"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "updateConfiguration(address,address,uint256)",
          "initialize()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "depositReward(uint256)",
          "transferForeignToken(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGCStaking",
              "label": "token",
              "type": "t_contract(ERC20Upgradeable)5064",
              "src": "contracts\\WGCStaking.sol:21"
            },
            {
              "contract": "WGCStaking",
              "label": "sToken",
              "type": "t_contract(ISToken)12017",
              "src": "contracts\\WGCStaking.sol:22"
            },
            {
              "contract": "WGCStaking",
              "label": "minimumLimitToStake",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:23"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardHistory",
              "type": "t_mapping(t_uint256,t_struct(IAPY)12049_storage)",
              "src": "contracts\\WGCStaking.sol:28"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardTotalCount",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:29"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardBlocks",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCStaking.sol:30"
            }
          ],
          "types": {
            "t_contract(ERC20Upgradeable)5064": {
              "label": "contract ERC20Upgradeable"
            },
            "t_contract(ISToken)12017": {
              "label": "contract ISToken"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(IAPY)12049_storage)": {
              "label": "mapping(uint256 => struct WGCStaking.IAPY)"
            },
            "t_struct(IAPY)12049_storage": {
              "label": "struct WGCStaking.IAPY",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "growthRate",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "sWGC": {
        "src": "contracts\\sWGC.sol:10",
        "version": {
          "withMetadata": "6d25d308c1750841fea91b27fb41dc7782fc4759324216d7e3e1ca204f42bb7b",
          "withoutMetadata": "c34d1387b41ab1c5a76330dea906cb7b523c2f14305876f107643e646c68d4f2",
          "linkedWithoutMetadata": "c34d1387b41ab1c5a76330dea906cb7b523c2f14305876f107643e646c68d4f2"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IERC20Upgradeable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(string,string,address,uint256,uint8)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "isExcludedFromReward(address)",
          "totalRewards()",
          "tokenFromReflection(uint256)",
          "excludeFromReward(address)",
          "includeInReward(address)",
          "setStakingAddress(address)",
          "transferForeignToken(address,address)",
          "distributeRewards(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "sWGC",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:18"
            },
            {
              "contract": "sWGC",
              "label": "_tOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:19"
            },
            {
              "contract": "sWGC",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\sWGC.sol:20"
            },
            {
              "contract": "sWGC",
              "label": "_isExcluded",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\sWGC.sol:22"
            },
            {
              "contract": "sWGC",
              "label": "_excluded",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\sWGC.sol:23"
            },
            {
              "contract": "sWGC",
              "label": "stakingContract",
              "type": "t_address",
              "src": "contracts\\sWGC.sol:24"
            },
            {
              "contract": "sWGC",
              "label": "_tTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:27"
            },
            {
              "contract": "sWGC",
              "label": "_rTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:28"
            },
            {
              "contract": "sWGC",
              "label": "_tRewardTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:29"
            },
            {
              "contract": "sWGC",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:30"
            },
            {
              "contract": "sWGC",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:31"
            },
            {
              "contract": "sWGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\sWGC.sol:32"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "278ed7fbbb82dedf6e0dd9b11d3f22ad9b60de94b98c64e62eec394765482a3b",
          "withoutMetadata": "891ef54eedab4f41f38b7e7dd0b8c57e03f94dc088a18514fcdfcb794001fd24",
          "linkedWithoutMetadata": "891ef54eedab4f41f38b7e7dd0b8c57e03f94dc088a18514fcdfcb794001fd24"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\utils\\SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "0bc4cf6b9846dfde60c011ca63c8317823a939e400653bce1e5d0dec0eeadb84",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "e00ffd2605f9ec3194ab1fce5c31c218eadc5ace3d6e8939bbbce3cc543ade2c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "72f554b1e9df3cfac85fe1e53e4e33ef51276ebe86666e4a1be4cdf481592010",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISToken": {
        "src": "contracts\\WGCStaking.sol:11",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "distributeRewards(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGCStaking": {
        "src": "contracts\\WGCStaking.sol:15",
        "version": {
          "withMetadata": "2b5088b4547685994c63fde8632ae36ca4d7b44b655fe5fb7c05c209afe5d21f",
          "withoutMetadata": "d5da09982401765ee8b9aa1a7c73d4593526ee94dc8ae191c150dfe32e71c3b9",
          "linkedWithoutMetadata": "d5da09982401765ee8b9aa1a7c73d4593526ee94dc8ae191c150dfe32e71c3b9"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "updateConfiguration(address,address,uint256)",
          "initialize()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "depositReward(uint256)",
          "transferForeignToken(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGCStaking",
              "label": "token",
              "type": "t_contract(ERC20Upgradeable)810",
              "src": "contracts\\WGCStaking.sol:21"
            },
            {
              "contract": "WGCStaking",
              "label": "sToken",
              "type": "t_contract(ISToken)1754",
              "src": "contracts\\WGCStaking.sol:22"
            },
            {
              "contract": "WGCStaking",
              "label": "minimumLimitToStake",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:23"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardHistory",
              "type": "t_mapping(t_uint256,t_struct(IAPY)1786_storage)",
              "src": "contracts\\WGCStaking.sol:28"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardTotalCount",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:29"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardBlocks",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCStaking.sol:30"
            }
          ],
          "types": {
            "t_contract(ERC20Upgradeable)810": {
              "label": "contract ERC20Upgradeable"
            },
            "t_contract(ISToken)1754": {
              "label": "contract ISToken"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(IAPY)1786_storage)": {
              "label": "mapping(uint256 => struct WGCStaking.IAPY)"
            },
            "t_struct(IAPY)1786_storage": {
              "label": "struct WGCStaking.IAPY",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "growthRate",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "278ed7fbbb82dedf6e0dd9b11d3f22ad9b60de94b98c64e62eec394765482a3b",
          "withoutMetadata": "891ef54eedab4f41f38b7e7dd0b8c57e03f94dc088a18514fcdfcb794001fd24",
          "linkedWithoutMetadata": "891ef54eedab4f41f38b7e7dd0b8c57e03f94dc088a18514fcdfcb794001fd24"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "e00ffd2605f9ec3194ab1fce5c31c218eadc5ace3d6e8939bbbce3cc543ade2c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "72f554b1e9df3cfac85fe1e53e4e33ef51276ebe86666e4a1be4cdf481592010",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts\\WGC.sol:327",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "INIT_CODE_PAIR_HASH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts\\WGC.sol:218",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts\\WGC.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts\\WGC.sol:171",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStake": {
        "src": "contracts\\WGC.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "depositReward(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGC": {
        "src": "contracts\\WGC.sol:359",
        "version": {
          "withMetadata": "2e990c5d4bc6b0293b229de7a5efaffe24973d2bdfa4f01fcc1820223e75d497",
          "withoutMetadata": "b2c351270bed2d6450684a7521a13a0e32a97542c02ca330ca8f4bbdb87e0923",
          "linkedWithoutMetadata": "b2c351270bed2d6450684a7521a13a0e32a97542c02ca330ca8f4bbdb87e0923"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256[18],string,string,uint8)",
          "decimals()",
          "enableTrading()",
          "updateMaxTransactionAmount(uint256)",
          "updateMaxWallet(uint256)",
          "updateMinimumTokensBeforeFeeTaken(uint256)",
          "updateProtectBlockCount(uint256)",
          "setAutomatedMarketMakerPair(address,bool)",
          "updateGasPriceLimit(uint256)",
          "disableTransferDelay()",
          "excludeFromMaxTransaction(address,bool)",
          "excludeFromFee(address)",
          "includeInFee(address)",
          "updateBuyFee(uint256,uint256,uint256)",
          "updateSellFee(uint256,uint256,uint256)",
          "updateTransferFee(uint256,uint256,uint256)",
          "setProtectBlockFee(uint256,uint256,uint256)",
          "updateStakingAddress(address)",
          "updatePlantingFundFeeAddress(address)",
          "updateLiquidityAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGC",
              "label": "stakingContract",
              "type": "t_contract(IStake)1524",
              "src": "contracts\\WGC.sol:361"
            },
            {
              "contract": "WGC",
              "label": "plantingFundFeeAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:362"
            },
            {
              "contract": "WGC",
              "label": "liquidityAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:363"
            },
            {
              "contract": "WGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\WGC.sol:365"
            },
            {
              "contract": "WGC",
              "label": "_tradingActiveBlock",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:367"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockCount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:368"
            },
            {
              "contract": "WGC",
              "label": "_gasPriceLimit",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:369"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:370"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:371"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:372"
            },
            {
              "contract": "WGC",
              "label": "tradingActive",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:373"
            },
            {
              "contract": "WGC",
              "label": "isExcludedFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:375"
            },
            {
              "contract": "WGC",
              "label": "buyOrSellSwitch",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:381"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:384"
            },
            {
              "contract": "WGC",
              "label": "_previousStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:385"
            },
            {
              "contract": "WGC",
              "label": "_liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:387"
            },
            {
              "contract": "WGC",
              "label": "_previousLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:388"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:390"
            },
            {
              "contract": "WGC",
              "label": "_previousPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:391"
            },
            {
              "contract": "WGC",
              "label": "buyStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:393"
            },
            {
              "contract": "WGC",
              "label": "buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:394"
            },
            {
              "contract": "WGC",
              "label": "buyPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:395"
            },
            {
              "contract": "WGC",
              "label": "sellStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:397"
            },
            {
              "contract": "WGC",
              "label": "sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:398"
            },
            {
              "contract": "WGC",
              "label": "sellPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:399"
            },
            {
              "contract": "WGC",
              "label": "transferStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:401"
            },
            {
              "contract": "WGC",
              "label": "transferLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:402"
            },
            {
              "contract": "WGC",
              "label": "transferPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:403"
            },
            {
              "contract": "WGC",
              "label": "isExcludedMaxTransactionAmount",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:405"
            },
            {
              "contract": "WGC",
              "label": "_holderLastTransferTimestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\WGC.sol:408"
            },
            {
              "contract": "WGC",
              "label": "_transferDelayEnabled",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:409"
            },
            {
              "contract": "WGC",
              "label": "_liquidityTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:411"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFeeTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:412"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFeeTokens",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:413"
            },
            {
              "contract": "WGC",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:417"
            },
            {
              "contract": "WGC",
              "label": "minimumFeeTokensToTake",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:419"
            },
            {
              "contract": "WGC",
              "label": "maxTransactionAmount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:420"
            },
            {
              "contract": "WGC",
              "label": "maxWallet",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:421"
            },
            {
              "contract": "WGC",
              "label": "pancakeRouter",
              "type": "t_contract(IPancakeRouter02)1915",
              "src": "contracts\\WGC.sol:423"
            },
            {
              "contract": "WGC",
              "label": "pancakePair",
              "type": "t_address",
              "src": "contracts\\WGC.sol:424"
            },
            {
              "contract": "WGC",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:426"
            }
          ],
          "types": {
            "t_contract(IStake)1524": {
              "label": "contract IStake"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_contract(IPancakeRouter02)1915": {
              "label": "contract IPancakeRouter02"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\utils\\IVotesUpgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "e00ffd2605f9ec3194ab1fce5c31c218eadc5ace3d6e8939bbbce3cc543ade2c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "ac334f6525fda0371d2ce509b85f0407c7a052084c5b0c0d6b08fa13b70faad0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "c19b52a47ff83cc6ca5e7b4dba240fbc2f4fef926ab0dd85736aa0508b96c826",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "fc38278c3d146f9dd5bae76a8716dd2ec59977a51c8de262135c36e76d51c0de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:118"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "479f355f2b7c32124363a6744088dcf4b9e480536c0d4616fca852285c0116fc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "5282d528aa64f488817880b00b2afef43d7bf71feb12c48a2d27a5b4bf0db2f4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "72f554b1e9df3cfac85fe1e53e4e33ef51276ebe86666e4a1be4cdf481592010",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "sWGC": {
        "src": "contracts\\sWGC.sol:17",
        "version": {
          "withMetadata": "3c3049ed0079b31ec8b38af5106bf60eb906443487f130068bfb76b8c28c08b6",
          "withoutMetadata": "aec1b4e03345bdfa3b108e278bae3d5087272f76d34a6b6b9c718636b7152673",
          "linkedWithoutMetadata": "aec1b4e03345bdfa3b108e278bae3d5087272f76d34a6b6b9c718636b7152673"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "EIP712Upgradeable",
          "Initializable",
          "IERC20Upgradeable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "SafeMathUpgradeable",
          "ECDSAUpgradeable",
          "SafeCastUpgradeable",
          "MathUpgradeable"
        ],
        "methods": [
          "initialize(string,string,address,uint256,uint8)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "isExcludedFromReward(address)",
          "totalRewards()",
          "tokenFromReflection(uint256)",
          "excludeFromReward(address)",
          "includeInReward(address)",
          "setStakingAddress(address)",
          "transferForeignToken(address,address)",
          "distributeRewards(uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()",
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "sWGC",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\sWGC.sol:42"
            },
            {
              "contract": "sWGC",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)2327_storage)dyn_storage)",
              "src": "contracts\\sWGC.sol:43"
            },
            {
              "contract": "sWGC",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)2327_storage)dyn_storage",
              "src": "contracts\\sWGC.sol:44"
            },
            {
              "contract": "sWGC",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)644_storage)",
              "src": "contracts\\sWGC.sol:45"
            },
            {
              "contract": "sWGC",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:52"
            },
            {
              "contract": "sWGC",
              "label": "_tOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:53"
            },
            {
              "contract": "sWGC",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\sWGC.sol:54"
            },
            {
              "contract": "sWGC",
              "label": "_isExcluded",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\sWGC.sol:56"
            },
            {
              "contract": "sWGC",
              "label": "_excluded",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\sWGC.sol:57"
            },
            {
              "contract": "sWGC",
              "label": "stakingContract",
              "type": "t_address",
              "src": "contracts\\sWGC.sol:58"
            },
            {
              "contract": "sWGC",
              "label": "_tTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:61"
            },
            {
              "contract": "sWGC",
              "label": "_rTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:62"
            },
            {
              "contract": "sWGC",
              "label": "_tRewardTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:63"
            },
            {
              "contract": "sWGC",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:64"
            },
            {
              "contract": "sWGC",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:65"
            },
            {
              "contract": "sWGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\sWGC.sol:66"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)2327_storage)dyn_storage)": {
              "label": "mapping(address => struct sWGC.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)2327_storage)dyn_storage": {
              "label": "struct sWGC.Checkpoint[]"
            },
            "t_struct(Checkpoint)2327_storage": {
              "label": "struct sWGC.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_mapping(t_address,t_struct(Counter)644_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_struct(Counter)644_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\utils\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "4b0f177c496688f7ed0b1d54e9133eb9f1cb142f12704a08443618d02e2e2718",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:9",
        "version": {
          "withMetadata": "5042bae5e89c14c68dd90ca2a237a1ee04ab9c918ab4500d03c6781b8456703c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "460d0b64289f1ca352bb6576a8bdb93297f0e4a0974237a5e91fad1f9b389288",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGCWrapper": {
        "src": "contracts\\Wrapper.sol:15",
        "version": {
          "withMetadata": "bc042029f591270c3d4c95e34a30655e9831d4a4438046aecb3ac8a1057be4e5",
          "withoutMetadata": "f197ba3c19ae96521f4d0c95552c0665dd5c7dd655e2a013a6642e8c58b9b473",
          "linkedWithoutMetadata": "f197ba3c19ae96521f4d0c95552c0665dd5c7dd655e2a013a6642e8c58b9b473"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address,address)",
          "updateToken(address,address)",
          "exchange(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WGCWrapper",
            "src": "contracts\\Wrapper.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WGCWrapper",
              "label": "oldToken",
              "type": "t_contract(IERC20)182",
              "src": "contracts\\Wrapper.sol:18"
            },
            {
              "contract": "WGCWrapper",
              "label": "newToken",
              "type": "t_contract(IERC20)182",
              "src": "contracts\\Wrapper.sol:19"
            }
          ],
          "types": {
            "t_contract(IERC20)182": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:27",
        "inherit": [
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "TimersUpgradeable",
          "AddressUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "()",
          "supportsInterface(bytes4)",
          "name()",
          "version()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalThreshold()",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "relay(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorUpgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:40"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "_proposals",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:42"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:397"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)": {
              "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalCore)570_storage": {
              "label": "struct GovernorUpgradeable.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6952_storage"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6952_storage"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                }
              ]
            },
            "t_struct(BlockNumber)6952_storage": {
              "label": "struct TimersUpgradeable.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:14",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:230"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TimelockControllerUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:24",
        "version": {
          "withMetadata": "ce8c131622012e73e374823374b69596d2832d83de4f1fbc92108719c0d283ae",
          "withoutMetadata": "bdf1693fae76c4449cb7512b9b2fd8ca5e76013306c6541b97e66b9e2ff96847",
          "linkedWithoutMetadata": "bdf1693fae76c4449cb7512b9b2fd8ca5e76013306c6541b97e66b9e2ff96847"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:30"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:31"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:368"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:23",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "TimersUpgradeable",
          "SafeCastUpgradeable"
        ],
        "methods": [
          "COUNTING_MODE()",
          "propose(address[],uint256[],bytes[],string)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "proposals(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "quorumVotes()",
          "hasVoted(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "_proposalDetails",
              "type": "t_mapping(t_uint256,t_struct(ProposalDetails)2537_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:51"
            },
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:300"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ProposalDetails)2537_storage)": {
              "label": "mapping(uint256 => struct GovernorCompatibilityBravoUpgradeable.ProposalDetails)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalDetails)2537_storage": {
              "label": "struct GovernorCompatibilityBravoUpgradeable.ProposalDetails",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)3335_storage)"
                },
                {
                  "label": "descriptionHash",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_address,t_struct(Receipt)3335_storage)": {
              "label": "mapping(address => struct IGovernorCompatibilityBravoUpgradeable.Receipt)"
            },
            "t_struct(Receipt)3335_storage": {
              "label": "struct IGovernorCompatibilityBravoUpgradeable.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint96"
                }
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint96": {
              "label": "uint96"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumVotes()",
          "proposals(uint256)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:126"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorSettingsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:14",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "votingDelay()",
          "votingPeriod()",
          "proposalThreshold()",
          "setVotingDelay(uint256)",
          "setVotingPeriod(uint256)",
          "setProposalThreshold(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:15"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingPeriod",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:16"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_proposalThreshold",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:17"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:129"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorTimelockControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:27",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "state(uint256)",
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "updateTimelock(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelock",
              "type": "t_contract(TimelockControllerUpgradeable)2468",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:28"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelockIds",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:29"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:174"
            }
          ],
          "types": {
            "t_contract(TimelockControllerUpgradeable)2468": {
              "label": "contract TimelockControllerUpgradeable"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesQuorumFractionUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:15",
        "inherit": [
          "GovernorVotesUpgradeable",
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumNumerator()",
          "quorumDenominator()",
          "quorum(uint256)",
          "updateQuorumNumerator(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "_quorumNumerator",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:15",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "getVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "token",
              "type": "t_contract(IVotesUpgradeable)4377",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_contract(IVotesUpgradeable)4377": {
              "label": "contract IVotesUpgradeable"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorTimelockUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorTimelockUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\utils\\IVotesUpgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "278ed7fbbb82dedf6e0dd9b11d3f22ad9b60de94b98c64e62eec394765482a3b",
          "withoutMetadata": "891ef54eedab4f41f38b7e7dd0b8c57e03f94dc088a18514fcdfcb794001fd24",
          "linkedWithoutMetadata": "891ef54eedab4f41f38b7e7dd0b8c57e03f94dc088a18514fcdfcb794001fd24"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:28",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "IVotesUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)5174_storage)dyn_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:43"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)5174_storage)dyn_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:44"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:261"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)5174_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)5174_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)5174_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)6570_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:99"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)6570_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)6570_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\utils\\SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "0bc4cf6b9846dfde60c011ca63c8317823a939e400653bce1e5d0dec0eeadb84",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "e00ffd2605f9ec3194ab1fce5c31c218eadc5ace3d6e8939bbbce3cc543ade2c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "ac334f6525fda0371d2ce509b85f0407c7a052084c5b0c0d6b08fa13b70faad0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "c19b52a47ff83cc6ca5e7b4dba240fbc2f4fef926ab0dd85736aa0508b96c826",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\TimersUpgradeable.sol:9",
        "version": {
          "withMetadata": "f830e1de478338b875b928edcf10717bf4100b4bc0756a2ef13f7ae66c9c53bf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "fc38278c3d146f9dd5bae76a8716dd2ec59977a51c8de262135c36e76d51c0de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:118"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "479f355f2b7c32124363a6744088dcf4b9e480536c0d4616fca852285c0116fc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "5282d528aa64f488817880b00b2afef43d7bf71feb12c48a2d27a5b4bf0db2f4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "72f554b1e9df3cfac85fe1e53e4e33ef51276ebe86666e4a1be4cdf481592010",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governor": {
        "src": "contracts\\Governor.sol:13",
        "version": {
          "withMetadata": "27f033479b000bf1263e3acf08c53eaa87d9ff9737410d97217f3e8a1e92e80e",
          "withoutMetadata": "69b663f97c9bd97461ee2d1a0c95d07ab9eb268edc0dc851ae125e01915c4c33",
          "linkedWithoutMetadata": "69b663f97c9bd97461ee2d1a0c95d07ab9eb268edc0dc851ae125e01915c4c33"
        },
        "inherit": [
          "GovernorTimelockControlUpgradeable",
          "GovernorVotesQuorumFractionUpgradeable",
          "GovernorVotesUpgradeable",
          "GovernorCompatibilityBravoUpgradeable",
          "GovernorSettingsUpgradeable",
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,address,address,uint256,uint256,uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "state(uint256)",
          "propose(address[],uint256[],bytes[],string)",
          "proposalThreshold()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockController": {
        "src": "contracts\\TimelockController.sol:23",
        "version": {
          "withMetadata": "5a753eadf64fb7d3bbd49140d8bf4c49e7d9aa127f1acb82dab62ce4c39c42ca",
          "withoutMetadata": "f5941afb2bcb1fea691e478ce2f5dcd363ff6394b7f6d3d33d7dc7b36c0cc182",
          "linkedWithoutMetadata": "f5941afb2bcb1fea691e478ce2f5dcd363ff6394b7f6d3d33d7dc7b36c0cc182"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address[],address[])",
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockController",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "contracts\\TimelockController.sol:30"
            },
            {
              "contract": "TimelockController",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "contracts\\TimelockController.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts\\WGC.sol:327",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "INIT_CODE_PAIR_HASH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts\\WGC.sol:218",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts\\WGC.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts\\WGC.sol:171",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStake": {
        "src": "contracts\\WGC.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "depositReward(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGC": {
        "src": "contracts\\WGC.sol:359",
        "version": {
          "withMetadata": "2e990c5d4bc6b0293b229de7a5efaffe24973d2bdfa4f01fcc1820223e75d497",
          "withoutMetadata": "b2c351270bed2d6450684a7521a13a0e32a97542c02ca330ca8f4bbdb87e0923",
          "linkedWithoutMetadata": "b2c351270bed2d6450684a7521a13a0e32a97542c02ca330ca8f4bbdb87e0923"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256[18],string,string,uint8)",
          "decimals()",
          "enableTrading()",
          "updateMaxTransactionAmount(uint256)",
          "updateMaxWallet(uint256)",
          "updateMinimumTokensBeforeFeeTaken(uint256)",
          "updateProtectBlockCount(uint256)",
          "setAutomatedMarketMakerPair(address,bool)",
          "updateGasPriceLimit(uint256)",
          "disableTransferDelay()",
          "excludeFromMaxTransaction(address,bool)",
          "excludeFromFee(address)",
          "includeInFee(address)",
          "updateBuyFee(uint256,uint256,uint256)",
          "updateSellFee(uint256,uint256,uint256)",
          "updateTransferFee(uint256,uint256,uint256)",
          "setProtectBlockFee(uint256,uint256,uint256)",
          "updateStakingAddress(address)",
          "updatePlantingFundFeeAddress(address)",
          "updateLiquidityAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGC",
              "label": "stakingContract",
              "type": "t_contract(IStake)9596",
              "src": "contracts\\WGC.sol:361"
            },
            {
              "contract": "WGC",
              "label": "plantingFundFeeAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:362"
            },
            {
              "contract": "WGC",
              "label": "liquidityAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:363"
            },
            {
              "contract": "WGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\WGC.sol:365"
            },
            {
              "contract": "WGC",
              "label": "_tradingActiveBlock",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:367"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockCount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:368"
            },
            {
              "contract": "WGC",
              "label": "_gasPriceLimit",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:369"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:370"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:371"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:372"
            },
            {
              "contract": "WGC",
              "label": "tradingActive",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:373"
            },
            {
              "contract": "WGC",
              "label": "isExcludedFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:375"
            },
            {
              "contract": "WGC",
              "label": "buyOrSellSwitch",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:381"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:384"
            },
            {
              "contract": "WGC",
              "label": "_previousStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:385"
            },
            {
              "contract": "WGC",
              "label": "_liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:387"
            },
            {
              "contract": "WGC",
              "label": "_previousLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:388"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:390"
            },
            {
              "contract": "WGC",
              "label": "_previousPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:391"
            },
            {
              "contract": "WGC",
              "label": "buyStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:393"
            },
            {
              "contract": "WGC",
              "label": "buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:394"
            },
            {
              "contract": "WGC",
              "label": "buyPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:395"
            },
            {
              "contract": "WGC",
              "label": "sellStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:397"
            },
            {
              "contract": "WGC",
              "label": "sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:398"
            },
            {
              "contract": "WGC",
              "label": "sellPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:399"
            },
            {
              "contract": "WGC",
              "label": "transferStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:401"
            },
            {
              "contract": "WGC",
              "label": "transferLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:402"
            },
            {
              "contract": "WGC",
              "label": "transferPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:403"
            },
            {
              "contract": "WGC",
              "label": "isExcludedMaxTransactionAmount",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:405"
            },
            {
              "contract": "WGC",
              "label": "_holderLastTransferTimestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\WGC.sol:408"
            },
            {
              "contract": "WGC",
              "label": "_transferDelayEnabled",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:409"
            },
            {
              "contract": "WGC",
              "label": "_liquidityTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:411"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFeeTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:412"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFeeTokens",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:413"
            },
            {
              "contract": "WGC",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:417"
            },
            {
              "contract": "WGC",
              "label": "minimumFeeTokensToTake",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:419"
            },
            {
              "contract": "WGC",
              "label": "maxTransactionAmount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:420"
            },
            {
              "contract": "WGC",
              "label": "maxWallet",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:421"
            },
            {
              "contract": "WGC",
              "label": "pancakeRouter",
              "type": "t_contract(IPancakeRouter02)9987",
              "src": "contracts\\WGC.sol:423"
            },
            {
              "contract": "WGC",
              "label": "pancakePair",
              "type": "t_address",
              "src": "contracts\\WGC.sol:424"
            },
            {
              "contract": "WGC",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:426"
            }
          ],
          "types": {
            "t_contract(IStake)9596": {
              "label": "contract IStake"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_contract(IPancakeRouter02)9987": {
              "label": "contract IPancakeRouter02"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ISToken": {
        "src": "contracts\\WGCStaking.sol:11",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "distributeRewards(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGCStaking": {
        "src": "contracts\\WGCStaking.sol:15",
        "version": {
          "withMetadata": "2b5088b4547685994c63fde8632ae36ca4d7b44b655fe5fb7c05c209afe5d21f",
          "withoutMetadata": "d5da09982401765ee8b9aa1a7c73d4593526ee94dc8ae191c150dfe32e71c3b9",
          "linkedWithoutMetadata": "d5da09982401765ee8b9aa1a7c73d4593526ee94dc8ae191c150dfe32e71c3b9"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "updateConfiguration(address,address,uint256)",
          "initialize()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "depositReward(uint256)",
          "transferForeignToken(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGCStaking",
              "label": "token",
              "type": "t_contract(ERC20Upgradeable)5064",
              "src": "contracts\\WGCStaking.sol:21"
            },
            {
              "contract": "WGCStaking",
              "label": "sToken",
              "type": "t_contract(ISToken)12017",
              "src": "contracts\\WGCStaking.sol:22"
            },
            {
              "contract": "WGCStaking",
              "label": "minimumLimitToStake",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:23"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardHistory",
              "type": "t_mapping(t_uint256,t_struct(IAPY)12049_storage)",
              "src": "contracts\\WGCStaking.sol:28"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardTotalCount",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:29"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardBlocks",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCStaking.sol:30"
            }
          ],
          "types": {
            "t_contract(ERC20Upgradeable)5064": {
              "label": "contract ERC20Upgradeable"
            },
            "t_contract(ISToken)12017": {
              "label": "contract ISToken"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(IAPY)12049_storage)": {
              "label": "mapping(uint256 => struct WGCStaking.IAPY)"
            },
            "t_struct(IAPY)12049_storage": {
              "label": "struct WGCStaking.IAPY",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "growthRate",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "sWGC": {
        "src": "contracts\\sWGC.sol:17",
        "version": {
          "withMetadata": "3c3049ed0079b31ec8b38af5106bf60eb906443487f130068bfb76b8c28c08b6",
          "withoutMetadata": "aec1b4e03345bdfa3b108e278bae3d5087272f76d34a6b6b9c718636b7152673",
          "linkedWithoutMetadata": "aec1b4e03345bdfa3b108e278bae3d5087272f76d34a6b6b9c718636b7152673"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "EIP712Upgradeable",
          "Initializable",
          "IERC20Upgradeable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "SafeMathUpgradeable",
          "ECDSAUpgradeable",
          "SafeCastUpgradeable",
          "MathUpgradeable"
        ],
        "methods": [
          "initialize(string,string,address,uint256,uint8)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "isExcludedFromReward(address)",
          "totalRewards()",
          "tokenFromReflection(uint256)",
          "excludeFromReward(address)",
          "includeInReward(address)",
          "setStakingAddress(address)",
          "transferForeignToken(address,address)",
          "distributeRewards(uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()",
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "sWGC",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\sWGC.sol:42"
            },
            {
              "contract": "sWGC",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)12441_storage)dyn_storage)",
              "src": "contracts\\sWGC.sol:43"
            },
            {
              "contract": "sWGC",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)12441_storage)dyn_storage",
              "src": "contracts\\sWGC.sol:44"
            },
            {
              "contract": "sWGC",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)6570_storage)",
              "src": "contracts\\sWGC.sol:45"
            },
            {
              "contract": "sWGC",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:52"
            },
            {
              "contract": "sWGC",
              "label": "_tOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:53"
            },
            {
              "contract": "sWGC",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\sWGC.sol:54"
            },
            {
              "contract": "sWGC",
              "label": "_isExcluded",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\sWGC.sol:56"
            },
            {
              "contract": "sWGC",
              "label": "_excluded",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\sWGC.sol:57"
            },
            {
              "contract": "sWGC",
              "label": "stakingContract",
              "type": "t_address",
              "src": "contracts\\sWGC.sol:58"
            },
            {
              "contract": "sWGC",
              "label": "_tTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:61"
            },
            {
              "contract": "sWGC",
              "label": "_rTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:62"
            },
            {
              "contract": "sWGC",
              "label": "_tRewardTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:63"
            },
            {
              "contract": "sWGC",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:64"
            },
            {
              "contract": "sWGC",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:65"
            },
            {
              "contract": "sWGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\sWGC.sol:66"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)12441_storage)dyn_storage)": {
              "label": "mapping(address => struct sWGC.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)12441_storage)dyn_storage": {
              "label": "struct sWGC.Checkpoint[]"
            },
            "t_struct(Checkpoint)12441_storage": {
              "label": "struct sWGC.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_mapping(t_address,t_struct(Counter)6570_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_struct(Counter)6570_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:27",
        "inherit": [
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "TimersUpgradeable",
          "AddressUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "()",
          "supportsInterface(bytes4)",
          "name()",
          "version()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalThreshold()",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "relay(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorUpgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:40"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "_proposals",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:42"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:397"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)": {
              "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalCore)570_storage": {
              "label": "struct GovernorUpgradeable.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6952_storage"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6952_storage"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                }
              ]
            },
            "t_struct(BlockNumber)6952_storage": {
              "label": "struct TimersUpgradeable.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:14",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:230"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TimelockControllerUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:24",
        "version": {
          "withMetadata": "ce8c131622012e73e374823374b69596d2832d83de4f1fbc92108719c0d283ae",
          "withoutMetadata": "bdf1693fae76c4449cb7512b9b2fd8ca5e76013306c6541b97e66b9e2ff96847",
          "linkedWithoutMetadata": "bdf1693fae76c4449cb7512b9b2fd8ca5e76013306c6541b97e66b9e2ff96847"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:30"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:31"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:368"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:23",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "TimersUpgradeable",
          "SafeCastUpgradeable"
        ],
        "methods": [
          "COUNTING_MODE()",
          "propose(address[],uint256[],bytes[],string)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "proposals(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "quorumVotes()",
          "hasVoted(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "_proposalDetails",
              "type": "t_mapping(t_uint256,t_struct(ProposalDetails)2537_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:51"
            },
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:300"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ProposalDetails)2537_storage)": {
              "label": "mapping(uint256 => struct GovernorCompatibilityBravoUpgradeable.ProposalDetails)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalDetails)2537_storage": {
              "label": "struct GovernorCompatibilityBravoUpgradeable.ProposalDetails",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)3335_storage)"
                },
                {
                  "label": "descriptionHash",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_address,t_struct(Receipt)3335_storage)": {
              "label": "mapping(address => struct IGovernorCompatibilityBravoUpgradeable.Receipt)"
            },
            "t_struct(Receipt)3335_storage": {
              "label": "struct IGovernorCompatibilityBravoUpgradeable.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint96"
                }
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint96": {
              "label": "uint96"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumVotes()",
          "proposals(uint256)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:126"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorSettingsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:14",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "votingDelay()",
          "votingPeriod()",
          "proposalThreshold()",
          "setVotingDelay(uint256)",
          "setVotingPeriod(uint256)",
          "setProposalThreshold(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:15"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingPeriod",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:16"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_proposalThreshold",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:17"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:129"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorTimelockControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:27",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "state(uint256)",
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "updateTimelock(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelock",
              "type": "t_contract(TimelockControllerUpgradeable)2468",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:28"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelockIds",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:29"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:174"
            }
          ],
          "types": {
            "t_contract(TimelockControllerUpgradeable)2468": {
              "label": "contract TimelockControllerUpgradeable"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesQuorumFractionUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:15",
        "inherit": [
          "GovernorVotesUpgradeable",
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumNumerator()",
          "quorumDenominator()",
          "quorum(uint256)",
          "updateQuorumNumerator(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "_quorumNumerator",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:15",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "getVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "token",
              "type": "t_contract(IVotesUpgradeable)4377",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_contract(IVotesUpgradeable)4377": {
              "label": "contract IVotesUpgradeable"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorTimelockUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorTimelockUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\utils\\IVotesUpgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "278ed7fbbb82dedf6e0dd9b11d3f22ad9b60de94b98c64e62eec394765482a3b",
          "withoutMetadata": "891ef54eedab4f41f38b7e7dd0b8c57e03f94dc088a18514fcdfcb794001fd24",
          "linkedWithoutMetadata": "891ef54eedab4f41f38b7e7dd0b8c57e03f94dc088a18514fcdfcb794001fd24"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:28",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "IVotesUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)5174_storage)dyn_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:43"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)5174_storage)dyn_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:44"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:261"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)5174_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)5174_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)5174_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)6570_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:99"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)6570_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)6570_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\utils\\SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "0bc4cf6b9846dfde60c011ca63c8317823a939e400653bce1e5d0dec0eeadb84",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "e00ffd2605f9ec3194ab1fce5c31c218eadc5ace3d6e8939bbbce3cc543ade2c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "ac334f6525fda0371d2ce509b85f0407c7a052084c5b0c0d6b08fa13b70faad0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "c19b52a47ff83cc6ca5e7b4dba240fbc2f4fef926ab0dd85736aa0508b96c826",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\TimersUpgradeable.sol:9",
        "version": {
          "withMetadata": "f830e1de478338b875b928edcf10717bf4100b4bc0756a2ef13f7ae66c9c53bf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "fc38278c3d146f9dd5bae76a8716dd2ec59977a51c8de262135c36e76d51c0de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:118"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "479f355f2b7c32124363a6744088dcf4b9e480536c0d4616fca852285c0116fc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "5282d528aa64f488817880b00b2afef43d7bf71feb12c48a2d27a5b4bf0db2f4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "72f554b1e9df3cfac85fe1e53e4e33ef51276ebe86666e4a1be4cdf481592010",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governor": {
        "src": "contracts\\Governor.sol:13",
        "version": {
          "withMetadata": "27f033479b000bf1263e3acf08c53eaa87d9ff9737410d97217f3e8a1e92e80e",
          "withoutMetadata": "69b663f97c9bd97461ee2d1a0c95d07ab9eb268edc0dc851ae125e01915c4c33",
          "linkedWithoutMetadata": "69b663f97c9bd97461ee2d1a0c95d07ab9eb268edc0dc851ae125e01915c4c33"
        },
        "inherit": [
          "GovernorTimelockControlUpgradeable",
          "GovernorVotesQuorumFractionUpgradeable",
          "GovernorVotesUpgradeable",
          "GovernorCompatibilityBravoUpgradeable",
          "GovernorSettingsUpgradeable",
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,address,address,uint256,uint256,uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "state(uint256)",
          "propose(address[],uint256[],bytes[],string)",
          "proposalThreshold()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockController": {
        "src": "contracts\\TimelockController.sol:23",
        "version": {
          "withMetadata": "5a753eadf64fb7d3bbd49140d8bf4c49e7d9aa127f1acb82dab62ce4c39c42ca",
          "withoutMetadata": "f5941afb2bcb1fea691e478ce2f5dcd363ff6394b7f6d3d33d7dc7b36c0cc182",
          "linkedWithoutMetadata": "f5941afb2bcb1fea691e478ce2f5dcd363ff6394b7f6d3d33d7dc7b36c0cc182"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address[],address[])",
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockController",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "contracts\\TimelockController.sol:30"
            },
            {
              "contract": "TimelockController",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "contracts\\TimelockController.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts\\WGC.sol:327",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "INIT_CODE_PAIR_HASH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts\\WGC.sol:218",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts\\WGC.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts\\WGC.sol:171",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStake": {
        "src": "contracts\\WGC.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "depositReward(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGC": {
        "src": "contracts\\WGC.sol:359",
        "version": {
          "withMetadata": "2e990c5d4bc6b0293b229de7a5efaffe24973d2bdfa4f01fcc1820223e75d497",
          "withoutMetadata": "b2c351270bed2d6450684a7521a13a0e32a97542c02ca330ca8f4bbdb87e0923",
          "linkedWithoutMetadata": "b2c351270bed2d6450684a7521a13a0e32a97542c02ca330ca8f4bbdb87e0923"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256[18],string,string,uint8)",
          "decimals()",
          "enableTrading()",
          "updateMaxTransactionAmount(uint256)",
          "updateMaxWallet(uint256)",
          "updateMinimumTokensBeforeFeeTaken(uint256)",
          "updateProtectBlockCount(uint256)",
          "setAutomatedMarketMakerPair(address,bool)",
          "updateGasPriceLimit(uint256)",
          "disableTransferDelay()",
          "excludeFromMaxTransaction(address,bool)",
          "excludeFromFee(address)",
          "includeInFee(address)",
          "updateBuyFee(uint256,uint256,uint256)",
          "updateSellFee(uint256,uint256,uint256)",
          "updateTransferFee(uint256,uint256,uint256)",
          "setProtectBlockFee(uint256,uint256,uint256)",
          "updateStakingAddress(address)",
          "updatePlantingFundFeeAddress(address)",
          "updateLiquidityAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGC",
              "label": "stakingContract",
              "type": "t_contract(IStake)9596",
              "src": "contracts\\WGC.sol:361"
            },
            {
              "contract": "WGC",
              "label": "plantingFundFeeAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:362"
            },
            {
              "contract": "WGC",
              "label": "liquidityAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:363"
            },
            {
              "contract": "WGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\WGC.sol:365"
            },
            {
              "contract": "WGC",
              "label": "_tradingActiveBlock",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:367"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockCount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:368"
            },
            {
              "contract": "WGC",
              "label": "_gasPriceLimit",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:369"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:370"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:371"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:372"
            },
            {
              "contract": "WGC",
              "label": "tradingActive",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:373"
            },
            {
              "contract": "WGC",
              "label": "isExcludedFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:375"
            },
            {
              "contract": "WGC",
              "label": "buyOrSellSwitch",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:381"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:384"
            },
            {
              "contract": "WGC",
              "label": "_previousStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:385"
            },
            {
              "contract": "WGC",
              "label": "_liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:387"
            },
            {
              "contract": "WGC",
              "label": "_previousLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:388"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:390"
            },
            {
              "contract": "WGC",
              "label": "_previousPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:391"
            },
            {
              "contract": "WGC",
              "label": "buyStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:393"
            },
            {
              "contract": "WGC",
              "label": "buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:394"
            },
            {
              "contract": "WGC",
              "label": "buyPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:395"
            },
            {
              "contract": "WGC",
              "label": "sellStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:397"
            },
            {
              "contract": "WGC",
              "label": "sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:398"
            },
            {
              "contract": "WGC",
              "label": "sellPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:399"
            },
            {
              "contract": "WGC",
              "label": "transferStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:401"
            },
            {
              "contract": "WGC",
              "label": "transferLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:402"
            },
            {
              "contract": "WGC",
              "label": "transferPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:403"
            },
            {
              "contract": "WGC",
              "label": "isExcludedMaxTransactionAmount",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:405"
            },
            {
              "contract": "WGC",
              "label": "_holderLastTransferTimestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\WGC.sol:408"
            },
            {
              "contract": "WGC",
              "label": "_transferDelayEnabled",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:409"
            },
            {
              "contract": "WGC",
              "label": "_liquidityTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:411"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFeeTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:412"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFeeTokens",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:413"
            },
            {
              "contract": "WGC",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:417"
            },
            {
              "contract": "WGC",
              "label": "minimumFeeTokensToTake",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:419"
            },
            {
              "contract": "WGC",
              "label": "maxTransactionAmount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:420"
            },
            {
              "contract": "WGC",
              "label": "maxWallet",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:421"
            },
            {
              "contract": "WGC",
              "label": "pancakeRouter",
              "type": "t_contract(IPancakeRouter02)9987",
              "src": "contracts\\WGC.sol:423"
            },
            {
              "contract": "WGC",
              "label": "pancakePair",
              "type": "t_address",
              "src": "contracts\\WGC.sol:424"
            },
            {
              "contract": "WGC",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:426"
            }
          ],
          "types": {
            "t_contract(IStake)9596": {
              "label": "contract IStake"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_contract(IPancakeRouter02)9987": {
              "label": "contract IPancakeRouter02"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ISToken": {
        "src": "contracts\\WGCStaking.sol:11",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "distributeRewards(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGCStaking": {
        "src": "contracts\\WGCStaking.sol:15",
        "version": {
          "withMetadata": "2b5088b4547685994c63fde8632ae36ca4d7b44b655fe5fb7c05c209afe5d21f",
          "withoutMetadata": "d5da09982401765ee8b9aa1a7c73d4593526ee94dc8ae191c150dfe32e71c3b9",
          "linkedWithoutMetadata": "d5da09982401765ee8b9aa1a7c73d4593526ee94dc8ae191c150dfe32e71c3b9"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "updateConfiguration(address,address,uint256)",
          "initialize()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "depositReward(uint256)",
          "transferForeignToken(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGCStaking",
              "label": "token",
              "type": "t_contract(ERC20Upgradeable)5064",
              "src": "contracts\\WGCStaking.sol:21"
            },
            {
              "contract": "WGCStaking",
              "label": "sToken",
              "type": "t_contract(ISToken)12017",
              "src": "contracts\\WGCStaking.sol:22"
            },
            {
              "contract": "WGCStaking",
              "label": "minimumLimitToStake",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:23"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardHistory",
              "type": "t_mapping(t_uint256,t_struct(IAPY)12049_storage)",
              "src": "contracts\\WGCStaking.sol:28"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardTotalCount",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:29"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardBlocks",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCStaking.sol:30"
            }
          ],
          "types": {
            "t_contract(ERC20Upgradeable)5064": {
              "label": "contract ERC20Upgradeable"
            },
            "t_contract(ISToken)12017": {
              "label": "contract ISToken"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(IAPY)12049_storage)": {
              "label": "mapping(uint256 => struct WGCStaking.IAPY)"
            },
            "t_struct(IAPY)12049_storage": {
              "label": "struct WGCStaking.IAPY",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "growthRate",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "sWGC": {
        "src": "contracts\\sWGC.sol:17",
        "version": {
          "withMetadata": "3141cdd27b5702c637271e1964ae6c6313d020d4e6092faf705b53b4e96d1246",
          "withoutMetadata": "7454daeec524ea63e21ce04ae3a3614130024880b7fb6c3f6ec2af8ff6b939e7",
          "linkedWithoutMetadata": "7454daeec524ea63e21ce04ae3a3614130024880b7fb6c3f6ec2af8ff6b939e7"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "EIP712Upgradeable",
          "Initializable",
          "IERC20Upgradeable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "SafeMathUpgradeable",
          "ECDSAUpgradeable",
          "SafeCastUpgradeable",
          "MathUpgradeable"
        ],
        "methods": [
          "initialize(string,string,address,uint8)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "isExcludedFromReward(address)",
          "totalRewards()",
          "tokenFromReflection(uint256)",
          "excludeFromReward(address)",
          "includeInReward(address)",
          "setStakingAddress(address)",
          "transferForeignToken(address,address)",
          "distributeRewards(uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()",
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\sWGC.sol:47"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\sWGC.sol:47"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_tTotal",
            "src": "contracts\\sWGC.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_rTotal",
            "src": "contracts\\sWGC.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "sWGC",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\sWGC.sol:42"
            },
            {
              "contract": "sWGC",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)12441_storage)dyn_storage)",
              "src": "contracts\\sWGC.sol:43"
            },
            {
              "contract": "sWGC",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)12441_storage)dyn_storage",
              "src": "contracts\\sWGC.sol:44"
            },
            {
              "contract": "sWGC",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)6570_storage)",
              "src": "contracts\\sWGC.sol:45"
            },
            {
              "contract": "sWGC",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:52"
            },
            {
              "contract": "sWGC",
              "label": "_tOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:53"
            },
            {
              "contract": "sWGC",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\sWGC.sol:54"
            },
            {
              "contract": "sWGC",
              "label": "_isExcluded",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\sWGC.sol:56"
            },
            {
              "contract": "sWGC",
              "label": "_excluded",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\sWGC.sol:57"
            },
            {
              "contract": "sWGC",
              "label": "stakingContract",
              "type": "t_address",
              "src": "contracts\\sWGC.sol:58"
            },
            {
              "contract": "sWGC",
              "label": "_tTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:61"
            },
            {
              "contract": "sWGC",
              "label": "_rTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:62"
            },
            {
              "contract": "sWGC",
              "label": "_tRewardTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:63"
            },
            {
              "contract": "sWGC",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:64"
            },
            {
              "contract": "sWGC",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:65"
            },
            {
              "contract": "sWGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\sWGC.sol:66"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)12441_storage)dyn_storage)": {
              "label": "mapping(address => struct sWGC.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)12441_storage)dyn_storage": {
              "label": "struct sWGC.Checkpoint[]"
            },
            "t_struct(Checkpoint)12441_storage": {
              "label": "struct sWGC.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_mapping(t_address,t_struct(Counter)6570_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_struct(Counter)6570_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:27",
        "inherit": [
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "TimersUpgradeable",
          "AddressUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "()",
          "supportsInterface(bytes4)",
          "name()",
          "version()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalThreshold()",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "relay(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorUpgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:40"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "_proposals",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:42"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:397"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)": {
              "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalCore)570_storage": {
              "label": "struct GovernorUpgradeable.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6952_storage"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6952_storage"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                }
              ]
            },
            "t_struct(BlockNumber)6952_storage": {
              "label": "struct TimersUpgradeable.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:14",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:230"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TimelockControllerUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:24",
        "version": {
          "withMetadata": "ce8c131622012e73e374823374b69596d2832d83de4f1fbc92108719c0d283ae",
          "withoutMetadata": "bdf1693fae76c4449cb7512b9b2fd8ca5e76013306c6541b97e66b9e2ff96847",
          "linkedWithoutMetadata": "bdf1693fae76c4449cb7512b9b2fd8ca5e76013306c6541b97e66b9e2ff96847"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:30"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:31"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:368"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:23",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "TimersUpgradeable",
          "SafeCastUpgradeable"
        ],
        "methods": [
          "COUNTING_MODE()",
          "propose(address[],uint256[],bytes[],string)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "proposals(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "quorumVotes()",
          "hasVoted(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "_proposalDetails",
              "type": "t_mapping(t_uint256,t_struct(ProposalDetails)2537_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:51"
            },
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:300"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ProposalDetails)2537_storage)": {
              "label": "mapping(uint256 => struct GovernorCompatibilityBravoUpgradeable.ProposalDetails)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalDetails)2537_storage": {
              "label": "struct GovernorCompatibilityBravoUpgradeable.ProposalDetails",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)3335_storage)"
                },
                {
                  "label": "descriptionHash",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_address,t_struct(Receipt)3335_storage)": {
              "label": "mapping(address => struct IGovernorCompatibilityBravoUpgradeable.Receipt)"
            },
            "t_struct(Receipt)3335_storage": {
              "label": "struct IGovernorCompatibilityBravoUpgradeable.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint96"
                }
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint96": {
              "label": "uint96"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumVotes()",
          "proposals(uint256)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:126"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorSettingsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:14",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "votingDelay()",
          "votingPeriod()",
          "proposalThreshold()",
          "setVotingDelay(uint256)",
          "setVotingPeriod(uint256)",
          "setProposalThreshold(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:15"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingPeriod",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:16"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_proposalThreshold",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:17"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:129"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorTimelockControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:27",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "state(uint256)",
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "updateTimelock(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelock",
              "type": "t_contract(TimelockControllerUpgradeable)2468",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:28"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelockIds",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:29"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:174"
            }
          ],
          "types": {
            "t_contract(TimelockControllerUpgradeable)2468": {
              "label": "contract TimelockControllerUpgradeable"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesQuorumFractionUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:15",
        "inherit": [
          "GovernorVotesUpgradeable",
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumNumerator()",
          "quorumDenominator()",
          "quorum(uint256)",
          "updateQuorumNumerator(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "_quorumNumerator",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:15",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "getVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "token",
              "type": "t_contract(IVotesUpgradeable)4377",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_contract(IVotesUpgradeable)4377": {
              "label": "contract IVotesUpgradeable"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorTimelockUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorTimelockUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\utils\\IVotesUpgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "278ed7fbbb82dedf6e0dd9b11d3f22ad9b60de94b98c64e62eec394765482a3b",
          "withoutMetadata": "891ef54eedab4f41f38b7e7dd0b8c57e03f94dc088a18514fcdfcb794001fd24",
          "linkedWithoutMetadata": "891ef54eedab4f41f38b7e7dd0b8c57e03f94dc088a18514fcdfcb794001fd24"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:28",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "IVotesUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)5174_storage)dyn_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:43"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)5174_storage)dyn_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:44"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:261"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)5174_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)5174_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)5174_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)6570_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:99"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)6570_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)6570_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\utils\\SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "0bc4cf6b9846dfde60c011ca63c8317823a939e400653bce1e5d0dec0eeadb84",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "e00ffd2605f9ec3194ab1fce5c31c218eadc5ace3d6e8939bbbce3cc543ade2c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "ac334f6525fda0371d2ce509b85f0407c7a052084c5b0c0d6b08fa13b70faad0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "c19b52a47ff83cc6ca5e7b4dba240fbc2f4fef926ab0dd85736aa0508b96c826",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\TimersUpgradeable.sol:9",
        "version": {
          "withMetadata": "f830e1de478338b875b928edcf10717bf4100b4bc0756a2ef13f7ae66c9c53bf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "fc38278c3d146f9dd5bae76a8716dd2ec59977a51c8de262135c36e76d51c0de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:118"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "479f355f2b7c32124363a6744088dcf4b9e480536c0d4616fca852285c0116fc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "5282d528aa64f488817880b00b2afef43d7bf71feb12c48a2d27a5b4bf0db2f4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "72f554b1e9df3cfac85fe1e53e4e33ef51276ebe86666e4a1be4cdf481592010",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governor": {
        "src": "contracts\\Governor.sol:13",
        "version": {
          "withMetadata": "27f033479b000bf1263e3acf08c53eaa87d9ff9737410d97217f3e8a1e92e80e",
          "withoutMetadata": "69b663f97c9bd97461ee2d1a0c95d07ab9eb268edc0dc851ae125e01915c4c33",
          "linkedWithoutMetadata": "69b663f97c9bd97461ee2d1a0c95d07ab9eb268edc0dc851ae125e01915c4c33"
        },
        "inherit": [
          "GovernorTimelockControlUpgradeable",
          "GovernorVotesQuorumFractionUpgradeable",
          "GovernorVotesUpgradeable",
          "GovernorCompatibilityBravoUpgradeable",
          "GovernorSettingsUpgradeable",
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,address,address,uint256,uint256,uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "state(uint256)",
          "propose(address[],uint256[],bytes[],string)",
          "proposalThreshold()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockController": {
        "src": "contracts\\TimelockController.sol:23",
        "version": {
          "withMetadata": "5a753eadf64fb7d3bbd49140d8bf4c49e7d9aa127f1acb82dab62ce4c39c42ca",
          "withoutMetadata": "f5941afb2bcb1fea691e478ce2f5dcd363ff6394b7f6d3d33d7dc7b36c0cc182",
          "linkedWithoutMetadata": "f5941afb2bcb1fea691e478ce2f5dcd363ff6394b7f6d3d33d7dc7b36c0cc182"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address[],address[])",
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockController",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "contracts\\TimelockController.sol:30"
            },
            {
              "contract": "TimelockController",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "contracts\\TimelockController.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts\\WGC.sol:327",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "INIT_CODE_PAIR_HASH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts\\WGC.sol:218",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts\\WGC.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts\\WGC.sol:171",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStake": {
        "src": "contracts\\WGC.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "depositReward(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGC": {
        "src": "contracts\\WGC.sol:359",
        "version": {
          "withMetadata": "2e990c5d4bc6b0293b229de7a5efaffe24973d2bdfa4f01fcc1820223e75d497",
          "withoutMetadata": "b2c351270bed2d6450684a7521a13a0e32a97542c02ca330ca8f4bbdb87e0923",
          "linkedWithoutMetadata": "b2c351270bed2d6450684a7521a13a0e32a97542c02ca330ca8f4bbdb87e0923"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256[18],string,string,uint8)",
          "decimals()",
          "enableTrading()",
          "updateMaxTransactionAmount(uint256)",
          "updateMaxWallet(uint256)",
          "updateMinimumTokensBeforeFeeTaken(uint256)",
          "updateProtectBlockCount(uint256)",
          "setAutomatedMarketMakerPair(address,bool)",
          "updateGasPriceLimit(uint256)",
          "disableTransferDelay()",
          "excludeFromMaxTransaction(address,bool)",
          "excludeFromFee(address)",
          "includeInFee(address)",
          "updateBuyFee(uint256,uint256,uint256)",
          "updateSellFee(uint256,uint256,uint256)",
          "updateTransferFee(uint256,uint256,uint256)",
          "setProtectBlockFee(uint256,uint256,uint256)",
          "updateStakingAddress(address)",
          "updatePlantingFundFeeAddress(address)",
          "updateLiquidityAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGC",
              "label": "stakingContract",
              "type": "t_contract(IStake)9596",
              "src": "contracts\\WGC.sol:361"
            },
            {
              "contract": "WGC",
              "label": "plantingFundFeeAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:362"
            },
            {
              "contract": "WGC",
              "label": "liquidityAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:363"
            },
            {
              "contract": "WGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\WGC.sol:365"
            },
            {
              "contract": "WGC",
              "label": "_tradingActiveBlock",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:367"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockCount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:368"
            },
            {
              "contract": "WGC",
              "label": "_gasPriceLimit",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:369"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:370"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:371"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:372"
            },
            {
              "contract": "WGC",
              "label": "tradingActive",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:373"
            },
            {
              "contract": "WGC",
              "label": "isExcludedFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:375"
            },
            {
              "contract": "WGC",
              "label": "buyOrSellSwitch",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:381"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:384"
            },
            {
              "contract": "WGC",
              "label": "_previousStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:385"
            },
            {
              "contract": "WGC",
              "label": "_liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:387"
            },
            {
              "contract": "WGC",
              "label": "_previousLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:388"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:390"
            },
            {
              "contract": "WGC",
              "label": "_previousPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:391"
            },
            {
              "contract": "WGC",
              "label": "buyStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:393"
            },
            {
              "contract": "WGC",
              "label": "buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:394"
            },
            {
              "contract": "WGC",
              "label": "buyPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:395"
            },
            {
              "contract": "WGC",
              "label": "sellStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:397"
            },
            {
              "contract": "WGC",
              "label": "sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:398"
            },
            {
              "contract": "WGC",
              "label": "sellPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:399"
            },
            {
              "contract": "WGC",
              "label": "transferStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:401"
            },
            {
              "contract": "WGC",
              "label": "transferLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:402"
            },
            {
              "contract": "WGC",
              "label": "transferPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:403"
            },
            {
              "contract": "WGC",
              "label": "isExcludedMaxTransactionAmount",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:405"
            },
            {
              "contract": "WGC",
              "label": "_holderLastTransferTimestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\WGC.sol:408"
            },
            {
              "contract": "WGC",
              "label": "_transferDelayEnabled",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:409"
            },
            {
              "contract": "WGC",
              "label": "_liquidityTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:411"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFeeTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:412"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFeeTokens",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:413"
            },
            {
              "contract": "WGC",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:417"
            },
            {
              "contract": "WGC",
              "label": "minimumFeeTokensToTake",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:419"
            },
            {
              "contract": "WGC",
              "label": "maxTransactionAmount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:420"
            },
            {
              "contract": "WGC",
              "label": "maxWallet",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:421"
            },
            {
              "contract": "WGC",
              "label": "pancakeRouter",
              "type": "t_contract(IPancakeRouter02)9987",
              "src": "contracts\\WGC.sol:423"
            },
            {
              "contract": "WGC",
              "label": "pancakePair",
              "type": "t_address",
              "src": "contracts\\WGC.sol:424"
            },
            {
              "contract": "WGC",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:426"
            }
          ],
          "types": {
            "t_contract(IStake)9596": {
              "label": "contract IStake"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_contract(IPancakeRouter02)9987": {
              "label": "contract IPancakeRouter02"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ISToken": {
        "src": "contracts\\WGCStaking.sol:11",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "distributeRewards(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGCStaking": {
        "src": "contracts\\WGCStaking.sol:15",
        "version": {
          "withMetadata": "fa46ea66e4f6ba18b68560eb7916042656c34b6da70d3e0dca67f384cd56c1bf",
          "withoutMetadata": "de4cd2a8f9afe81ece32c5d6a088170d64eb96910f34914476eb732886e6b676",
          "linkedWithoutMetadata": "de4cd2a8f9afe81ece32c5d6a088170d64eb96910f34914476eb732886e6b676"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "updateConfiguration(address,address,uint256)",
          "initialize(address,address,uint256)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "depositReward(uint256)",
          "transferForeignToken(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGCStaking",
              "label": "token",
              "type": "t_contract(ERC20Upgradeable)5064",
              "src": "contracts\\WGCStaking.sol:21"
            },
            {
              "contract": "WGCStaking",
              "label": "sToken",
              "type": "t_contract(ISToken)12017",
              "src": "contracts\\WGCStaking.sol:22"
            },
            {
              "contract": "WGCStaking",
              "label": "minimumLimitToStake",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:23"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardHistory",
              "type": "t_mapping(t_uint256,t_struct(IAPY)12049_storage)",
              "src": "contracts\\WGCStaking.sol:28"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardTotalCount",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:29"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardBlocks",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCStaking.sol:30"
            }
          ],
          "types": {
            "t_contract(ERC20Upgradeable)5064": {
              "label": "contract ERC20Upgradeable"
            },
            "t_contract(ISToken)12017": {
              "label": "contract ISToken"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(IAPY)12049_storage)": {
              "label": "mapping(uint256 => struct WGCStaking.IAPY)"
            },
            "t_struct(IAPY)12049_storage": {
              "label": "struct WGCStaking.IAPY",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "growthRate",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "sWGC": {
        "src": "contracts\\sWGC.sol:17",
        "version": {
          "withMetadata": "3141cdd27b5702c637271e1964ae6c6313d020d4e6092faf705b53b4e96d1246",
          "withoutMetadata": "7454daeec524ea63e21ce04ae3a3614130024880b7fb6c3f6ec2af8ff6b939e7",
          "linkedWithoutMetadata": "7454daeec524ea63e21ce04ae3a3614130024880b7fb6c3f6ec2af8ff6b939e7"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "EIP712Upgradeable",
          "Initializable",
          "IERC20Upgradeable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "SafeMathUpgradeable",
          "ECDSAUpgradeable",
          "SafeCastUpgradeable",
          "MathUpgradeable"
        ],
        "methods": [
          "initialize(string,string,address,uint8)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "isExcludedFromReward(address)",
          "totalRewards()",
          "tokenFromReflection(uint256)",
          "excludeFromReward(address)",
          "includeInReward(address)",
          "setStakingAddress(address)",
          "transferForeignToken(address,address)",
          "distributeRewards(uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()",
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\sWGC.sol:47"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\sWGC.sol:47"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_tTotal",
            "src": "contracts\\sWGC.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_rTotal",
            "src": "contracts\\sWGC.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "sWGC",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\sWGC.sol:42"
            },
            {
              "contract": "sWGC",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)12447_storage)dyn_storage)",
              "src": "contracts\\sWGC.sol:43"
            },
            {
              "contract": "sWGC",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)12447_storage)dyn_storage",
              "src": "contracts\\sWGC.sol:44"
            },
            {
              "contract": "sWGC",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)6570_storage)",
              "src": "contracts\\sWGC.sol:45"
            },
            {
              "contract": "sWGC",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:52"
            },
            {
              "contract": "sWGC",
              "label": "_tOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:53"
            },
            {
              "contract": "sWGC",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\sWGC.sol:54"
            },
            {
              "contract": "sWGC",
              "label": "_isExcluded",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\sWGC.sol:56"
            },
            {
              "contract": "sWGC",
              "label": "_excluded",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\sWGC.sol:57"
            },
            {
              "contract": "sWGC",
              "label": "stakingContract",
              "type": "t_address",
              "src": "contracts\\sWGC.sol:58"
            },
            {
              "contract": "sWGC",
              "label": "_tTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:61"
            },
            {
              "contract": "sWGC",
              "label": "_rTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:62"
            },
            {
              "contract": "sWGC",
              "label": "_tRewardTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:63"
            },
            {
              "contract": "sWGC",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:64"
            },
            {
              "contract": "sWGC",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:65"
            },
            {
              "contract": "sWGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\sWGC.sol:66"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)12447_storage)dyn_storage)": {
              "label": "mapping(address => struct sWGC.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)12447_storage)dyn_storage": {
              "label": "struct sWGC.Checkpoint[]"
            },
            "t_struct(Checkpoint)12447_storage": {
              "label": "struct sWGC.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_mapping(t_address,t_struct(Counter)6570_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_struct(Counter)6570_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\utils\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "4b0f177c496688f7ed0b1d54e9133eb9f1cb142f12704a08443618d02e2e2718",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:9",
        "version": {
          "withMetadata": "5042bae5e89c14c68dd90ca2a237a1ee04ab9c918ab4500d03c6781b8456703c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "460d0b64289f1ca352bb6576a8bdb93297f0e4a0974237a5e91fad1f9b389288",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGCWrapper": {
        "src": "contracts\\Wrapper.sol:15",
        "version": {
          "withMetadata": "bc042029f591270c3d4c95e34a30655e9831d4a4438046aecb3ac8a1057be4e5",
          "withoutMetadata": "f197ba3c19ae96521f4d0c95552c0665dd5c7dd655e2a013a6642e8c58b9b473",
          "linkedWithoutMetadata": "f197ba3c19ae96521f4d0c95552c0665dd5c7dd655e2a013a6642e8c58b9b473"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address,address)",
          "updateToken(address,address)",
          "exchange(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WGCWrapper",
            "src": "contracts\\Wrapper.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WGCWrapper",
              "label": "oldToken",
              "type": "t_contract(IERC20)182",
              "src": "contracts\\Wrapper.sol:18"
            },
            {
              "contract": "WGCWrapper",
              "label": "newToken",
              "type": "t_contract(IERC20)182",
              "src": "contracts\\Wrapper.sol:19"
            }
          ],
          "types": {
            "t_contract(IERC20)182": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\utils\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "4b0f177c496688f7ed0b1d54e9133eb9f1cb142f12704a08443618d02e2e2718",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:9",
        "version": {
          "withMetadata": "5042bae5e89c14c68dd90ca2a237a1ee04ab9c918ab4500d03c6781b8456703c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "460d0b64289f1ca352bb6576a8bdb93297f0e4a0974237a5e91fad1f9b389288",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGC": {
        "src": "contracts\\Wrapper.sol:15",
        "version": {
          "withMetadata": "a62d430b8fb8d1662e0f6cdb2239f76ef6d09e4b83367a305ab841ac937fb087",
          "withoutMetadata": "f197ba3c19ae96521f4d0c95552c0665dd5c7dd655e2a013a6642e8c58b9b473",
          "linkedWithoutMetadata": "f197ba3c19ae96521f4d0c95552c0665dd5c7dd655e2a013a6642e8c58b9b473"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address,address)",
          "updateToken(address,address)",
          "exchange(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WGC",
            "src": "contracts\\Wrapper.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WGC",
              "label": "oldToken",
              "type": "t_contract(IERC20)182",
              "src": "contracts\\Wrapper.sol:18"
            },
            {
              "contract": "WGC",
              "label": "newToken",
              "type": "t_contract(IERC20)182",
              "src": "contracts\\Wrapper.sol:19"
            }
          ],
          "types": {
            "t_contract(IERC20)182": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)34_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:27",
        "inherit": [
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "TimersUpgradeable",
          "AddressUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "()",
          "supportsInterface(bytes4)",
          "name()",
          "version()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalThreshold()",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "relay(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorUpgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:40"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "_proposals",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:42"
            },
            {
              "contract": "GovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\GovernorUpgradeable.sol:397"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)570_storage)": {
              "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalCore)570_storage": {
              "label": "struct GovernorUpgradeable.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6952_storage"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6952_storage"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                },
                {
                  "label": "canceled",
                  "type": "t_bool"
                }
              ]
            },
            "t_struct(BlockNumber)6952_storage": {
              "label": "struct TimersUpgradeable.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:14",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\IGovernorUpgradeable.sol:230"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TimelockControllerUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:24",
        "version": {
          "withMetadata": "ce8c131622012e73e374823374b69596d2832d83de4f1fbc92108719c0d283ae",
          "withoutMetadata": "bdf1693fae76c4449cb7512b9b2fd8ca5e76013306c6541b97e66b9e2ff96847",
          "linkedWithoutMetadata": "bdf1693fae76c4449cb7512b9b2fd8ca5e76013306c6541b97e66b9e2ff96847"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:30"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:31"
            },
            {
              "contract": "TimelockControllerUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\TimelockControllerUpgradeable.sol:368"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:23",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "TimersUpgradeable",
          "SafeCastUpgradeable"
        ],
        "methods": [
          "COUNTING_MODE()",
          "propose(address[],uint256[],bytes[],string)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "proposals(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)",
          "quorumVotes()",
          "hasVoted(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "_proposalDetails",
              "type": "t_mapping(t_uint256,t_struct(ProposalDetails)2537_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:51"
            },
            {
              "contract": "GovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\GovernorCompatibilityBravoUpgradeable.sol:300"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ProposalDetails)2537_storage)": {
              "label": "mapping(uint256 => struct GovernorCompatibilityBravoUpgradeable.ProposalDetails)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ProposalDetails)2537_storage": {
              "label": "struct GovernorCompatibilityBravoUpgradeable.ProposalDetails",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address"
                },
                {
                  "label": "targets",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "signatures",
                  "type": "t_array(t_string_storage)dyn_storage"
                },
                {
                  "label": "calldatas",
                  "type": "t_array(t_bytes_storage)dyn_storage"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256"
                },
                {
                  "label": "receipts",
                  "type": "t_mapping(t_address,t_struct(Receipt)3335_storage)"
                },
                {
                  "label": "descriptionHash",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_mapping(t_address,t_struct(Receipt)3335_storage)": {
              "label": "mapping(address => struct IGovernorCompatibilityBravoUpgradeable.Receipt)"
            },
            "t_struct(Receipt)3335_storage": {
              "label": "struct IGovernorCompatibilityBravoUpgradeable.Receipt",
              "members": [
                {
                  "label": "hasVoted",
                  "type": "t_bool"
                },
                {
                  "label": "support",
                  "type": "t_uint8"
                },
                {
                  "label": "votes",
                  "type": "t_uint96"
                }
              ]
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint96": {
              "label": "uint96"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorCompatibilityBravoUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumVotes()",
          "proposals(uint256)",
          "propose(address[],uint256[],string[],bytes[],string)",
          "queue(uint256)",
          "execute(uint256)",
          "cancel(uint256)",
          "getActions(uint256)",
          "getReceipt(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorCompatibilityBravoUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\compatibility\\IGovernorCompatibilityBravoUpgradeable.sol:126"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorSettingsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:14",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "votingDelay()",
          "votingPeriod()",
          "proposalThreshold()",
          "setVotingDelay(uint256)",
          "setVotingPeriod(uint256)",
          "setProposalThreshold(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingDelay",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:15"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_votingPeriod",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:16"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "_proposalThreshold",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:17"
            },
            {
              "contract": "GovernorSettingsUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorSettingsUpgradeable.sol:129"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorTimelockControlUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:27",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "state(uint256)",
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "updateTimelock(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelock",
              "type": "t_contract(TimelockControllerUpgradeable)2468",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:28"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "_timelockIds",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:29"
            },
            {
              "contract": "GovernorTimelockControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)48_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorTimelockControlUpgradeable.sol:174"
            }
          ],
          "types": {
            "t_contract(TimelockControllerUpgradeable)2468": {
              "label": "contract TimelockControllerUpgradeable"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesQuorumFractionUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:15",
        "inherit": [
          "GovernorVotesUpgradeable",
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "quorumNumerator()",
          "quorumDenominator()",
          "quorum(uint256)",
          "updateQuorumNumerator(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "_quorumNumerator",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesQuorumFractionUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesQuorumFractionUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernorVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:15",
        "inherit": [
          "GovernorUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "getVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "token",
              "type": "t_contract(IVotesUpgradeable)4377",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:16"
            },
            {
              "contract": "GovernorVotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\GovernorVotesUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_contract(IVotesUpgradeable)4377": {
              "label": "contract IVotesUpgradeable"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGovernorTimelockUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:14",
        "inherit": [
          "IGovernorUpgradeable",
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IGovernorTimelockUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\governance\\extensions\\IGovernorTimelockUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IVotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\governance\\utils\\IVotesUpgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "278ed7fbbb82dedf6e0dd9b11d3f22ad9b60de94b98c64e62eec394765482a3b",
          "withoutMetadata": "891ef54eedab4f41f38b7e7dd0b8c57e03f94dc088a18514fcdfcb794001fd24",
          "linkedWithoutMetadata": "891ef54eedab4f41f38b7e7dd0b8c57e03f94dc088a18514fcdfcb794001fd24"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:28",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "IVotesUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:42"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)5174_storage)dyn_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:43"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)5174_storage)dyn_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:44"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:261"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)5174_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)5174_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)5174_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:23",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)6570_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:26"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:29"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:99"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)6570_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)6570_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\utils\\SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "0bc4cf6b9846dfde60c011ca63c8317823a939e400653bce1e5d0dec0eeadb84",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "e00ffd2605f9ec3194ab1fce5c31c218eadc5ace3d6e8939bbbce3cc543ade2c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "ac334f6525fda0371d2ce509b85f0407c7a052084c5b0c0d6b08fa13b70faad0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "c19b52a47ff83cc6ca5e7b4dba240fbc2f4fef926ab0dd85736aa0508b96c826",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimersUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\TimersUpgradeable.sol:9",
        "version": {
          "withMetadata": "f830e1de478338b875b928edcf10717bf4100b4bc0756a2ef13f7ae66c9c53bf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "fc38278c3d146f9dd5bae76a8716dd2ec59977a51c8de262135c36e76d51c0de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:28",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:31"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:118"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "479f355f2b7c32124363a6744088dcf4b9e480536c0d4616fca852285c0116fc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeCastUpgradeable.sol:21",
        "version": {
          "withMetadata": "5282d528aa64f488817880b00b2afef43d7bf71feb12c48a2d27a5b4bf0db2f4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\math\\SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "72f554b1e9df3cfac85fe1e53e4e33ef51276ebe86666e4a1be4cdf481592010",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governor": {
        "src": "contracts\\Governor.sol:13",
        "version": {
          "withMetadata": "27f033479b000bf1263e3acf08c53eaa87d9ff9737410d97217f3e8a1e92e80e",
          "withoutMetadata": "69b663f97c9bd97461ee2d1a0c95d07ab9eb268edc0dc851ae125e01915c4c33",
          "linkedWithoutMetadata": "69b663f97c9bd97461ee2d1a0c95d07ab9eb268edc0dc851ae125e01915c4c33"
        },
        "inherit": [
          "GovernorTimelockControlUpgradeable",
          "GovernorVotesQuorumFractionUpgradeable",
          "GovernorVotesUpgradeable",
          "GovernorCompatibilityBravoUpgradeable",
          "GovernorSettingsUpgradeable",
          "GovernorUpgradeable",
          "IGovernorCompatibilityBravoUpgradeable",
          "IGovernorTimelockUpgradeable",
          "IGovernorUpgradeable",
          "EIP712Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,address,address,uint256,uint256,uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "state(uint256)",
          "propose(address[],uint256[],bytes[],string)",
          "proposalThreshold()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimelockController": {
        "src": "contracts\\TimelockController.sol:23",
        "version": {
          "withMetadata": "5a753eadf64fb7d3bbd49140d8bf4c49e7d9aa127f1acb82dab62ce4c39c42ca",
          "withoutMetadata": "f5941afb2bcb1fea691e478ce2f5dcd363ff6394b7f6d3d33d7dc7b36c0cc182",
          "linkedWithoutMetadata": "f5941afb2bcb1fea691e478ce2f5dcd363ff6394b7f6d3d33d7dc7b36c0cc182"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address[],address[])",
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "TimelockController",
              "label": "_timestamps",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "contracts\\TimelockController.sol:30"
            },
            {
              "contract": "TimelockController",
              "label": "_minDelay",
              "type": "t_uint256",
              "src": "contracts\\TimelockController.sol:31"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts\\WGC.sol:327",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "INIT_CODE_PAIR_HASH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts\\WGC.sol:218",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts\\WGC.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts\\WGC.sol:171",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStake": {
        "src": "contracts\\WGC.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "depositReward(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGC": {
        "src": "contracts\\WGC.sol:359",
        "version": {
          "withMetadata": "2e990c5d4bc6b0293b229de7a5efaffe24973d2bdfa4f01fcc1820223e75d497",
          "withoutMetadata": "b2c351270bed2d6450684a7521a13a0e32a97542c02ca330ca8f4bbdb87e0923",
          "linkedWithoutMetadata": "b2c351270bed2d6450684a7521a13a0e32a97542c02ca330ca8f4bbdb87e0923"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256[18],string,string,uint8)",
          "decimals()",
          "enableTrading()",
          "updateMaxTransactionAmount(uint256)",
          "updateMaxWallet(uint256)",
          "updateMinimumTokensBeforeFeeTaken(uint256)",
          "updateProtectBlockCount(uint256)",
          "setAutomatedMarketMakerPair(address,bool)",
          "updateGasPriceLimit(uint256)",
          "disableTransferDelay()",
          "excludeFromMaxTransaction(address,bool)",
          "excludeFromFee(address)",
          "includeInFee(address)",
          "updateBuyFee(uint256,uint256,uint256)",
          "updateSellFee(uint256,uint256,uint256)",
          "updateTransferFee(uint256,uint256,uint256)",
          "setProtectBlockFee(uint256,uint256,uint256)",
          "updateStakingAddress(address)",
          "updatePlantingFundFeeAddress(address)",
          "updateLiquidityAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGC",
              "label": "stakingContract",
              "type": "t_contract(IStake)9596",
              "src": "contracts\\WGC.sol:361"
            },
            {
              "contract": "WGC",
              "label": "plantingFundFeeAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:362"
            },
            {
              "contract": "WGC",
              "label": "liquidityAddress",
              "type": "t_address_payable",
              "src": "contracts\\WGC.sol:363"
            },
            {
              "contract": "WGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\WGC.sol:365"
            },
            {
              "contract": "WGC",
              "label": "_tradingActiveBlock",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:367"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockCount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:368"
            },
            {
              "contract": "WGC",
              "label": "_gasPriceLimit",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:369"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:370"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:371"
            },
            {
              "contract": "WGC",
              "label": "_protectBlockPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:372"
            },
            {
              "contract": "WGC",
              "label": "tradingActive",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:373"
            },
            {
              "contract": "WGC",
              "label": "isExcludedFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:375"
            },
            {
              "contract": "WGC",
              "label": "buyOrSellSwitch",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:381"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:384"
            },
            {
              "contract": "WGC",
              "label": "_previousStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:385"
            },
            {
              "contract": "WGC",
              "label": "_liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:387"
            },
            {
              "contract": "WGC",
              "label": "_previousLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:388"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:390"
            },
            {
              "contract": "WGC",
              "label": "_previousPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:391"
            },
            {
              "contract": "WGC",
              "label": "buyStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:393"
            },
            {
              "contract": "WGC",
              "label": "buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:394"
            },
            {
              "contract": "WGC",
              "label": "buyPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:395"
            },
            {
              "contract": "WGC",
              "label": "sellStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:397"
            },
            {
              "contract": "WGC",
              "label": "sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:398"
            },
            {
              "contract": "WGC",
              "label": "sellPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:399"
            },
            {
              "contract": "WGC",
              "label": "transferStakingRewardFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:401"
            },
            {
              "contract": "WGC",
              "label": "transferLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:402"
            },
            {
              "contract": "WGC",
              "label": "transferPlantingFundFee",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:403"
            },
            {
              "contract": "WGC",
              "label": "isExcludedMaxTransactionAmount",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:405"
            },
            {
              "contract": "WGC",
              "label": "_holderLastTransferTimestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\WGC.sol:408"
            },
            {
              "contract": "WGC",
              "label": "_transferDelayEnabled",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:409"
            },
            {
              "contract": "WGC",
              "label": "_liquidityTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:411"
            },
            {
              "contract": "WGC",
              "label": "_plantingFundFeeTokensToSwap",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:412"
            },
            {
              "contract": "WGC",
              "label": "_stakingRewardFeeTokens",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:413"
            },
            {
              "contract": "WGC",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\WGC.sol:417"
            },
            {
              "contract": "WGC",
              "label": "minimumFeeTokensToTake",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:419"
            },
            {
              "contract": "WGC",
              "label": "maxTransactionAmount",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:420"
            },
            {
              "contract": "WGC",
              "label": "maxWallet",
              "type": "t_uint256",
              "src": "contracts\\WGC.sol:421"
            },
            {
              "contract": "WGC",
              "label": "pancakeRouter",
              "type": "t_contract(IPancakeRouter02)9987",
              "src": "contracts\\WGC.sol:423"
            },
            {
              "contract": "WGC",
              "label": "pancakePair",
              "type": "t_address",
              "src": "contracts\\WGC.sol:424"
            },
            {
              "contract": "WGC",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\WGC.sol:426"
            }
          ],
          "types": {
            "t_contract(IStake)9596": {
              "label": "contract IStake"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_contract(IPancakeRouter02)9987": {
              "label": "contract IPancakeRouter02"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ISToken": {
        "src": "contracts\\WGCStaking.sol:10",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "distributeRewards(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WGCStaking": {
        "src": "contracts\\WGCStaking.sol:14",
        "version": {
          "withMetadata": "19e9cc85fc93e10a5aa1985cda25f97354af3e04fb145071338fb58180ffa588",
          "withoutMetadata": "b20ef7821ecf960382659892affc5e475dc39bc17fd11f4298dd4708a93f3a3f",
          "linkedWithoutMetadata": "b20ef7821ecf960382659892affc5e475dc39bc17fd11f4298dd4708a93f3a3f"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "updateConfiguration(address,address,uint256)",
          "initialize(address,address,uint256)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "depositReward(uint256)",
          "transferForeignToken(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WGCStaking",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)5142",
              "src": "contracts\\WGCStaking.sol:18"
            },
            {
              "contract": "WGCStaking",
              "label": "sToken",
              "type": "t_contract(ISToken)12016",
              "src": "contracts\\WGCStaking.sol:19"
            },
            {
              "contract": "WGCStaking",
              "label": "minimumLimitToStake",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:20"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardHistory",
              "type": "t_mapping(t_uint256,t_struct(IAPY)12044_storage)",
              "src": "contracts\\WGCStaking.sol:25"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardTotalCount",
              "type": "t_uint256",
              "src": "contracts\\WGCStaking.sol:26"
            },
            {
              "contract": "WGCStaking",
              "label": "rewardBlocks",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\WGCStaking.sol:27"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)5142": {
              "label": "contract IERC20Upgradeable"
            },
            "t_contract(ISToken)12016": {
              "label": "contract ISToken"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(IAPY)12044_storage)": {
              "label": "mapping(uint256 => struct WGCStaking.IAPY)"
            },
            "t_struct(IAPY)12044_storage": {
              "label": "struct WGCStaking.IAPY",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "growthRate",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "sWGC": {
        "src": "contracts\\sWGC.sol:17",
        "version": {
          "withMetadata": "3141cdd27b5702c637271e1964ae6c6313d020d4e6092faf705b53b4e96d1246",
          "withoutMetadata": "7454daeec524ea63e21ce04ae3a3614130024880b7fb6c3f6ec2af8ff6b939e7",
          "linkedWithoutMetadata": "7454daeec524ea63e21ce04ae3a3614130024880b7fb6c3f6ec2af8ff6b939e7"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "EIP712Upgradeable",
          "Initializable",
          "IERC20Upgradeable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "SafeMathUpgradeable",
          "ECDSAUpgradeable",
          "SafeCastUpgradeable",
          "MathUpgradeable"
        ],
        "methods": [
          "initialize(string,string,address,uint8)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "isExcludedFromReward(address)",
          "totalRewards()",
          "tokenFromReflection(uint256)",
          "excludeFromReward(address)",
          "includeInReward(address)",
          "setStakingAddress(address)",
          "transferForeignToken(address,address)",
          "distributeRewards(uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()",
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\sWGC.sol:47"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\sWGC.sol:47"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_tTotal",
            "src": "contracts\\sWGC.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_rTotal",
            "src": "contracts\\sWGC.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "sWGC",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\sWGC.sol:42"
            },
            {
              "contract": "sWGC",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)12460_storage)dyn_storage)",
              "src": "contracts\\sWGC.sol:43"
            },
            {
              "contract": "sWGC",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)12460_storage)dyn_storage",
              "src": "contracts\\sWGC.sol:44"
            },
            {
              "contract": "sWGC",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)6570_storage)",
              "src": "contracts\\sWGC.sol:45"
            },
            {
              "contract": "sWGC",
              "label": "_rOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:52"
            },
            {
              "contract": "sWGC",
              "label": "_tOwned",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\sWGC.sol:53"
            },
            {
              "contract": "sWGC",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\sWGC.sol:54"
            },
            {
              "contract": "sWGC",
              "label": "_isExcluded",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\sWGC.sol:56"
            },
            {
              "contract": "sWGC",
              "label": "_excluded",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\sWGC.sol:57"
            },
            {
              "contract": "sWGC",
              "label": "stakingContract",
              "type": "t_address",
              "src": "contracts\\sWGC.sol:58"
            },
            {
              "contract": "sWGC",
              "label": "_tTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:61"
            },
            {
              "contract": "sWGC",
              "label": "_rTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:62"
            },
            {
              "contract": "sWGC",
              "label": "_tRewardTotal",
              "type": "t_uint256",
              "src": "contracts\\sWGC.sol:63"
            },
            {
              "contract": "sWGC",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:64"
            },
            {
              "contract": "sWGC",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\sWGC.sol:65"
            },
            {
              "contract": "sWGC",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\sWGC.sol:66"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)12460_storage)dyn_storage)": {
              "label": "mapping(address => struct sWGC.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)12460_storage)dyn_storage": {
              "label": "struct sWGC.Checkpoint[]"
            },
            "t_struct(Checkpoint)12460_storage": {
              "label": "struct sWGC.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_mapping(t_address,t_struct(Counter)6570_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_struct(Counter)6570_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}